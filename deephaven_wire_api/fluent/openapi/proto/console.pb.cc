// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: console.proto

#include "console.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
constexpr GetConsoleTypesRequest::GetConsoleTypesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetConsoleTypesRequestDefaultTypeInternal {
  constexpr GetConsoleTypesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConsoleTypesRequestDefaultTypeInternal() {}
  union {
    GetConsoleTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConsoleTypesRequestDefaultTypeInternal _GetConsoleTypesRequest_default_instance_;
constexpr GetConsoleTypesResponse::GetConsoleTypesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_types_(){}
struct GetConsoleTypesResponseDefaultTypeInternal {
  constexpr GetConsoleTypesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConsoleTypesResponseDefaultTypeInternal() {}
  union {
    GetConsoleTypesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConsoleTypesResponseDefaultTypeInternal _GetConsoleTypesResponse_default_instance_;
constexpr StartConsoleRequest::StartConsoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr){}
struct StartConsoleRequestDefaultTypeInternal {
  constexpr StartConsoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartConsoleRequestDefaultTypeInternal() {}
  union {
    StartConsoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartConsoleRequestDefaultTypeInternal _StartConsoleRequest_default_instance_;
constexpr StartConsoleResponse::StartConsoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_names_()
  , widget_names_()
  , result_id_(nullptr){}
struct StartConsoleResponseDefaultTypeInternal {
  constexpr StartConsoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartConsoleResponseDefaultTypeInternal() {}
  union {
    StartConsoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartConsoleResponseDefaultTypeInternal _StartConsoleResponse_default_instance_;
constexpr LogSubscriptionRequest::LogSubscriptionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : levels_()
  , last_seen_log_timestamp_(PROTOBUF_LONGLONG(0)){}
struct LogSubscriptionRequestDefaultTypeInternal {
  constexpr LogSubscriptionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogSubscriptionRequestDefaultTypeInternal() {}
  union {
    LogSubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogSubscriptionRequestDefaultTypeInternal _LogSubscriptionRequest_default_instance_;
constexpr LogSubscriptionData::LogSubscriptionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_level_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , micros_(PROTOBUF_LONGLONG(0)){}
struct LogSubscriptionDataDefaultTypeInternal {
  constexpr LogSubscriptionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogSubscriptionDataDefaultTypeInternal() {}
  union {
    LogSubscriptionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogSubscriptionDataDefaultTypeInternal _LogSubscriptionData_default_instance_;
constexpr ExecuteCommandRequest::ExecuteCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , console_id_(nullptr){}
struct ExecuteCommandRequestDefaultTypeInternal {
  constexpr ExecuteCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteCommandRequestDefaultTypeInternal() {}
  union {
    ExecuteCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteCommandRequestDefaultTypeInternal _ExecuteCommandRequest_default_instance_;
constexpr ExecuteCommandResponse::ExecuteCommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : created_()
  , updated_()
  , removed_()
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteCommandResponseDefaultTypeInternal {
  constexpr ExecuteCommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteCommandResponseDefaultTypeInternal() {}
  union {
    ExecuteCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteCommandResponseDefaultTypeInternal _ExecuteCommandResponse_default_instance_;
constexpr VariableDefinition::VariableDefinition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VariableDefinitionDefaultTypeInternal {
  constexpr VariableDefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableDefinitionDefaultTypeInternal() {}
  union {
    VariableDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableDefinitionDefaultTypeInternal _VariableDefinition_default_instance_;
constexpr BindTableToVariableRequest::BindTableToVariableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variable_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , console_id_(nullptr)
  , table_id_(nullptr){}
struct BindTableToVariableRequestDefaultTypeInternal {
  constexpr BindTableToVariableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindTableToVariableRequestDefaultTypeInternal() {}
  union {
    BindTableToVariableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindTableToVariableRequestDefaultTypeInternal _BindTableToVariableRequest_default_instance_;
constexpr BindTableToVariableResponse::BindTableToVariableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BindTableToVariableResponseDefaultTypeInternal {
  constexpr BindTableToVariableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindTableToVariableResponseDefaultTypeInternal() {}
  union {
    BindTableToVariableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindTableToVariableResponseDefaultTypeInternal _BindTableToVariableResponse_default_instance_;
constexpr CancelCommandRequest::CancelCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , command_id_(nullptr){}
struct CancelCommandRequestDefaultTypeInternal {
  constexpr CancelCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelCommandRequestDefaultTypeInternal() {}
  union {
    CancelCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelCommandRequestDefaultTypeInternal _CancelCommandRequest_default_instance_;
constexpr CancelCommandResponse::CancelCommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CancelCommandResponseDefaultTypeInternal {
  constexpr CancelCommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelCommandResponseDefaultTypeInternal() {}
  union {
    CancelCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelCommandResponseDefaultTypeInternal _CancelCommandResponse_default_instance_;
constexpr OpenDocumentRequest::OpenDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , text_document_(nullptr){}
struct OpenDocumentRequestDefaultTypeInternal {
  constexpr OpenDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenDocumentRequestDefaultTypeInternal() {}
  union {
    OpenDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenDocumentRequestDefaultTypeInternal _OpenDocumentRequest_default_instance_;
constexpr TextDocumentItem::TextDocumentItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct TextDocumentItemDefaultTypeInternal {
  constexpr TextDocumentItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextDocumentItemDefaultTypeInternal() {}
  union {
    TextDocumentItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextDocumentItemDefaultTypeInternal _TextDocumentItem_default_instance_;
constexpr OpenDocumentResponse::OpenDocumentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OpenDocumentResponseDefaultTypeInternal {
  constexpr OpenDocumentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenDocumentResponseDefaultTypeInternal() {}
  union {
    OpenDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenDocumentResponseDefaultTypeInternal _OpenDocumentResponse_default_instance_;
constexpr CloseDocumentRequest::CloseDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , text_document_(nullptr){}
struct CloseDocumentRequestDefaultTypeInternal {
  constexpr CloseDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseDocumentRequestDefaultTypeInternal() {}
  union {
    CloseDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseDocumentRequestDefaultTypeInternal _CloseDocumentRequest_default_instance_;
constexpr CloseDocumentResponse::CloseDocumentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CloseDocumentResponseDefaultTypeInternal {
  constexpr CloseDocumentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseDocumentResponseDefaultTypeInternal() {}
  union {
    CloseDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseDocumentResponseDefaultTypeInternal _CloseDocumentResponse_default_instance_;
constexpr ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr)
  , range_length_(0){}
struct ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal {
  constexpr ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest_TextDocumentContentChangeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal _ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_;
constexpr ChangeDocumentRequest::ChangeDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_changes_()
  , console_id_(nullptr)
  , text_document_(nullptr){}
struct ChangeDocumentRequestDefaultTypeInternal {
  constexpr ChangeDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeDocumentRequestDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeDocumentRequestDefaultTypeInternal _ChangeDocumentRequest_default_instance_;
constexpr DocumentRange::DocumentRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct DocumentRangeDefaultTypeInternal {
  constexpr DocumentRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentRangeDefaultTypeInternal() {}
  union {
    DocumentRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentRangeDefaultTypeInternal _DocumentRange_default_instance_;
constexpr VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct VersionedTextDocumentIdentifierDefaultTypeInternal {
  constexpr VersionedTextDocumentIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionedTextDocumentIdentifierDefaultTypeInternal() {}
  union {
    VersionedTextDocumentIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionedTextDocumentIdentifierDefaultTypeInternal _VersionedTextDocumentIdentifier_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_(0)
  , character_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr ChangeDocumentResponse::ChangeDocumentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChangeDocumentResponseDefaultTypeInternal {
  constexpr ChangeDocumentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeDocumentResponseDefaultTypeInternal() {}
  union {
    ChangeDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeDocumentResponseDefaultTypeInternal _ChangeDocumentResponse_default_instance_;
constexpr GetCompletionItemsRequest::GetCompletionItemsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , context_(nullptr)
  , text_document_(nullptr)
  , position_(nullptr){}
struct GetCompletionItemsRequestDefaultTypeInternal {
  constexpr GetCompletionItemsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCompletionItemsRequestDefaultTypeInternal() {}
  union {
    GetCompletionItemsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCompletionItemsRequestDefaultTypeInternal _GetCompletionItemsRequest_default_instance_;
constexpr CompletionContext::CompletionContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trigger_character_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trigger_kind_(0){}
struct CompletionContextDefaultTypeInternal {
  constexpr CompletionContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompletionContextDefaultTypeInternal() {}
  union {
    CompletionContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompletionContextDefaultTypeInternal _CompletionContext_default_instance_;
constexpr GetCompletionItemsResponse::GetCompletionItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct GetCompletionItemsResponseDefaultTypeInternal {
  constexpr GetCompletionItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCompletionItemsResponseDefaultTypeInternal() {}
  union {
    GetCompletionItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCompletionItemsResponseDefaultTypeInternal _GetCompletionItemsResponse_default_instance_;
constexpr CompletionItem::CompletionItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_text_edits_()
  , commit_characters_()
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , documentation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filter_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_edit_(nullptr)
  , start_(0)
  , length_(0)
  , kind_(0)
  , deprecated_(false)
  , preselect_(false)
  , insert_text_format_(0){}
struct CompletionItemDefaultTypeInternal {
  constexpr CompletionItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompletionItemDefaultTypeInternal() {}
  union {
    CompletionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompletionItemDefaultTypeInternal _CompletionItem_default_instance_;
constexpr TextEdit::TextEdit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr){}
struct TextEditDefaultTypeInternal {
  constexpr TextEditDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextEditDefaultTypeInternal() {}
  union {
    TextEdit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextEditDefaultTypeInternal _TextEdit_default_instance_;
constexpr FetchTableRequest::FetchTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , console_id_(nullptr)
  , table_id_(nullptr){}
struct FetchTableRequestDefaultTypeInternal {
  constexpr FetchTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchTableRequestDefaultTypeInternal() {}
  union {
    FetchTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchTableRequestDefaultTypeInternal _FetchTableRequest_default_instance_;
constexpr FetchPandasTableRequest::FetchPandasTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , table_id_(nullptr){}
struct FetchPandasTableRequestDefaultTypeInternal {
  constexpr FetchPandasTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchPandasTableRequestDefaultTypeInternal() {}
  union {
    FetchPandasTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchPandasTableRequestDefaultTypeInternal _FetchPandasTableRequest_default_instance_;
constexpr FetchFigureRequest::FetchFigureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr){}
struct FetchFigureRequestDefaultTypeInternal {
  constexpr FetchFigureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchFigureRequestDefaultTypeInternal() {}
  union {
    FetchFigureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchFigureRequestDefaultTypeInternal _FetchFigureRequest_default_instance_;
constexpr FetchFigureResponse::FetchFigureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FetchFigureResponseDefaultTypeInternal {
  constexpr FetchFigureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchFigureResponseDefaultTypeInternal() {}
  union {
    FetchFigureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchFigureResponseDefaultTypeInternal _FetchFigureResponse_default_instance_;
constexpr FetchTableMapRequest::FetchTableMapRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr){}
struct FetchTableMapRequestDefaultTypeInternal {
  constexpr FetchTableMapRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchTableMapRequestDefaultTypeInternal() {}
  union {
    FetchTableMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchTableMapRequestDefaultTypeInternal _FetchTableMapRequest_default_instance_;
constexpr FetchTableMapResponse::FetchTableMapResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FetchTableMapResponseDefaultTypeInternal {
  constexpr FetchTableMapResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchTableMapResponseDefaultTypeInternal() {}
  union {
    FetchTableMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchTableMapResponseDefaultTypeInternal _FetchTableMapResponse_default_instance_;
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_console_2eproto[35];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_console_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_console_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_console_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, console_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, session_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, table_names_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, widget_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, last_seen_log_timestamp_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, micros_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, log_level_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, created_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, updated_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, variable_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, text_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, language_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, version_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, text_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, range_length_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, content_changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, start_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, line_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, context_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, trigger_kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, trigger_character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, start_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, length_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, detail_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, documentation_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, deprecated_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, preselect_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, text_edit_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, sort_text_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, filter_text_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, insert_text_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, additional_text_edits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, commit_characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, console_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest, console_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest)},
  { 5, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse)},
  { 11, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest)},
  { 18, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse)},
  { 26, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest)},
  { 33, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData)},
  { 41, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest)},
  { 48, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse)},
  { 57, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::VariableDefinition)},
  { 64, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest)},
  { 72, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse)},
  { 77, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest)},
  { 84, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse)},
  { 89, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest)},
  { 96, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem)},
  { 105, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse)},
  { 110, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest)},
  { 117, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse)},
  { 122, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent)},
  { 130, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest)},
  { 138, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::DocumentRange)},
  { 145, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier)},
  { 152, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Position)},
  { 159, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse)},
  { 164, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest)},
  { 173, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionContext)},
  { 180, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse)},
  { 186, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionItem)},
  { 205, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextEdit)},
  { 212, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchTableRequest)},
  { 220, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest)},
  { 227, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest)},
  { 233, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse)},
  { 238, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest)},
  { 244, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_StartConsoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_StartConsoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_VariableDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CancelCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CancelCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_OpenDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_TextDocumentItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_OpenDocumentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CloseDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CloseDocumentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_DocumentRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CompletionContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CompletionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_TextEdit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchPandasTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchFigureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchFigureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchTableMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchTableMapResponse_default_instance_),
};

const char descriptor_table_protodef_console_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rconsole.proto\022(io.deephaven.proto.back"
  "plane.script.grpc\032\013table.proto\032\014flight.p"
  "roto\"\030\n\026GetConsoleTypesRequest\"0\n\027GetCon"
  "soleTypesResponse\022\025\n\rconsole_types\030\001 \003(\t"
  "\"]\n\023StartConsoleRequest\0220\n\tresult_id\030\001 \001"
  "(\0132\035.arrow.flight.protocol.Wicket\022\024\n\014ses"
  "sion_type\030\002 \001(\t\"s\n\024StartConsoleResponse\022"
  "0\n\tresult_id\030\001 \001(\0132\035.arrow.flight.protoc"
  "ol.Wicket\022\023\n\013table_names\030\002 \003(\t\022\024\n\014widget"
  "_names\030\003 \003(\t\"I\n\026LogSubscriptionRequest\022\037"
  "\n\027last_seen_log_timestamp\030\001 \001(\003\022\016\n\006level"
  "s\030\002 \003(\t\"I\n\023LogSubscriptionData\022\016\n\006micros"
  "\030\001 \001(\003\022\021\n\tlog_level\030\002 \001(\t\022\017\n\007message\030\003 \001"
  "(\t\"^\n\025ExecuteCommandRequest\0221\n\nconsole_i"
  "d\030\001 \001(\0132\035.arrow.flight.protocol.Wicket\022\014"
  "\n\004code\030\003 \001(\tJ\004\010\002\020\003\"\234\002\n\026ExecuteCommandRes"
  "ponse\022\025\n\rerror_message\030\001 \001(\t\022M\n\007created\030"
  "\002 \003(\0132<.io.deephaven.proto.backplane.scr"
  "ipt.grpc.VariableDefinition\022M\n\007updated\030\003"
  " \003(\0132<.io.deephaven.proto.backplane.scri"
  "pt.grpc.VariableDefinition\022M\n\007removed\030\004 "
  "\003(\0132<.io.deephaven.proto.backplane.scrip"
  "t.grpc.VariableDefinition\"0\n\022VariableDef"
  "inition\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\"\235\001\n\032"
  "BindTableToVariableRequest\0221\n\nconsole_id"
  "\030\001 \001(\0132\035.arrow.flight.protocol.Wicket\022\025\n"
  "\rvariable_name\030\003 \001(\t\022/\n\010table_id\030\004 \001(\0132\035"
  ".arrow.flight.protocol.WicketJ\004\010\002\020\003\"\035\n\033B"
  "indTableToVariableResponse\"|\n\024CancelComm"
  "andRequest\0221\n\nconsole_id\030\001 \001(\0132\035.arrow.f"
  "light.protocol.Wicket\0221\n\ncommand_id\030\002 \001("
  "\0132\035.arrow.flight.protocol.Wicket\"\027\n\025Canc"
  "elCommandResponse\"\233\001\n\023OpenDocumentReques"
  "t\0221\n\nconsole_id\030\001 \001(\0132\035.arrow.flight.pro"
  "tocol.Wicket\022Q\n\rtext_document\030\002 \001(\0132:.io"
  ".deephaven.proto.backplane.script.grpc.T"
  "extDocumentItem\"S\n\020TextDocumentItem\022\013\n\003u"
  "ri\030\001 \001(\t\022\023\n\013language_id\030\002 \001(\t\022\017\n\007version"
  "\030\003 \001(\005\022\014\n\004text\030\004 \001(\t\"\026\n\024OpenDocumentResp"
  "onse\"\253\001\n\024CloseDocumentRequest\0221\n\nconsole"
  "_id\030\001 \001(\0132\035.arrow.flight.protocol.Wicket"
  "\022`\n\rtext_document\030\002 \001(\0132I.io.deephaven.p"
  "roto.backplane.script.grpc.VersionedText"
  "DocumentIdentifier\"\027\n\025CloseDocumentRespo"
  "nse\"\264\003\n\025ChangeDocumentRequest\0221\n\nconsole"
  "_id\030\001 \001(\0132\035.arrow.flight.protocol.Wicket"
  "\022`\n\rtext_document\030\002 \001(\0132I.io.deephaven.p"
  "roto.backplane.script.grpc.VersionedText"
  "DocumentIdentifier\022w\n\017content_changes\030\003 "
  "\003(\0132^.io.deephaven.proto.backplane.scrip"
  "t.grpc.ChangeDocumentRequest.TextDocumen"
  "tContentChangeEvent\032\214\001\n\036TextDocumentCont"
  "entChangeEvent\022F\n\005range\030\001 \001(\01327.io.deeph"
  "aven.proto.backplane.script.grpc.Documen"
  "tRange\022\024\n\014range_length\030\002 \001(\005\022\014\n\004text\030\003 \001"
  "(\t\"\223\001\n\rDocumentRange\022A\n\005start\030\001 \001(\01322.io"
  ".deephaven.proto.backplane.script.grpc.P"
  "osition\022\?\n\003end\030\002 \001(\01322.io.deephaven.prot"
  "o.backplane.script.grpc.Position\"\?\n\037Vers"
  "ionedTextDocumentIdentifier\022\013\n\003uri\030\001 \001(\t"
  "\022\017\n\007version\030\002 \001(\005\"+\n\010Position\022\014\n\004line\030\001 "
  "\001(\005\022\021\n\tcharacter\030\002 \001(\005\"\030\n\026ChangeDocument"
  "Response\"\304\002\n\031GetCompletionItemsRequest\0221"
  "\n\nconsole_id\030\001 \001(\0132\035.arrow.flight.protoc"
  "ol.Wicket\022L\n\007context\030\002 \001(\0132;.io.deephave"
  "n.proto.backplane.script.grpc.Completion"
  "Context\022`\n\rtext_document\030\003 \001(\0132I.io.deep"
  "haven.proto.backplane.script.grpc.Versio"
  "nedTextDocumentIdentifier\022D\n\010position\030\004 "
  "\001(\01322.io.deephaven.proto.backplane.scrip"
  "t.grpc.Position\"D\n\021CompletionContext\022\024\n\014"
  "trigger_kind\030\001 \001(\005\022\031\n\021trigger_character\030"
  "\002 \001(\t\"e\n\032GetCompletionItemsResponse\022G\n\005i"
  "tems\030\001 \003(\01328.io.deephaven.proto.backplan"
  "e.script.grpc.CompletionItem\"\223\003\n\016Complet"
  "ionItem\022\r\n\005start\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022\r"
  "\n\005label\030\003 \001(\t\022\014\n\004kind\030\004 \001(\005\022\016\n\006detail\030\005 "
  "\001(\t\022\025\n\rdocumentation\030\006 \001(\t\022\022\n\ndeprecated"
  "\030\007 \001(\010\022\021\n\tpreselect\030\010 \001(\010\022E\n\ttext_edit\030\t"
  " \001(\01322.io.deephaven.proto.backplane.scri"
  "pt.grpc.TextEdit\022\021\n\tsort_text\030\n \001(\t\022\023\n\013f"
  "ilter_text\030\013 \001(\t\022\032\n\022insert_text_format\030\014"
  " \001(\005\022Q\n\025additional_text_edits\030\r \003(\01322.io"
  ".deephaven.proto.backplane.script.grpc.T"
  "extEdit\022\031\n\021commit_characters\030\016 \003(\t\"`\n\010Te"
  "xtEdit\022F\n\005range\030\001 \001(\01327.io.deephaven.pro"
  "to.backplane.script.grpc.DocumentRange\022\014"
  "\n\004text\030\002 \001(\t\"\213\001\n\021FetchTableRequest\0221\n\nco"
  "nsole_id\030\001 \001(\0132\035.arrow.flight.protocol.W"
  "icket\022/\n\010table_id\030\002 \001(\0132\035.arrow.flight.p"
  "rotocol.Wicket\022\022\n\ntable_name\030\003 \001(\t\"}\n\027Fe"
  "tchPandasTableRequest\0221\n\nconsole_id\030\001 \001("
  "\0132\035.arrow.flight.protocol.Wicket\022/\n\010tabl"
  "e_id\030\002 \001(\0132\035.arrow.flight.protocol.Wicke"
  "t\"M\n\022FetchFigureRequest\0221\n\nconsole_id\030\001 "
  "\001(\0132\035.arrow.flight.protocol.WicketJ\004\010\002\020\003"
  "\"\025\n\023FetchFigureResponse\"O\n\024FetchTableMap"
  "Request\0221\n\nconsole_id\030\001 \001(\0132\035.arrow.flig"
  "ht.protocol.WicketJ\004\010\002\020\003\"\027\n\025FetchTableMa"
  "pResponse2\335\020\n\016ConsoleService\022\217\001\n\014StartCo"
  "nsole\022=.io.deephaven.proto.backplane.scr"
  "ipt.grpc.StartConsoleRequest\032>.io.deepha"
  "ven.proto.backplane.script.grpc.StartCon"
  "soleResponse\"\000\022\230\001\n\017GetConsoleTypes\022@.io."
  "deephaven.proto.backplane.script.grpc.Ge"
  "tConsoleTypesRequest\032A.io.deephaven.prot"
  "o.backplane.script.grpc.GetConsoleTypesR"
  "esponse\"\000\022\226\001\n\017SubscribeToLogs\022@.io.deeph"
  "aven.proto.backplane.script.grpc.LogSubs"
  "criptionRequest\032=.io.deephaven.proto.bac"
  "kplane.script.grpc.LogSubscriptionData\"\000"
  "0\001\022\225\001\n\016ExecuteCommand\022\?.io.deephaven.pro"
  "to.backplane.script.grpc.ExecuteCommandR"
  "equest\032@.io.deephaven.proto.backplane.sc"
  "ript.grpc.ExecuteCommandResponse\"\000\022\222\001\n\rC"
  "ancelCommand\022>.io.deephaven.proto.backpl"
  "ane.script.grpc.CancelCommandRequest\032\?.i"
  "o.deephaven.proto.backplane.script.grpc."
  "CancelCommandResponse\"\000\022\244\001\n\023BindTableToV"
  "ariable\022D.io.deephaven.proto.backplane.s"
  "cript.grpc.BindTableToVariableRequest\032E."
  "io.deephaven.proto.backplane.script.grpc"
  ".BindTableToVariableResponse\"\000\022\217\001\n\014OpenD"
  "ocument\022=.io.deephaven.proto.backplane.s"
  "cript.grpc.OpenDocumentRequest\032>.io.deep"
  "haven.proto.backplane.script.grpc.OpenDo"
  "cumentResponse\"\000\022\225\001\n\016ChangeDocument\022\?.io"
  ".deephaven.proto.backplane.script.grpc.C"
  "hangeDocumentRequest\032@.io.deephaven.prot"
  "o.backplane.script.grpc.ChangeDocumentRe"
  "sponse\"\000\022\241\001\n\022GetCompletionItems\022C.io.dee"
  "phaven.proto.backplane.script.grpc.GetCo"
  "mpletionItemsRequest\032D.io.deephaven.prot"
  "o.backplane.script.grpc.GetCompletionIte"
  "msResponse\"\000\022\222\001\n\rCloseDocument\022>.io.deep"
  "haven.proto.backplane.script.grpc.CloseD"
  "ocumentRequest\032\?.io.deephaven.proto.back"
  "plane.script.grpc.CloseDocumentResponse\""
  "\000\022\215\001\n\nFetchTable\022;.io.deephaven.proto.ba"
  "ckplane.script.grpc.FetchTableRequest\032@."
  "io.deephaven.proto.backplane.grpc.Export"
  "edTableCreationResponse\"\000\022\231\001\n\020FetchPanda"
  "sTable\022A.io.deephaven.proto.backplane.sc"
  "ript.grpc.FetchPandasTableRequest\032@.io.d"
  "eephaven.proto.backplane.grpc.ExportedTa"
  "bleCreationResponse\"\000\022\214\001\n\013FetchFigure\022<."
  "io.deephaven.proto.backplane.script.grpc"
  ".FetchFigureRequest\032=.io.deephaven.proto"
  ".backplane.script.grpc.FetchFigureRespon"
  "se\"\000\022\222\001\n\rFetchTableMap\022>.io.deephaven.pr"
  "oto.backplane.script.grpc.FetchTableMapR"
  "equest\032\?.io.deephaven.proto.backplane.sc"
  "ript.grpc.FetchTableMapResponse\"\000B\004H\001P\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_console_2eproto_deps[2] = {
  &::descriptor_table_flight_2eproto,
  &::descriptor_table_table_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_console_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_console_2eproto = {
  false, false, 6127, descriptor_table_protodef_console_2eproto, "console.proto", 
  &descriptor_table_console_2eproto_once, descriptor_table_console_2eproto_deps, 2, 35,
  schemas, file_default_instances, TableStruct_console_2eproto::offsets,
  file_level_metadata_console_2eproto, file_level_enum_descriptors_console_2eproto, file_level_service_descriptors_console_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_console_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_console_2eproto);
  return descriptor_table_console_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_console_2eproto(&descriptor_table_console_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {

// ===================================================================

class GetConsoleTypesRequest::_Internal {
 public:
};

GetConsoleTypesRequest::GetConsoleTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}
GetConsoleTypesRequest::GetConsoleTypesRequest(const GetConsoleTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}

void GetConsoleTypesRequest::SharedCtor() {
}

GetConsoleTypesRequest::~GetConsoleTypesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConsoleTypesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetConsoleTypesRequest::ArenaDtor(void* object) {
  GetConsoleTypesRequest* _this = reinterpret_cast< GetConsoleTypesRequest* >(object);
  (void)_this;
}
void GetConsoleTypesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConsoleTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConsoleTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsoleTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConsoleTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  return target;
}

size_t GetConsoleTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConsoleTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsoleTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConsoleTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
    MergeFrom(*source);
  }
}

void GetConsoleTypesRequest::MergeFrom(const GetConsoleTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetConsoleTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsoleTypesRequest::CopyFrom(const GetConsoleTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsoleTypesRequest::IsInitialized() const {
  return true;
}

void GetConsoleTypesRequest::InternalSwap(GetConsoleTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsoleTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetConsoleTypesResponse::_Internal {
 public:
};

GetConsoleTypesResponse::GetConsoleTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  console_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}
GetConsoleTypesResponse::GetConsoleTypesResponse(const GetConsoleTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      console_types_(from.console_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}

void GetConsoleTypesResponse::SharedCtor() {
}

GetConsoleTypesResponse::~GetConsoleTypesResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConsoleTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetConsoleTypesResponse::ArenaDtor(void* object) {
  GetConsoleTypesResponse* _this = reinterpret_cast< GetConsoleTypesResponse* >(object);
  (void)_this;
}
void GetConsoleTypesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConsoleTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConsoleTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  console_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsoleTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string console_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_console_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConsoleTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string console_types = 1;
  for (int i = 0, n = this->_internal_console_types_size(); i < n; i++) {
    const auto& s = this->_internal_console_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  return target;
}

size_t GetConsoleTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string console_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(console_types_.size());
  for (int i = 0, n = console_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      console_types_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConsoleTypesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsoleTypesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConsoleTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
    MergeFrom(*source);
  }
}

void GetConsoleTypesResponse::MergeFrom(const GetConsoleTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  console_types_.MergeFrom(from.console_types_);
}

void GetConsoleTypesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsoleTypesResponse::CopyFrom(const GetConsoleTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsoleTypesResponse::IsInitialized() const {
  return true;
}

void GetConsoleTypesResponse::InternalSwap(GetConsoleTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  console_types_.InternalSwap(&other->console_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsoleTypesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartConsoleRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const StartConsoleRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
StartConsoleRequest::_Internal::result_id(const StartConsoleRequest* msg) {
  return *msg->result_id_;
}
void StartConsoleRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
StartConsoleRequest::StartConsoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}
StartConsoleRequest::StartConsoleRequest(const StartConsoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_type().empty()) {
    session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_type(), 
      GetArena());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}

void StartConsoleRequest::SharedCtor() {
session_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_id_ = nullptr;
}

StartConsoleRequest::~StartConsoleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartConsoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
}

void StartConsoleRequest::ArenaDtor(void* object) {
  StartConsoleRequest* _this = reinterpret_cast< StartConsoleRequest* >(object);
  (void)_this;
}
void StartConsoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartConsoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartConsoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_type_.ClearToEmpty();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartConsoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartConsoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // string session_type = 2;
  if (this->session_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_type().data(), static_cast<int>(this->_internal_session_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  return target;
}

size_t StartConsoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_type = 2;
  if (this->session_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_type());
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartConsoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartConsoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartConsoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
    MergeFrom(*source);
  }
}

void StartConsoleRequest::MergeFrom(const StartConsoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_type().size() > 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
}

void StartConsoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartConsoleRequest::CopyFrom(const StartConsoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartConsoleRequest::IsInitialized() const {
  return true;
}

void StartConsoleRequest::InternalSwap(StartConsoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_type_.Swap(&other->session_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_id_, other->result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartConsoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartConsoleResponse::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const StartConsoleResponse* msg);
};

const ::arrow::flight::protocol::Wicket&
StartConsoleResponse::_Internal::result_id(const StartConsoleResponse* msg) {
  return *msg->result_id_;
}
void StartConsoleResponse::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
StartConsoleResponse::StartConsoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  table_names_(arena),
  widget_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}
StartConsoleResponse::StartConsoleResponse(const StartConsoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_names_(from.table_names_),
      widget_names_(from.widget_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}

void StartConsoleResponse::SharedCtor() {
result_id_ = nullptr;
}

StartConsoleResponse::~StartConsoleResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartConsoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
}

void StartConsoleResponse::ArenaDtor(void* object) {
  StartConsoleResponse* _this = reinterpret_cast< StartConsoleResponse* >(object);
  (void)_this;
}
void StartConsoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartConsoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartConsoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_names_.Clear();
  widget_names_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartConsoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string table_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string widget_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_widget_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartConsoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // repeated string table_names = 2;
  for (int i = 0, n = this->_internal_table_names_size(); i < n; i++) {
    const auto& s = this->_internal_table_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated string widget_names = 3;
  for (int i = 0, n = this->_internal_widget_names_size(); i < n; i++) {
    const auto& s = this->_internal_widget_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  return target;
}

size_t StartConsoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_names_.size());
  for (int i = 0, n = table_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_names_.Get(i));
  }

  // repeated string widget_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(widget_names_.size());
  for (int i = 0, n = widget_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      widget_names_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartConsoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartConsoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartConsoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
    MergeFrom(*source);
  }
}

void StartConsoleResponse::MergeFrom(const StartConsoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_names_.MergeFrom(from.table_names_);
  widget_names_.MergeFrom(from.widget_names_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
}

void StartConsoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartConsoleResponse::CopyFrom(const StartConsoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartConsoleResponse::IsInitialized() const {
  return true;
}

void StartConsoleResponse::InternalSwap(StartConsoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_names_.InternalSwap(&other->table_names_);
  widget_names_.InternalSwap(&other->widget_names_);
  swap(result_id_, other->result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartConsoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogSubscriptionRequest::_Internal {
 public:
};

LogSubscriptionRequest::LogSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  levels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}
LogSubscriptionRequest::LogSubscriptionRequest(const LogSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_seen_log_timestamp_ = from.last_seen_log_timestamp_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}

void LogSubscriptionRequest::SharedCtor() {
last_seen_log_timestamp_ = PROTOBUF_LONGLONG(0);
}

LogSubscriptionRequest::~LogSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogSubscriptionRequest::ArenaDtor(void* object) {
  LogSubscriptionRequest* _this = reinterpret_cast< LogSubscriptionRequest* >(object);
  (void)_this;
}
void LogSubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  last_seen_log_timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 last_seen_log_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_seen_log_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_levels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSubscriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_seen_log_timestamp = 1;
  if (this->last_seen_log_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_seen_log_timestamp(), target);
  }

  // repeated string levels = 2;
  for (int i = 0, n = this->_internal_levels_size(); i < n; i++) {
    const auto& s = this->_internal_levels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  return target;
}

size_t LogSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string levels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(levels_.size());
  for (int i = 0, n = levels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      levels_.Get(i));
  }

  // int64 last_seen_log_timestamp = 1;
  if (this->last_seen_log_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_seen_log_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
    MergeFrom(*source);
  }
}

void LogSubscriptionRequest::MergeFrom(const LogSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  if (from.last_seen_log_timestamp() != 0) {
    _internal_set_last_seen_log_timestamp(from._internal_last_seen_log_timestamp());
  }
}

void LogSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSubscriptionRequest::CopyFrom(const LogSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSubscriptionRequest::IsInitialized() const {
  return true;
}

void LogSubscriptionRequest::InternalSwap(LogSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  levels_.InternalSwap(&other->levels_);
  swap(last_seen_log_timestamp_, other->last_seen_log_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogSubscriptionData::_Internal {
 public:
};

LogSubscriptionData::LogSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}
LogSubscriptionData::LogSubscriptionData(const LogSubscriptionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_level().empty()) {
    log_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_level(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  micros_ = from.micros_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}

void LogSubscriptionData::SharedCtor() {
log_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
micros_ = PROTOBUF_LONGLONG(0);
}

LogSubscriptionData::~LogSubscriptionData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSubscriptionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  log_level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogSubscriptionData::ArenaDtor(void* object) {
  LogSubscriptionData* _this = reinterpret_cast< LogSubscriptionData* >(object);
  (void)_this;
}
void LogSubscriptionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSubscriptionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_level_.ClearToEmpty();
  message_.ClearToEmpty();
  micros_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSubscriptionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 micros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_log_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSubscriptionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 micros = 1;
  if (this->micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_micros(), target);
  }

  // string log_level = 2;
  if (this->log_level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_level().data(), static_cast<int>(this->_internal_log_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_level(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  return target;
}

size_t LogSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_level = 2;
  if (this->log_level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_level());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 micros = 1;
  if (this->micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_micros());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSubscriptionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSubscriptionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSubscriptionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
    MergeFrom(*source);
  }
}

void LogSubscriptionData::MergeFrom(const LogSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level().size() > 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.micros() != 0) {
    _internal_set_micros(from._internal_micros());
  }
}

void LogSubscriptionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSubscriptionData::CopyFrom(const LogSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSubscriptionData::IsInitialized() const {
  return true;
}

void LogSubscriptionData::InternalSwap(LogSubscriptionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  log_level_.Swap(&other->log_level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(micros_, other->micros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSubscriptionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteCommandRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const ExecuteCommandRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
ExecuteCommandRequest::_Internal::console_id(const ExecuteCommandRequest* msg) {
  return *msg->console_id_;
}
void ExecuteCommandRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
ExecuteCommandRequest::ExecuteCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}
ExecuteCommandRequest::ExecuteCommandRequest(const ExecuteCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}

void ExecuteCommandRequest::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
console_id_ = nullptr;
}

ExecuteCommandRequest::~ExecuteCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete console_id_;
}

void ExecuteCommandRequest::ArenaDtor(void* object) {
  ExecuteCommandRequest* _this = reinterpret_cast< ExecuteCommandRequest* >(object);
  (void)_this;
}
void ExecuteCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // string code = 3;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  return target;
}

size_t ExecuteCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
    MergeFrom(*source);
  }
}

void ExecuteCommandRequest::MergeFrom(const ExecuteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
}

void ExecuteCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteCommandRequest::CopyFrom(const ExecuteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteCommandRequest::IsInitialized() const {
  return true;
}

void ExecuteCommandRequest::InternalSwap(ExecuteCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(console_id_, other->console_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteCommandResponse::_Internal {
 public:
};

ExecuteCommandResponse::ExecuteCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  created_(arena),
  updated_(arena),
  removed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}
ExecuteCommandResponse::ExecuteCommandResponse(const ExecuteCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      created_(from.created_),
      updated_(from.updated_),
      removed_(from.removed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}

void ExecuteCommandResponse::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteCommandResponse::~ExecuteCommandResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteCommandResponse::ArenaDtor(void* object) {
  ExecuteCommandResponse* _this = reinterpret_cast< ExecuteCommandResponse* >(object);
  (void)_this;
}
void ExecuteCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  created_.Clear();
  updated_.Clear();
  removed_.Clear();
  error_message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_created(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_created_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_created(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_updated(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_removed(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  return target;
}

size_t ExecuteCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
  total_size += 1UL * this->_internal_created_size();
  for (const auto& msg : this->created_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
  total_size += 1UL * this->_internal_updated_size();
  for (const auto& msg : this->updated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
  total_size += 1UL * this->_internal_removed_size();
  for (const auto& msg : this->removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
    MergeFrom(*source);
  }
}

void ExecuteCommandResponse::MergeFrom(const ExecuteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  created_.MergeFrom(from.created_);
  updated_.MergeFrom(from.updated_);
  removed_.MergeFrom(from.removed_);
  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
}

void ExecuteCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteCommandResponse::CopyFrom(const ExecuteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteCommandResponse::IsInitialized() const {
  return true;
}

void ExecuteCommandResponse::InternalSwap(ExecuteCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  created_.InternalSwap(&other->created_);
  updated_.InternalSwap(&other->updated_);
  removed_.InternalSwap(&other->removed_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VariableDefinition::_Internal {
 public:
};

VariableDefinition::VariableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
}
VariableDefinition::VariableDefinition(const VariableDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
}

void VariableDefinition::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VariableDefinition::~VariableDefinition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VariableDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableDefinition::ArenaDtor(void* object) {
  VariableDefinition* _this = reinterpret_cast< VariableDefinition* >(object);
  (void)_this;
}
void VariableDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VariableDefinition.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VariableDefinition.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VariableDefinition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VariableDefinition.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  return target;
}

size_t VariableDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariableDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
    MergeFrom(*source);
  }
}

void VariableDefinition::MergeFrom(const VariableDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void VariableDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableDefinition::CopyFrom(const VariableDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableDefinition::IsInitialized() const {
  return true;
}

void VariableDefinition::InternalSwap(VariableDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BindTableToVariableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const BindTableToVariableRequest* msg);
  static const ::arrow::flight::protocol::Wicket& table_id(const BindTableToVariableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
BindTableToVariableRequest::_Internal::console_id(const BindTableToVariableRequest* msg) {
  return *msg->console_id_;
}
const ::arrow::flight::protocol::Wicket&
BindTableToVariableRequest::_Internal::table_id(const BindTableToVariableRequest* msg) {
  return *msg->table_id_;
}
void BindTableToVariableRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
void BindTableToVariableRequest::clear_table_id() {
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
}
BindTableToVariableRequest::BindTableToVariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}
BindTableToVariableRequest::BindTableToVariableRequest(const BindTableToVariableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  variable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable_name().empty()) {
    variable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_variable_name(), 
      GetArena());
  }
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::arrow::flight::protocol::Wicket(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}

void BindTableToVariableRequest::SharedCtor() {
variable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(table_id_));
}

BindTableToVariableRequest::~BindTableToVariableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BindTableToVariableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  variable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete table_id_;
}

void BindTableToVariableRequest::ArenaDtor(void* object) {
  BindTableToVariableRequest* _this = reinterpret_cast< BindTableToVariableRequest* >(object);
  (void)_this;
}
void BindTableToVariableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindTableToVariableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindTableToVariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_name_.ClearToEmpty();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindTableToVariableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_variable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrow.flight.protocol.Wicket table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindTableToVariableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // string variable_name = 3;
  if (this->variable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable_name().data(), static_cast<int>(this->_internal_variable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_variable_name(), target);
  }

  // .arrow.flight.protocol.Wicket table_id = 4;
  if (this->has_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  return target;
}

size_t BindTableToVariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_name = 3;
  if (this->variable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable_name());
  }

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .arrow.flight.protocol.Wicket table_id = 4;
  if (this->has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindTableToVariableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindTableToVariableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindTableToVariableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
    MergeFrom(*source);
  }
}

void BindTableToVariableRequest::MergeFrom(const BindTableToVariableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variable_name().size() > 0) {
    _internal_set_variable_name(from._internal_variable_name());
  }
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_table_id()) {
    _internal_mutable_table_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_table_id());
  }
}

void BindTableToVariableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindTableToVariableRequest::CopyFrom(const BindTableToVariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindTableToVariableRequest::IsInitialized() const {
  return true;
}

void BindTableToVariableRequest::InternalSwap(BindTableToVariableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variable_name_.Swap(&other->variable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, table_id_)
      + sizeof(BindTableToVariableRequest::table_id_)
      - PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BindTableToVariableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BindTableToVariableResponse::_Internal {
 public:
};

BindTableToVariableResponse::BindTableToVariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}
BindTableToVariableResponse::BindTableToVariableResponse(const BindTableToVariableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}

void BindTableToVariableResponse::SharedCtor() {
}

BindTableToVariableResponse::~BindTableToVariableResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BindTableToVariableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BindTableToVariableResponse::ArenaDtor(void* object) {
  BindTableToVariableResponse* _this = reinterpret_cast< BindTableToVariableResponse* >(object);
  (void)_this;
}
void BindTableToVariableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindTableToVariableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindTableToVariableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindTableToVariableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindTableToVariableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  return target;
}

size_t BindTableToVariableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindTableToVariableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindTableToVariableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindTableToVariableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
    MergeFrom(*source);
  }
}

void BindTableToVariableResponse::MergeFrom(const BindTableToVariableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BindTableToVariableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindTableToVariableResponse::CopyFrom(const BindTableToVariableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindTableToVariableResponse::IsInitialized() const {
  return true;
}

void BindTableToVariableResponse::InternalSwap(BindTableToVariableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BindTableToVariableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelCommandRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const CancelCommandRequest* msg);
  static const ::arrow::flight::protocol::Wicket& command_id(const CancelCommandRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
CancelCommandRequest::_Internal::console_id(const CancelCommandRequest* msg) {
  return *msg->console_id_;
}
const ::arrow::flight::protocol::Wicket&
CancelCommandRequest::_Internal::command_id(const CancelCommandRequest* msg) {
  return *msg->command_id_;
}
void CancelCommandRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
void CancelCommandRequest::clear_command_id() {
  if (GetArena() == nullptr && command_id_ != nullptr) {
    delete command_id_;
  }
  command_id_ = nullptr;
}
CancelCommandRequest::CancelCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}
CancelCommandRequest::CancelCommandRequest(const CancelCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_command_id()) {
    command_id_ = new ::arrow::flight::protocol::Wicket(*from.command_id_);
  } else {
    command_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}

void CancelCommandRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(command_id_));
}

CancelCommandRequest::~CancelCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete command_id_;
}

void CancelCommandRequest::ArenaDtor(void* object) {
  CancelCommandRequest* _this = reinterpret_cast< CancelCommandRequest* >(object);
  (void)_this;
}
void CancelCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && command_id_ != nullptr) {
    delete command_id_;
  }
  command_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrow.flight.protocol.Wicket command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .arrow.flight.protocol.Wicket command_id = 2;
  if (this->has_command_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  return target;
}

size_t CancelCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .arrow.flight.protocol.Wicket command_id = 2;
  if (this->has_command_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
    MergeFrom(*source);
  }
}

void CancelCommandRequest::MergeFrom(const CancelCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_command_id()) {
    _internal_mutable_command_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_command_id());
  }
}

void CancelCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelCommandRequest::CopyFrom(const CancelCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCommandRequest::IsInitialized() const {
  return true;
}

void CancelCommandRequest::InternalSwap(CancelCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelCommandRequest, command_id_)
      + sizeof(CancelCommandRequest::command_id_)
      - PROTOBUF_FIELD_OFFSET(CancelCommandRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelCommandResponse::_Internal {
 public:
};

CancelCommandResponse::CancelCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}
CancelCommandResponse::CancelCommandResponse(const CancelCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}

void CancelCommandResponse::SharedCtor() {
}

CancelCommandResponse::~CancelCommandResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelCommandResponse::ArenaDtor(void* object) {
  CancelCommandResponse* _this = reinterpret_cast< CancelCommandResponse* >(object);
  (void)_this;
}
void CancelCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  return target;
}

size_t CancelCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
    MergeFrom(*source);
  }
}

void CancelCommandResponse::MergeFrom(const CancelCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CancelCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelCommandResponse::CopyFrom(const CancelCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCommandResponse::IsInitialized() const {
  return true;
}

void CancelCommandResponse::InternalSwap(CancelCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenDocumentRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const OpenDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& text_document(const OpenDocumentRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
OpenDocumentRequest::_Internal::console_id(const OpenDocumentRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem&
OpenDocumentRequest::_Internal::text_document(const OpenDocumentRequest* msg) {
  return *msg->text_document_;
}
void OpenDocumentRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
OpenDocumentRequest::OpenDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}
OpenDocumentRequest::OpenDocumentRequest(const OpenDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}

void OpenDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_document_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(text_document_));
}

OpenDocumentRequest::~OpenDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete text_document_;
}

void OpenDocumentRequest::ArenaDtor(void* object) {
  OpenDocumentRequest* _this = reinterpret_cast< OpenDocumentRequest* >(object);
  (void)_this;
}
void OpenDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenDocumentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  return target;
}

size_t OpenDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenDocumentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenDocumentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
    MergeFrom(*source);
  }
}

void OpenDocumentRequest::MergeFrom(const OpenDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::TextDocumentItem::MergeFrom(from._internal_text_document());
  }
}

void OpenDocumentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDocumentRequest::CopyFrom(const OpenDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDocumentRequest::IsInitialized() const {
  return true;
}

void OpenDocumentRequest::InternalSwap(OpenDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, text_document_)
      + sizeof(OpenDocumentRequest::text_document_)
      - PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenDocumentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextDocumentItem::_Internal {
 public:
};

TextDocumentItem::TextDocumentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}
TextDocumentItem::TextDocumentItem(const TextDocumentItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArena());
  }
  language_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_id().empty()) {
    language_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_id(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}

void TextDocumentItem::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0;
}

TextDocumentItem::~TextDocumentItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextDocumentItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextDocumentItem::ArenaDtor(void* object) {
  TextDocumentItem* _this = reinterpret_cast< TextDocumentItem* >(object);
  (void)_this;
}
void TextDocumentItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextDocumentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextDocumentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  language_id_.ClearToEmpty();
  text_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextDocumentItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextDocumentItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string language_id = 2;
  if (this->language_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_id().data(), static_cast<int>(this->_internal_language_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_id(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // string text = 4;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  return target;
}

size_t TextDocumentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string language_id = 2;
  if (this->language_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_id());
  }

  // string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextDocumentItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TextDocumentItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextDocumentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
    MergeFrom(*source);
  }
}

void TextDocumentItem::MergeFrom(const TextDocumentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.language_id().size() > 0) {
    _internal_set_language_id(from._internal_language_id());
  }
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void TextDocumentItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextDocumentItem::CopyFrom(const TextDocumentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextDocumentItem::IsInitialized() const {
  return true;
}

void TextDocumentItem::InternalSwap(TextDocumentItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_id_.Swap(&other->language_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextDocumentItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenDocumentResponse::_Internal {
 public:
};

OpenDocumentResponse::OpenDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
}
OpenDocumentResponse::OpenDocumentResponse(const OpenDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
}

void OpenDocumentResponse::SharedCtor() {
}

OpenDocumentResponse::~OpenDocumentResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpenDocumentResponse::ArenaDtor(void* object) {
  OpenDocumentResponse* _this = reinterpret_cast< OpenDocumentResponse* >(object);
  (void)_this;
}
void OpenDocumentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenDocumentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenDocumentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenDocumentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  return target;
}

size_t OpenDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenDocumentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenDocumentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenDocumentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
    MergeFrom(*source);
  }
}

void OpenDocumentResponse::MergeFrom(const OpenDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OpenDocumentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDocumentResponse::CopyFrom(const OpenDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDocumentResponse::IsInitialized() const {
  return true;
}

void OpenDocumentResponse::InternalSwap(OpenDocumentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenDocumentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseDocumentRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const CloseDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const CloseDocumentRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
CloseDocumentRequest::_Internal::console_id(const CloseDocumentRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
CloseDocumentRequest::_Internal::text_document(const CloseDocumentRequest* msg) {
  return *msg->text_document_;
}
void CloseDocumentRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
CloseDocumentRequest::CloseDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}
CloseDocumentRequest::CloseDocumentRequest(const CloseDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}

void CloseDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_document_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(text_document_));
}

CloseDocumentRequest::~CloseDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete text_document_;
}

void CloseDocumentRequest::ArenaDtor(void* object) {
  CloseDocumentRequest* _this = reinterpret_cast< CloseDocumentRequest* >(object);
  (void)_this;
}
void CloseDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseDocumentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  return target;
}

size_t CloseDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseDocumentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseDocumentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
    MergeFrom(*source);
  }
}

void CloseDocumentRequest::MergeFrom(const CloseDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(from._internal_text_document());
  }
}

void CloseDocumentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDocumentRequest::CopyFrom(const CloseDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDocumentRequest::IsInitialized() const {
  return true;
}

void CloseDocumentRequest::InternalSwap(CloseDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, text_document_)
      + sizeof(CloseDocumentRequest::text_document_)
      - PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseDocumentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseDocumentResponse::_Internal {
 public:
};

CloseDocumentResponse::CloseDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
}
CloseDocumentResponse::CloseDocumentResponse(const CloseDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
}

void CloseDocumentResponse::SharedCtor() {
}

CloseDocumentResponse::~CloseDocumentResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloseDocumentResponse::ArenaDtor(void* object) {
  CloseDocumentResponse* _this = reinterpret_cast< CloseDocumentResponse* >(object);
  (void)_this;
}
void CloseDocumentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseDocumentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseDocumentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseDocumentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  return target;
}

size_t CloseDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseDocumentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseDocumentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseDocumentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
    MergeFrom(*source);
  }
}

void CloseDocumentResponse::MergeFrom(const CloseDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CloseDocumentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDocumentResponse::CopyFrom(const CloseDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDocumentResponse::IsInitialized() const {
  return true;
}

void CloseDocumentResponse::InternalSwap(CloseDocumentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseDocumentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal::range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg) {
  return *msg->range_;
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_range()) {
    range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  range_length_ = from.range_length_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_length_) -
    reinterpret_cast<char*>(&range_)) + sizeof(range_length_));
}

ChangeDocumentRequest_TextDocumentContentChangeEvent::~ChangeDocumentRequest_TextDocumentContentChangeEvent() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::ArenaDtor(void* object) {
  ChangeDocumentRequest_TextDocumentContentChangeEvent* _this = reinterpret_cast< ChangeDocumentRequest_TextDocumentContentChangeEvent* >(object);
  (void)_this;
}
void ChangeDocumentRequest_TextDocumentContentChangeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDocumentRequest_TextDocumentContentChangeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  range_length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 range_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  // int32 range_length = 2;
  if (this->range_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_length(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  return target;
}

size_t ChangeDocumentRequest_TextDocumentContentChangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int32 range_length = 2;
  if (this->range_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeDocumentRequest_TextDocumentContentChangeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeDocumentRequest_TextDocumentContentChangeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
    MergeFrom(*source);
  }
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_range()) {
    _internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(from._internal_range());
  }
  if (from.range_length() != 0) {
    _internal_set_range_length(from._internal_range_length());
  }
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::CopyFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentRequest_TextDocumentContentChangeEvent::IsInitialized() const {
  return true;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::InternalSwap(ChangeDocumentRequest_TextDocumentContentChangeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, range_length_)
      + sizeof(ChangeDocumentRequest_TextDocumentContentChangeEvent::range_length_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentRequest_TextDocumentContentChangeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeDocumentRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const ChangeDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const ChangeDocumentRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
ChangeDocumentRequest::_Internal::console_id(const ChangeDocumentRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
ChangeDocumentRequest::_Internal::text_document(const ChangeDocumentRequest* msg) {
  return *msg->text_document_;
}
void ChangeDocumentRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
ChangeDocumentRequest::ChangeDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}
ChangeDocumentRequest::ChangeDocumentRequest(const ChangeDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_changes_(from.content_changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}

void ChangeDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_document_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(text_document_));
}

ChangeDocumentRequest::~ChangeDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete text_document_;
}

void ChangeDocumentRequest::ArenaDtor(void* object) {
  ChangeDocumentRequest* _this = reinterpret_cast< ChangeDocumentRequest* >(object);
  (void)_this;
}
void ChangeDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_changes_.Clear();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDocumentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text_document(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_content_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  return target;
}

size_t ChangeDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  total_size += 1UL * this->_internal_content_changes_size();
  for (const auto& msg : this->content_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeDocumentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeDocumentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
    MergeFrom(*source);
  }
}

void ChangeDocumentRequest::MergeFrom(const ChangeDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_changes_.MergeFrom(from.content_changes_);
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(from._internal_text_document());
  }
}

void ChangeDocumentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDocumentRequest::CopyFrom(const ChangeDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentRequest::IsInitialized() const {
  return true;
}

void ChangeDocumentRequest::InternalSwap(ChangeDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_changes_.InternalSwap(&other->content_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, text_document_)
      + sizeof(ChangeDocumentRequest::text_document_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DocumentRange::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::Position& start(const DocumentRange* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& end(const DocumentRange* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::Position&
DocumentRange::_Internal::start(const DocumentRange* msg) {
  return *msg->start_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
DocumentRange::_Internal::end(const DocumentRange* msg) {
  return *msg->end_;
}
DocumentRange::DocumentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}
DocumentRange::DocumentRange(const DocumentRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}

void DocumentRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DocumentRange::~DocumentRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DocumentRange::ArenaDtor(void* object) {
  DocumentRange* _this = reinterpret_cast< DocumentRange* >(object);
  (void)_this;
}
void DocumentRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  return target;
}

size_t DocumentRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.DocumentRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.DocumentRange)
    MergeFrom(*source);
  }
}

void DocumentRange::MergeFrom(const DocumentRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(from._internal_end());
  }
}

void DocumentRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentRange::CopyFrom(const DocumentRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentRange::IsInitialized() const {
  return true;
}

void DocumentRange::InternalSwap(DocumentRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentRange, end_)
      + sizeof(DocumentRange::end_)
      - PROTOBUF_FIELD_OFFSET(DocumentRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersionedTextDocumentIdentifier::_Internal {
 public:
};

VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}
VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(const VersionedTextDocumentIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}

void VersionedTextDocumentIdentifier::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0;
}

VersionedTextDocumentIdentifier::~VersionedTextDocumentIdentifier() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionedTextDocumentIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionedTextDocumentIdentifier::ArenaDtor(void* object) {
  VersionedTextDocumentIdentifier* _this = reinterpret_cast< VersionedTextDocumentIdentifier* >(object);
  (void)_this;
}
void VersionedTextDocumentIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionedTextDocumentIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionedTextDocumentIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionedTextDocumentIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionedTextDocumentIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  return target;
}

size_t VersionedTextDocumentIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionedTextDocumentIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionedTextDocumentIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionedTextDocumentIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
    MergeFrom(*source);
  }
}

void VersionedTextDocumentIdentifier::MergeFrom(const VersionedTextDocumentIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void VersionedTextDocumentIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionedTextDocumentIdentifier::CopyFrom(const VersionedTextDocumentIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionedTextDocumentIdentifier::IsInitialized() const {
  return true;
}

void VersionedTextDocumentIdentifier::InternalSwap(VersionedTextDocumentIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionedTextDocumentIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&line_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}

void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&line_)) + sizeof(character_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&line_)) + sizeof(character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  // int32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, character_)
      + sizeof(Position::character_)
      - PROTOBUF_FIELD_OFFSET(Position, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeDocumentResponse::_Internal {
 public:
};

ChangeDocumentResponse::ChangeDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
}
ChangeDocumentResponse::ChangeDocumentResponse(const ChangeDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
}

void ChangeDocumentResponse::SharedCtor() {
}

ChangeDocumentResponse::~ChangeDocumentResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChangeDocumentResponse::ArenaDtor(void* object) {
  ChangeDocumentResponse* _this = reinterpret_cast< ChangeDocumentResponse* >(object);
  (void)_this;
}
void ChangeDocumentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDocumentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDocumentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  return target;
}

size_t ChangeDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeDocumentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeDocumentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeDocumentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
    MergeFrom(*source);
  }
}

void ChangeDocumentResponse::MergeFrom(const ChangeDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChangeDocumentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDocumentResponse::CopyFrom(const ChangeDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentResponse::IsInitialized() const {
  return true;
}

void ChangeDocumentResponse::InternalSwap(ChangeDocumentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCompletionItemsRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& context(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetCompletionItemsRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
GetCompletionItemsRequest::_Internal::console_id(const GetCompletionItemsRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::CompletionContext&
GetCompletionItemsRequest::_Internal::context(const GetCompletionItemsRequest* msg) {
  return *msg->context_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
GetCompletionItemsRequest::_Internal::text_document(const GetCompletionItemsRequest* msg) {
  return *msg->text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
GetCompletionItemsRequest::_Internal::position(const GetCompletionItemsRequest* msg) {
  return *msg->position_;
}
void GetCompletionItemsRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
GetCompletionItemsRequest::GetCompletionItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}
GetCompletionItemsRequest::GetCompletionItemsRequest(const GetCompletionItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_context()) {
    context_ = new ::io::deephaven::proto::backplane::script::grpc::CompletionContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}

void GetCompletionItemsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(position_));
}

GetCompletionItemsRequest::~GetCompletionItemsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompletionItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete text_document_;
  if (this != internal_default_instance()) delete position_;
}

void GetCompletionItemsRequest::ArenaDtor(void* object) {
  GetCompletionItemsRequest* _this = reinterpret_cast< GetCompletionItemsRequest* >(object);
  (void)_this;
}
void GetCompletionItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompletionItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCompletionItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompletionItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompletionItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::context(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text_document(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  return target;
}

size_t GetCompletionItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompletionItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompletionItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompletionItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
    MergeFrom(*source);
  }
}

void GetCompletionItemsRequest::MergeFrom(const GetCompletionItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::io::deephaven::proto::backplane::script::grpc::CompletionContext::MergeFrom(from._internal_context());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(from._internal_text_document());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(from._internal_position());
  }
}

void GetCompletionItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompletionItemsRequest::CopyFrom(const GetCompletionItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletionItemsRequest::IsInitialized() const {
  return true;
}

void GetCompletionItemsRequest::InternalSwap(GetCompletionItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, position_)
      + sizeof(GetCompletionItemsRequest::position_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompletionItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompletionContext::_Internal {
 public:
};

CompletionContext::CompletionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}
CompletionContext::CompletionContext(const CompletionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trigger_character_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trigger_character().empty()) {
    trigger_character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trigger_character(), 
      GetArena());
  }
  trigger_kind_ = from.trigger_kind_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}

void CompletionContext::SharedCtor() {
trigger_character_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trigger_kind_ = 0;
}

CompletionContext::~CompletionContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompletionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trigger_character_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompletionContext::ArenaDtor(void* object) {
  CompletionContext* _this = reinterpret_cast< CompletionContext* >(object);
  (void)_this;
}
void CompletionContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompletionContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompletionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trigger_character_.ClearToEmpty();
  trigger_kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trigger_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trigger_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trigger_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_trigger_character();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompletionContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trigger_kind = 1;
  if (this->trigger_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trigger_kind(), target);
  }

  // string trigger_character = 2;
  if (this->trigger_character().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_character().data(), static_cast<int>(this->_internal_trigger_character().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trigger_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  return target;
}

size_t CompletionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger_character = 2;
  if (this->trigger_character().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_character());
  }

  // int32 trigger_kind = 1;
  if (this->trigger_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trigger_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompletionContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CompletionContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompletionContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CompletionContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CompletionContext)
    MergeFrom(*source);
  }
}

void CompletionContext::MergeFrom(const CompletionContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trigger_character().size() > 0) {
    _internal_set_trigger_character(from._internal_trigger_character());
  }
  if (from.trigger_kind() != 0) {
    _internal_set_trigger_kind(from._internal_trigger_kind());
  }
}

void CompletionContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompletionContext::CopyFrom(const CompletionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionContext::IsInitialized() const {
  return true;
}

void CompletionContext::InternalSwap(CompletionContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trigger_character_.Swap(&other->trigger_character_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(trigger_kind_, other->trigger_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCompletionItemsResponse::_Internal {
 public:
};

GetCompletionItemsResponse::GetCompletionItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}
GetCompletionItemsResponse::GetCompletionItemsResponse(const GetCompletionItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}

void GetCompletionItemsResponse::SharedCtor() {
}

GetCompletionItemsResponse::~GetCompletionItemsResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompletionItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCompletionItemsResponse::ArenaDtor(void* object) {
  GetCompletionItemsResponse* _this = reinterpret_cast< GetCompletionItemsResponse* >(object);
  (void)_this;
}
void GetCompletionItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompletionItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCompletionItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompletionItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompletionItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  return target;
}

size_t GetCompletionItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompletionItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompletionItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompletionItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
    MergeFrom(*source);
  }
}

void GetCompletionItemsResponse::MergeFrom(const GetCompletionItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void GetCompletionItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompletionItemsResponse::CopyFrom(const GetCompletionItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletionItemsResponse::IsInitialized() const {
  return true;
}

void GetCompletionItemsResponse::InternalSwap(GetCompletionItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompletionItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompletionItem::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::TextEdit& text_edit(const CompletionItem* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::TextEdit&
CompletionItem::_Internal::text_edit(const CompletionItem* msg) {
  return *msg->text_edit_;
}
CompletionItem::CompletionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_text_edits_(arena),
  commit_characters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}
CompletionItem::CompletionItem(const CompletionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_text_edits_(from.additional_text_edits_),
      commit_characters_(from.commit_characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArena());
  }
  documentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_documentation().empty()) {
    documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_documentation(), 
      GetArena());
  }
  sort_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sort_text().empty()) {
    sort_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sort_text(), 
      GetArena());
  }
  filter_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_text().empty()) {
    filter_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter_text(), 
      GetArena());
  }
  if (from._internal_has_text_edit()) {
    text_edit_ = new ::io::deephaven::proto::backplane::script::grpc::TextEdit(*from.text_edit_);
  } else {
    text_edit_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&insert_text_format_) -
    reinterpret_cast<char*>(&start_)) + sizeof(insert_text_format_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}

void CompletionItem::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
documentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sort_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filter_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_edit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insert_text_format_) -
    reinterpret_cast<char*>(&text_edit_)) + sizeof(insert_text_format_));
}

CompletionItem::~CompletionItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompletionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  documentation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete text_edit_;
}

void CompletionItem::ArenaDtor(void* object) {
  CompletionItem* _this = reinterpret_cast< CompletionItem* >(object);
  (void)_this;
}
void CompletionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompletionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompletionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_text_edits_.Clear();
  commit_characters_.Clear();
  label_.ClearToEmpty();
  detail_.ClearToEmpty();
  documentation_.ClearToEmpty();
  sort_text_.ClearToEmpty();
  filter_text_.ClearToEmpty();
  if (GetArena() == nullptr && text_edit_ != nullptr) {
    delete text_edit_;
  }
  text_edit_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insert_text_format_) -
      reinterpret_cast<char*>(&start_)) + sizeof(insert_text_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string documentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_documentation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deprecated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool preselect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          preselect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_edit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sort_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sort_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_filter_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 insert_text_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          insert_text_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_text_edits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string commit_characters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commit_characters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompletionItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // int32 kind = 4;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_kind(), target);
  }

  // string detail = 5;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_detail(), target);
  }

  // string documentation = 6;
  if (this->documentation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_documentation().data(), static_cast<int>(this->_internal_documentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_documentation(), target);
  }

  // bool deprecated = 7;
  if (this->deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_deprecated(), target);
  }

  // bool preselect = 8;
  if (this->preselect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_preselect(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (this->has_text_edit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::text_edit(this), target, stream);
  }

  // string sort_text = 10;
  if (this->sort_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort_text().data(), static_cast<int>(this->_internal_sort_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sort_text(), target);
  }

  // string filter_text = 11;
  if (this->filter_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_text().data(), static_cast<int>(this->_internal_filter_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_filter_text(), target);
  }

  // int32 insert_text_format = 12;
  if (this->insert_text_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_insert_text_format(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_text_edits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_additional_text_edits(i), target, stream);
  }

  // repeated string commit_characters = 14;
  for (int i = 0, n = this->_internal_commit_characters_size(); i < n; i++) {
    const auto& s = this->_internal_commit_characters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  return target;
}

size_t CompletionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  total_size += 1UL * this->_internal_additional_text_edits_size();
  for (const auto& msg : this->additional_text_edits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string commit_characters = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(commit_characters_.size());
  for (int i = 0, n = commit_characters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      commit_characters_.Get(i));
  }

  // string label = 3;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string detail = 5;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // string documentation = 6;
  if (this->documentation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_documentation());
  }

  // string sort_text = 10;
  if (this->sort_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort_text());
  }

  // string filter_text = 11;
  if (this->filter_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (this->has_text_edit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_edit_);
  }

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // int32 kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  // bool deprecated = 7;
  if (this->deprecated() != 0) {
    total_size += 1 + 1;
  }

  // bool preselect = 8;
  if (this->preselect() != 0) {
    total_size += 1 + 1;
  }

  // int32 insert_text_format = 12;
  if (this->insert_text_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_insert_text_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompletionItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CompletionItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompletionItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CompletionItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CompletionItem)
    MergeFrom(*source);
  }
}

void CompletionItem::MergeFrom(const CompletionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_text_edits_.MergeFrom(from.additional_text_edits_);
  commit_characters_.MergeFrom(from.commit_characters_);
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.detail().size() > 0) {
    _internal_set_detail(from._internal_detail());
  }
  if (from.documentation().size() > 0) {
    _internal_set_documentation(from._internal_documentation());
  }
  if (from.sort_text().size() > 0) {
    _internal_set_sort_text(from._internal_sort_text());
  }
  if (from.filter_text().size() > 0) {
    _internal_set_filter_text(from._internal_filter_text());
  }
  if (from.has_text_edit()) {
    _internal_mutable_text_edit()->::io::deephaven::proto::backplane::script::grpc::TextEdit::MergeFrom(from._internal_text_edit());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.deprecated() != 0) {
    _internal_set_deprecated(from._internal_deprecated());
  }
  if (from.preselect() != 0) {
    _internal_set_preselect(from._internal_preselect());
  }
  if (from.insert_text_format() != 0) {
    _internal_set_insert_text_format(from._internal_insert_text_format());
  }
}

void CompletionItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompletionItem::CopyFrom(const CompletionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionItem::IsInitialized() const {
  return true;
}

void CompletionItem::InternalSwap(CompletionItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additional_text_edits_.InternalSwap(&other->additional_text_edits_);
  commit_characters_.InternalSwap(&other->commit_characters_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  documentation_.Swap(&other->documentation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sort_text_.Swap(&other->sort_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_text_.Swap(&other->filter_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionItem, insert_text_format_)
      + sizeof(CompletionItem::insert_text_format_)
      - PROTOBUF_FIELD_OFFSET(CompletionItem, text_edit_)>(
          reinterpret_cast<char*>(&text_edit_),
          reinterpret_cast<char*>(&other->text_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextEdit::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const TextEdit* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
TextEdit::_Internal::range(const TextEdit* msg) {
  return *msg->range_;
}
TextEdit::TextEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}
TextEdit::TextEdit(const TextEdit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_range()) {
    range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}

void TextEdit::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
range_ = nullptr;
}

TextEdit::~TextEdit() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextEdit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void TextEdit::ArenaDtor(void* object) {
  TextEdit* _this = reinterpret_cast< TextEdit* >(object);
  (void)_this;
}
void TextEdit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEdit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextEdit.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextEdit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextEdit.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextEdit)
  return target;
}

size_t TextEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextEdit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const TextEdit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.TextEdit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.TextEdit)
    MergeFrom(*source);
  }
}

void TextEdit::MergeFrom(const TextEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_range()) {
    _internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(from._internal_range());
  }
}

void TextEdit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextEdit::CopyFrom(const TextEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEdit::IsInitialized() const {
  return true;
}

void TextEdit::InternalSwap(TextEdit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEdit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const FetchTableRequest* msg);
  static const ::arrow::flight::protocol::Wicket& table_id(const FetchTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
FetchTableRequest::_Internal::console_id(const FetchTableRequest* msg) {
  return *msg->console_id_;
}
const ::arrow::flight::protocol::Wicket&
FetchTableRequest::_Internal::table_id(const FetchTableRequest* msg) {
  return *msg->table_id_;
}
void FetchTableRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
void FetchTableRequest::clear_table_id() {
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
}
FetchTableRequest::FetchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
}
FetchTableRequest::FetchTableRequest(const FetchTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArena());
  }
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::arrow::flight::protocol::Wicket(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
}

void FetchTableRequest::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(table_id_));
}

FetchTableRequest::~FetchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete table_id_;
}

void FetchTableRequest::ArenaDtor(void* object) {
  FetchTableRequest* _this = reinterpret_cast< FetchTableRequest* >(object);
  (void)_this;
}
void FetchTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrow.flight.protocol.Wicket table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .arrow.flight.protocol.Wicket table_id = 2;
  if (this->has_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_id(this), target, stream);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  return target;
}

size_t FetchTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .arrow.flight.protocol.Wicket table_id = 2;
  if (this->has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
    MergeFrom(*source);
  }
}

void FetchTableRequest::MergeFrom(const FetchTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_table_id()) {
    _internal_mutable_table_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_table_id());
  }
}

void FetchTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchTableRequest::CopyFrom(const FetchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchTableRequest::IsInitialized() const {
  return true;
}

void FetchTableRequest::InternalSwap(FetchTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchTableRequest, table_id_)
      + sizeof(FetchTableRequest::table_id_)
      - PROTOBUF_FIELD_OFFSET(FetchTableRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchPandasTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const FetchPandasTableRequest* msg);
  static const ::arrow::flight::protocol::Wicket& table_id(const FetchPandasTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
FetchPandasTableRequest::_Internal::console_id(const FetchPandasTableRequest* msg) {
  return *msg->console_id_;
}
const ::arrow::flight::protocol::Wicket&
FetchPandasTableRequest::_Internal::table_id(const FetchPandasTableRequest* msg) {
  return *msg->table_id_;
}
void FetchPandasTableRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
void FetchPandasTableRequest::clear_table_id() {
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
}
FetchPandasTableRequest::FetchPandasTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
}
FetchPandasTableRequest::FetchPandasTableRequest(const FetchPandasTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::arrow::flight::protocol::Wicket(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
}

void FetchPandasTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(table_id_));
}

FetchPandasTableRequest::~FetchPandasTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchPandasTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete table_id_;
}

void FetchPandasTableRequest::ArenaDtor(void* object) {
  FetchPandasTableRequest* _this = reinterpret_cast< FetchPandasTableRequest* >(object);
  (void)_this;
}
void FetchPandasTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchPandasTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchPandasTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchPandasTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrow.flight.protocol.Wicket table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchPandasTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .arrow.flight.protocol.Wicket table_id = 2;
  if (this->has_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  return target;
}

size_t FetchPandasTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .arrow.flight.protocol.Wicket table_id = 2;
  if (this->has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchPandasTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchPandasTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchPandasTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
    MergeFrom(*source);
  }
}

void FetchPandasTableRequest::MergeFrom(const FetchPandasTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
  if (from.has_table_id()) {
    _internal_mutable_table_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_table_id());
  }
}

void FetchPandasTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchPandasTableRequest::CopyFrom(const FetchPandasTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchPandasTableRequest::IsInitialized() const {
  return true;
}

void FetchPandasTableRequest::InternalSwap(FetchPandasTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchPandasTableRequest, table_id_)
      + sizeof(FetchPandasTableRequest::table_id_)
      - PROTOBUF_FIELD_OFFSET(FetchPandasTableRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchPandasTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchFigureRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const FetchFigureRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
FetchFigureRequest::_Internal::console_id(const FetchFigureRequest* msg) {
  return *msg->console_id_;
}
void FetchFigureRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
FetchFigureRequest::FetchFigureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
}
FetchFigureRequest::FetchFigureRequest(const FetchFigureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
}

void FetchFigureRequest::SharedCtor() {
console_id_ = nullptr;
}

FetchFigureRequest::~FetchFigureRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchFigureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
}

void FetchFigureRequest::ArenaDtor(void* object) {
  FetchFigureRequest* _this = reinterpret_cast< FetchFigureRequest* >(object);
  (void)_this;
}
void FetchFigureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchFigureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchFigureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchFigureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchFigureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  return target;
}

size_t FetchFigureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchFigureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchFigureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchFigureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
    MergeFrom(*source);
  }
}

void FetchFigureRequest::MergeFrom(const FetchFigureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
}

void FetchFigureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchFigureRequest::CopyFrom(const FetchFigureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchFigureRequest::IsInitialized() const {
  return true;
}

void FetchFigureRequest::InternalSwap(FetchFigureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(console_id_, other->console_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchFigureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchFigureResponse::_Internal {
 public:
};

FetchFigureResponse::FetchFigureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
}
FetchFigureResponse::FetchFigureResponse(const FetchFigureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
}

void FetchFigureResponse::SharedCtor() {
}

FetchFigureResponse::~FetchFigureResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchFigureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchFigureResponse::ArenaDtor(void* object) {
  FetchFigureResponse* _this = reinterpret_cast< FetchFigureResponse* >(object);
  (void)_this;
}
void FetchFigureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchFigureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchFigureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchFigureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchFigureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  return target;
}

size_t FetchFigureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchFigureResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchFigureResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchFigureResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
    MergeFrom(*source);
  }
}

void FetchFigureResponse::MergeFrom(const FetchFigureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchFigureResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchFigureResponse::CopyFrom(const FetchFigureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchFigureResponse::IsInitialized() const {
  return true;
}

void FetchFigureResponse::InternalSwap(FetchFigureResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchFigureResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchTableMapRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& console_id(const FetchTableMapRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
FetchTableMapRequest::_Internal::console_id(const FetchTableMapRequest* msg) {
  return *msg->console_id_;
}
void FetchTableMapRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
FetchTableMapRequest::FetchTableMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
}
FetchTableMapRequest::FetchTableMapRequest(const FetchTableMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::arrow::flight::protocol::Wicket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
}

void FetchTableMapRequest::SharedCtor() {
console_id_ = nullptr;
}

FetchTableMapRequest::~FetchTableMapRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchTableMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
}

void FetchTableMapRequest::ArenaDtor(void* object) {
  FetchTableMapRequest* _this = reinterpret_cast< FetchTableMapRequest* >(object);
  (void)_this;
}
void FetchTableMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchTableMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchTableMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchTableMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchTableMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  return target;
}

size_t FetchTableMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchTableMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchTableMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchTableMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
    MergeFrom(*source);
  }
}

void FetchTableMapRequest::MergeFrom(const FetchTableMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_console_id());
  }
}

void FetchTableMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchTableMapRequest::CopyFrom(const FetchTableMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchTableMapRequest::IsInitialized() const {
  return true;
}

void FetchTableMapRequest::InternalSwap(FetchTableMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(console_id_, other->console_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchTableMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchTableMapResponse::_Internal {
 public:
};

FetchTableMapResponse::FetchTableMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
}
FetchTableMapResponse::FetchTableMapResponse(const FetchTableMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
}

void FetchTableMapResponse::SharedCtor() {
}

FetchTableMapResponse::~FetchTableMapResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchTableMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchTableMapResponse::ArenaDtor(void* object) {
  FetchTableMapResponse* _this = reinterpret_cast< FetchTableMapResponse* >(object);
  (void)_this;
}
void FetchTableMapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchTableMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchTableMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchTableMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchTableMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  return target;
}

size_t FetchTableMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchTableMapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchTableMapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchTableMapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
    MergeFrom(*source);
  }
}

void FetchTableMapResponse::MergeFrom(const FetchTableMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchTableMapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchTableMapResponse::CopyFrom(const FetchTableMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchTableMapResponse::IsInitialized() const {
  return true;
}

void FetchTableMapResponse::InternalSwap(FetchTableMapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchTableMapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::DocumentRange* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::DocumentRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::DocumentRange >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::Position* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CompletionContext* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CompletionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CompletionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CompletionItem* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::TextEdit* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::TextEdit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::TextEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
