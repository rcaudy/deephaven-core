// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: barrage.proto

#include "barrage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
constexpr BarrageData::BarrageData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BarrageDataDefaultTypeInternal {
  constexpr BarrageDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BarrageDataDefaultTypeInternal() {}
  union {
    BarrageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BarrageDataDefaultTypeInternal _BarrageData_default_instance_;
constexpr SubscriptionRequest::SubscriptionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , viewport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ticket_(nullptr)
  , export_id_(nullptr)
  , use_deephaven_nulls_(false)
  , update_interval_ms_(PROTOBUF_LONGLONG(0))
  , sequence_(PROTOBUF_LONGLONG(0)){}
struct SubscriptionRequestDefaultTypeInternal {
  constexpr SubscriptionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionRequestDefaultTypeInternal() {}
  union {
    SubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
constexpr OutOfBandSubscriptionResponse::OutOfBandSubscriptionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_found_(false){}
struct OutOfBandSubscriptionResponseDefaultTypeInternal {
  constexpr OutOfBandSubscriptionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutOfBandSubscriptionResponseDefaultTypeInternal() {}
  union {
    OutOfBandSubscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutOfBandSubscriptionResponseDefaultTypeInternal _OutOfBandSubscriptionResponse_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_barrage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_barrage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_barrage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_barrage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BarrageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BarrageData, data_header_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BarrageData, app_metadata_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BarrageData, data_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ticket_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, viewport_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, update_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, export_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, sequence_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SubscriptionRequest, use_deephaven_nulls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse, subscription_found_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::deephaven::proto::backplane::grpc::BarrageData)},
  { 8, -1, sizeof(::io::deephaven::proto::backplane::grpc::SubscriptionRequest)},
  { 20, -1, sizeof(::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_BarrageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_OutOfBandSubscriptionResponse_default_instance_),
};

const char descriptor_table_protodef_barrage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rbarrage.proto\022!io.deephaven.proto.back"
  "plane.grpc\032\014flight.proto\"L\n\013BarrageData\022"
  "\023\n\013data_header\030\002 \001(\014\022\024\n\014app_metadata\030\003 \001"
  "(\014\022\022\n\tdata_body\030\350\007 \001(\014\"\354\001\n\023SubscriptionR"
  "equest\022-\n\006ticket\030\001 \001(\0132\035.arrow.flight.pr"
  "otocol.Wicket\022\017\n\007columns\030\002 \001(\014\022\020\n\010viewpo"
  "rt\030\003 \001(\014\022\036\n\022update_interval_ms\030\024 \001(\022B\0020\001"
  "\0220\n\texport_id\030\025 \001(\0132\035.arrow.flight.proto"
  "col.Wicket\022\024\n\010sequence\030\026 \001(\022B\0020\001\022\033\n\023use_"
  "deephaven_nulls\030\027 \001(\010\";\n\035OutOfBandSubscr"
  "iptionResponse\022\032\n\022subscription_found\030\001 \001"
  "(\0102\254\003\n\016BarrageService\022{\n\013DoSubscribe\0226.i"
  "o.deephaven.proto.backplane.grpc.Subscri"
  "ptionRequest\032..io.deephaven.proto.backpl"
  "ane.grpc.BarrageData\"\000(\0010\001\022\207\001\n\031DoSubscri"
  "beNoClientStream\0226.io.deephaven.proto.ba"
  "ckplane.grpc.SubscriptionRequest\032..io.de"
  "ephaven.proto.backplane.grpc.BarrageData"
  "\"\0000\001\022\222\001\n\024DoUpdateSubscription\0226.io.deeph"
  "aven.proto.backplane.grpc.SubscriptionRe"
  "quest\032@.io.deephaven.proto.backplane.grp"
  "c.OutOfBandSubscriptionResponse\"\000B\004H\001P\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_barrage_2eproto_deps[1] = {
  &::descriptor_table_flight_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_barrage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_barrage_2eproto = {
  false, false, 887, descriptor_table_protodef_barrage_2eproto, "barrage.proto", 
  &descriptor_table_barrage_2eproto_once, descriptor_table_barrage_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_barrage_2eproto::offsets,
  file_level_metadata_barrage_2eproto, file_level_enum_descriptors_barrage_2eproto, file_level_service_descriptors_barrage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_barrage_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_barrage_2eproto);
  return descriptor_table_barrage_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_barrage_2eproto(&descriptor_table_barrage_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class BarrageData::_Internal {
 public:
};

BarrageData::BarrageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BarrageData)
}
BarrageData::BarrageData(const BarrageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_header().empty()) {
    data_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_header(), 
      GetArena());
  }
  app_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_metadata().empty()) {
    app_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_metadata(), 
      GetArena());
  }
  data_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_body().empty()) {
    data_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_body(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BarrageData)
}

void BarrageData::SharedCtor() {
data_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BarrageData::~BarrageData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BarrageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BarrageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BarrageData::ArenaDtor(void* object) {
  BarrageData* _this = reinterpret_cast< BarrageData* >(object);
  (void)_this;
}
void BarrageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarrageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BarrageData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BarrageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_header_.ClearToEmpty();
  app_metadata_.ClearToEmpty();
  data_body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarrageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes app_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_body = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_data_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarrageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BarrageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_header = 2;
  if (this->data_header().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_header(), target);
  }

  // bytes app_metadata = 3;
  if (this->app_metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_app_metadata(), target);
  }

  // bytes data_body = 1000;
  if (this->data_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1000, this->_internal_data_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BarrageData)
  return target;
}

size_t BarrageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BarrageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_header = 2;
  if (this->data_header().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_header());
  }

  // bytes app_metadata = 3;
  if (this->app_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_metadata());
  }

  // bytes data_body = 1000;
  if (this->data_body().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_body());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.BarrageData)
  GOOGLE_DCHECK_NE(&from, this);
  const BarrageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarrageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.BarrageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.BarrageData)
    MergeFrom(*source);
  }
}

void BarrageData::MergeFrom(const BarrageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BarrageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_header().size() > 0) {
    _internal_set_data_header(from._internal_data_header());
  }
  if (from.app_metadata().size() > 0) {
    _internal_set_app_metadata(from._internal_app_metadata());
  }
  if (from.data_body().size() > 0) {
    _internal_set_data_body(from._internal_data_body());
  }
}

void BarrageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.BarrageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrageData::CopyFrom(const BarrageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BarrageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrageData::IsInitialized() const {
  return true;
}

void BarrageData::InternalSwap(BarrageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_header_.Swap(&other->data_header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_metadata_.Swap(&other->app_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_body_.Swap(&other->data_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscriptionRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& ticket(const SubscriptionRequest* msg);
  static const ::arrow::flight::protocol::Wicket& export_id(const SubscriptionRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
SubscriptionRequest::_Internal::ticket(const SubscriptionRequest* msg) {
  return *msg->ticket_;
}
const ::arrow::flight::protocol::Wicket&
SubscriptionRequest::_Internal::export_id(const SubscriptionRequest* msg) {
  return *msg->export_id_;
}
void SubscriptionRequest::clear_ticket() {
  if (GetArena() == nullptr && ticket_ != nullptr) {
    delete ticket_;
  }
  ticket_ = nullptr;
}
void SubscriptionRequest::clear_export_id() {
  if (GetArena() == nullptr && export_id_ != nullptr) {
    delete export_id_;
  }
  export_id_ = nullptr;
}
SubscriptionRequest::SubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
}
SubscriptionRequest::SubscriptionRequest(const SubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  columns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_columns().empty()) {
    columns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_columns(), 
      GetArena());
  }
  viewport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_viewport().empty()) {
    viewport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_viewport(), 
      GetArena());
  }
  if (from._internal_has_ticket()) {
    ticket_ = new ::arrow::flight::protocol::Wicket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  if (from._internal_has_export_id()) {
    export_id_ = new ::arrow::flight::protocol::Wicket(*from.export_id_);
  } else {
    export_id_ = nullptr;
  }
  ::memcpy(&use_deephaven_nulls_, &from.use_deephaven_nulls_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&use_deephaven_nulls_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
}

void SubscriptionRequest::SharedCtor() {
columns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
viewport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ticket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&ticket_)) + sizeof(sequence_));
}

SubscriptionRequest::~SubscriptionRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  columns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  viewport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ticket_;
  if (this != internal_default_instance()) delete export_id_;
}

void SubscriptionRequest::ArenaDtor(void* object) {
  SubscriptionRequest* _this = reinterpret_cast< SubscriptionRequest* >(object);
  (void)_this;
}
void SubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.ClearToEmpty();
  viewport_.ClearToEmpty();
  if (GetArena() == nullptr && ticket_ != nullptr) {
    delete ticket_;
  }
  ticket_ = nullptr;
  if (GetArena() == nullptr && export_id_ != nullptr) {
    delete export_id_;
  }
  export_id_ = nullptr;
  ::memset(&use_deephaven_nulls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&use_deephaven_nulls_)) + sizeof(sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_columns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes viewport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_viewport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 update_interval_ms = 20 [jstype = JS_STRING];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          update_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrow.flight.protocol.Wicket export_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 sequence = 22 [jstype = JS_STRING];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_deephaven_nulls = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          use_deephaven_nulls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket ticket = 1;
  if (this->has_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  // bytes columns = 2;
  if (this->columns().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_columns(), target);
  }

  // bytes viewport = 3;
  if (this->viewport().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_viewport(), target);
  }

  // sint64 update_interval_ms = 20 [jstype = JS_STRING];
  if (this->update_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(20, this->_internal_update_interval_ms(), target);
  }

  // .arrow.flight.protocol.Wicket export_id = 21;
  if (this->has_export_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::export_id(this), target, stream);
  }

  // sint64 sequence = 22 [jstype = JS_STRING];
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(22, this->_internal_sequence(), target);
  }

  // bool use_deephaven_nulls = 23;
  if (this->use_deephaven_nulls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_use_deephaven_nulls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  return target;
}

size_t SubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes columns = 2;
  if (this->columns().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_columns());
  }

  // bytes viewport = 3;
  if (this->viewport().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_viewport());
  }

  // .arrow.flight.protocol.Wicket ticket = 1;
  if (this->has_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  // .arrow.flight.protocol.Wicket export_id = 21;
  if (this->has_export_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *export_id_);
  }

  // bool use_deephaven_nulls = 23;
  if (this->use_deephaven_nulls() != 0) {
    total_size += 2 + 1;
  }

  // sint64 update_interval_ms = 20 [jstype = JS_STRING];
  if (this->update_interval_ms() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_update_interval_ms());
  }

  // sint64 sequence = 22 [jstype = JS_STRING];
  if (this->sequence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
    MergeFrom(*source);
  }
}

void SubscriptionRequest::MergeFrom(const SubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.columns().size() > 0) {
    _internal_set_columns(from._internal_columns());
  }
  if (from.viewport().size() > 0) {
    _internal_set_viewport(from._internal_viewport());
  }
  if (from.has_ticket()) {
    _internal_mutable_ticket()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_ticket());
  }
  if (from.has_export_id()) {
    _internal_mutable_export_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_export_id());
  }
  if (from.use_deephaven_nulls() != 0) {
    _internal_set_use_deephaven_nulls(from._internal_use_deephaven_nulls());
  }
  if (from.update_interval_ms() != 0) {
    _internal_set_update_interval_ms(from._internal_update_interval_ms());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void SubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRequest::CopyFrom(const SubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequest::IsInitialized() const {
  return true;
}

void SubscriptionRequest::InternalSwap(SubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  columns_.Swap(&other->columns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  viewport_.Swap(&other->viewport_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionRequest, sequence_)
      + sizeof(SubscriptionRequest::sequence_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionRequest, ticket_)>(
          reinterpret_cast<char*>(&ticket_),
          reinterpret_cast<char*>(&other->ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OutOfBandSubscriptionResponse::_Internal {
 public:
};

OutOfBandSubscriptionResponse::OutOfBandSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
}
OutOfBandSubscriptionResponse::OutOfBandSubscriptionResponse(const OutOfBandSubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscription_found_ = from.subscription_found_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
}

void OutOfBandSubscriptionResponse::SharedCtor() {
subscription_found_ = false;
}

OutOfBandSubscriptionResponse::~OutOfBandSubscriptionResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutOfBandSubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OutOfBandSubscriptionResponse::ArenaDtor(void* object) {
  OutOfBandSubscriptionResponse* _this = reinterpret_cast< OutOfBandSubscriptionResponse* >(object);
  (void)_this;
}
void OutOfBandSubscriptionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutOfBandSubscriptionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutOfBandSubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_found_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutOfBandSubscriptionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool subscription_found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subscription_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutOfBandSubscriptionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool subscription_found = 1;
  if (this->subscription_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_subscription_found(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  return target;
}

size_t OutOfBandSubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool subscription_found = 1;
  if (this->subscription_found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutOfBandSubscriptionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OutOfBandSubscriptionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutOfBandSubscriptionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
    MergeFrom(*source);
  }
}

void OutOfBandSubscriptionResponse::MergeFrom(const OutOfBandSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription_found() != 0) {
    _internal_set_subscription_found(from._internal_subscription_found());
  }
}

void OutOfBandSubscriptionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutOfBandSubscriptionResponse::CopyFrom(const OutOfBandSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutOfBandSubscriptionResponse::IsInitialized() const {
  return true;
}

void OutOfBandSubscriptionResponse::InternalSwap(OutOfBandSubscriptionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(subscription_found_, other->subscription_found_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutOfBandSubscriptionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BarrageData* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BarrageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BarrageData >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
