// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: console.proto

#include "console.pb.h"
#include "console.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {

static const char* ConsoleService_method_names[] = {
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/StartConsole",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/GetConsoleTypes",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/SubscribeToLogs",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/ExecuteCommand",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/CancelCommand",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/BindTableToVariable",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/OpenDocument",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/ChangeDocument",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/GetCompletionItems",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/CloseDocument",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/FetchTable",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/FetchPandasTable",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/FetchFigure",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/FetchTableMap",
};

std::unique_ptr< ConsoleService::Stub> ConsoleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConsoleService::Stub> stub(new ConsoleService::Stub(channel, options));
  return stub;
}

ConsoleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartConsole_(ConsoleService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConsoleTypes_(ConsoleService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToLogs_(ConsoleService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ExecuteCommand_(ConsoleService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelCommand_(ConsoleService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindTableToVariable_(ConsoleService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenDocument_(ConsoleService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeDocument_(ConsoleService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCompletionItems_(ConsoleService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseDocument_(ConsoleService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchTable_(ConsoleService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchPandasTable_(ConsoleService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchFigure_(ConsoleService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchTableMap_(ConsoleService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConsoleService::Stub::StartConsole(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest& request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartConsole_, context, request, response);
}

void ConsoleService::Stub::experimental_async::StartConsole(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartConsole_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::StartConsole(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartConsole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse>* ConsoleService::Stub::PrepareAsyncStartConsoleRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartConsole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse>* ConsoleService::Stub::AsyncStartConsoleRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartConsoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::GetConsoleTypes(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest& request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConsoleTypes_, context, request, response);
}

void ConsoleService::Stub::experimental_async::GetConsoleTypes(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConsoleTypes_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::GetConsoleTypes(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConsoleTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse>* ConsoleService::Stub::PrepareAsyncGetConsoleTypesRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConsoleTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse>* ConsoleService::Stub::AsyncGetConsoleTypesRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConsoleTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* ConsoleService::Stub::SubscribeToLogsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(channel_.get(), rpcmethod_SubscribeToLogs_, context, request);
}

void ConsoleService::Stub::experimental_async::SubscribeToLogs(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* request, ::grpc::experimental::ClientReadReactor< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToLogs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* ConsoleService::Stub::AsyncSubscribeToLogsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(channel_.get(), cq, rpcmethod_SubscribeToLogs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* ConsoleService::Stub::PrepareAsyncSubscribeToLogsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(channel_.get(), cq, rpcmethod_SubscribeToLogs_, context, request, false, nullptr);
}

::grpc::Status ConsoleService::Stub::ExecuteCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest& request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteCommand_, context, request, response);
}

void ConsoleService::Stub::experimental_async::ExecuteCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteCommand_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::ExecuteCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse>* ConsoleService::Stub::PrepareAsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse>* ConsoleService::Stub::AsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::CancelCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest& request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelCommand_, context, request, response);
}

void ConsoleService::Stub::experimental_async::CancelCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelCommand_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::CancelCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse>* ConsoleService::Stub::PrepareAsyncCancelCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse>* ConsoleService::Stub::AsyncCancelCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::BindTableToVariable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest& request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindTableToVariable_, context, request, response);
}

void ConsoleService::Stub::experimental_async::BindTableToVariable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindTableToVariable_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::BindTableToVariable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindTableToVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse>* ConsoleService::Stub::PrepareAsyncBindTableToVariableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindTableToVariable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse>* ConsoleService::Stub::AsyncBindTableToVariableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindTableToVariableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::OpenDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& request, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OpenDocument_, context, request, response);
}

void ConsoleService::Stub::experimental_async::OpenDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenDocument_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::OpenDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse>* ConsoleService::Stub::PrepareAsyncOpenDocumentRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OpenDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse>* ConsoleService::Stub::AsyncOpenDocumentRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::ChangeDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& request, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeDocument_, context, request, response);
}

void ConsoleService::Stub::experimental_async::ChangeDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeDocument_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::ChangeDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse>* ConsoleService::Stub::PrepareAsyncChangeDocumentRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse>* ConsoleService::Stub::AsyncChangeDocumentRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::GetCompletionItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& request, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCompletionItems_, context, request, response);
}

void ConsoleService::Stub::experimental_async::GetCompletionItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCompletionItems_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::GetCompletionItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCompletionItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse>* ConsoleService::Stub::PrepareAsyncGetCompletionItemsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCompletionItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse>* ConsoleService::Stub::AsyncGetCompletionItemsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCompletionItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::CloseDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& request, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseDocument_, context, request, response);
}

void ConsoleService::Stub::experimental_async::CloseDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseDocument_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::CloseDocument(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse>* ConsoleService::Stub::PrepareAsyncCloseDocumentRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse>* ConsoleService::Stub::AsyncCloseDocumentRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::FetchTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchTable_, context, request, response);
}

void ConsoleService::Stub::experimental_async::FetchTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchTable_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::FetchTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* ConsoleService::Stub::PrepareAsyncFetchTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* ConsoleService::Stub::AsyncFetchTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::FetchPandasTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchPandasTable_, context, request, response);
}

void ConsoleService::Stub::experimental_async::FetchPandasTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchPandasTable_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::FetchPandasTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchPandasTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* ConsoleService::Stub::PrepareAsyncFetchPandasTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchPandasTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* ConsoleService::Stub::AsyncFetchPandasTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchPandasTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::FetchFigure(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest& request, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchFigure_, context, request, response);
}

void ConsoleService::Stub::experimental_async::FetchFigure(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* request, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchFigure_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::FetchFigure(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* request, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchFigure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse>* ConsoleService::Stub::PrepareAsyncFetchFigureRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchFigure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse>* ConsoleService::Stub::AsyncFetchFigureRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchFigureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::FetchTableMap(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest& request, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchTableMap_, context, request, response);
}

void ConsoleService::Stub::experimental_async::FetchTableMap(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest* request, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchTableMap_, context, request, response, std::move(f));
}

void ConsoleService::Stub::experimental_async::FetchTableMap(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest* request, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchTableMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse>* ConsoleService::Stub::PrepareAsyncFetchTableMapRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchTableMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse>* ConsoleService::Stub::AsyncFetchTableMapRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchTableMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConsoleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* resp) {
               return service->StartConsole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* resp) {
               return service->GetConsoleTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* req,
             ::grpc::ServerWriter<::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* writer) {
               return service->SubscribeToLogs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* resp) {
               return service->ExecuteCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* resp) {
               return service->CancelCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* resp) {
               return service->BindTableToVariable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* resp) {
               return service->OpenDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* resp) {
               return service->ChangeDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* resp) {
               return service->GetCompletionItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* resp) {
               return service->CloseDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest* req,
             ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* resp) {
               return service->FetchTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest* req,
             ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* resp) {
               return service->FetchPandasTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* resp) {
               return service->FetchFigure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* resp) {
               return service->FetchTableMap(ctx, req, resp);
             }, this)));
}

ConsoleService::Service::~Service() {
}

::grpc::Status ConsoleService::Service::StartConsole(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::GetConsoleTypes(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::SubscribeToLogs(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::ExecuteCommand(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::CancelCommand(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::BindTableToVariable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::OpenDocument(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::ChangeDocument(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::GetCompletionItems(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::CloseDocument(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* request, ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::FetchTable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::FetchPandasTable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::FetchFigure(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* request, ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::FetchTableMap(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest* request, ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace script
}  // namespace grpc

