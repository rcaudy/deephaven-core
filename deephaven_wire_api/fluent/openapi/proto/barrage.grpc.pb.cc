// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: barrage.proto

#include "barrage.pb.h"
#include "barrage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

static const char* BarrageService_method_names[] = {
  "/io.deephaven.proto.backplane.grpc.BarrageService/DoSubscribe",
  "/io.deephaven.proto.backplane.grpc.BarrageService/DoSubscribeNoClientStream",
  "/io.deephaven.proto.backplane.grpc.BarrageService/DoUpdateSubscription",
};

std::unique_ptr< BarrageService::Stub> BarrageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BarrageService::Stub> stub(new BarrageService::Stub(channel, options));
  return stub;
}

BarrageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DoSubscribe_(BarrageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DoSubscribeNoClientStream_(BarrageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DoUpdateSubscription_(BarrageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* BarrageService::Stub::DoSubscribeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(channel_.get(), rpcmethod_DoSubscribe_, context);
}

void BarrageService::Stub::experimental_async::DoSubscribe(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>::Create(stub_->channel_.get(), stub_->rpcmethod_DoSubscribe_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* BarrageService::Stub::AsyncDoSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(channel_.get(), cq, rpcmethod_DoSubscribe_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* BarrageService::Stub::PrepareAsyncDoSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(channel_.get(), cq, rpcmethod_DoSubscribe_, context, false, nullptr);
}

::grpc::ClientReader< ::io::deephaven::proto::backplane::grpc::BarrageData>* BarrageService::Stub::DoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(channel_.get(), rpcmethod_DoSubscribeNoClientStream_, context, request);
}

void BarrageService::Stub::experimental_async::DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::experimental::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(stub_->channel_.get(), stub_->rpcmethod_DoSubscribeNoClientStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>* BarrageService::Stub::AsyncDoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(channel_.get(), cq, rpcmethod_DoSubscribeNoClientStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>* BarrageService::Stub::PrepareAsyncDoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::grpc::BarrageData>::Create(channel_.get(), cq, rpcmethod_DoSubscribeNoClientStream_, context, request, false, nullptr);
}

::grpc::Status BarrageService::Stub::DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoUpdateSubscription_, context, request, response);
}

void BarrageService::Stub::experimental_async::DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoUpdateSubscription_, context, request, response, std::move(f));
}

void BarrageService::Stub::experimental_async::DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoUpdateSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* BarrageService::Stub::PrepareAsyncDoUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoUpdateSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* BarrageService::Stub::AsyncDoUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoUpdateSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

BarrageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BarrageService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BarrageService::Service, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>(
          [](BarrageService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::io::deephaven::proto::backplane::grpc::BarrageData,
             ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* stream) {
               return service->DoSubscribe(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BarrageService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BarrageService::Service, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>(
          [](BarrageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* req,
             ::grpc::ServerWriter<::io::deephaven::proto::backplane::grpc::BarrageData>* writer) {
               return service->DoSubscribeNoClientStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BarrageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BarrageService::Service, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BarrageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* req,
             ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* resp) {
               return service->DoUpdateSubscription(ctx, req, resp);
             }, this)));
}

BarrageService::Service::~Service() {
}

::grpc::Status BarrageService::Service::DoSubscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BarrageService::Service::DoSubscribeNoClientStream(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BarrageService::Service::DoUpdateSubscription(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace grpc

