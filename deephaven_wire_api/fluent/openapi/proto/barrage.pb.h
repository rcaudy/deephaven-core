// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: barrage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_barrage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_barrage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flight.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_barrage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_barrage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_barrage_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_barrage_2eproto_metadata_getter(int index);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class BarrageData;
struct BarrageDataDefaultTypeInternal;
extern BarrageDataDefaultTypeInternal _BarrageData_default_instance_;
class OutOfBandSubscriptionResponse;
struct OutOfBandSubscriptionResponseDefaultTypeInternal;
extern OutOfBandSubscriptionResponseDefaultTypeInternal _OutOfBandSubscriptionResponse_default_instance_;
class SubscriptionRequest;
struct SubscriptionRequestDefaultTypeInternal;
extern SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::BarrageData* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::BarrageData>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::SubscriptionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class BarrageData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.BarrageData) */ {
 public:
  inline BarrageData() : BarrageData(nullptr) {}
  virtual ~BarrageData();
  explicit constexpr BarrageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BarrageData(const BarrageData& from);
  BarrageData(BarrageData&& from) noexcept
    : BarrageData() {
    *this = ::std::move(from);
  }

  inline BarrageData& operator=(const BarrageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarrageData& operator=(BarrageData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BarrageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarrageData* internal_default_instance() {
    return reinterpret_cast<const BarrageData*>(
               &_BarrageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BarrageData& a, BarrageData& b) {
    a.Swap(&b);
  }
  inline void Swap(BarrageData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarrageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarrageData* New() const final {
    return CreateMaybeMessage<BarrageData>(nullptr);
  }

  BarrageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarrageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BarrageData& from);
  void MergeFrom(const BarrageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarrageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.BarrageData";
  }
  protected:
  explicit BarrageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_barrage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataHeaderFieldNumber = 2,
    kAppMetadataFieldNumber = 3,
    kDataBodyFieldNumber = 1000,
  };
  // bytes data_header = 2;
  void clear_data_header();
  const std::string& data_header() const;
  void set_data_header(const std::string& value);
  void set_data_header(std::string&& value);
  void set_data_header(const char* value);
  void set_data_header(const void* value, size_t size);
  std::string* mutable_data_header();
  std::string* release_data_header();
  void set_allocated_data_header(std::string* data_header);
  private:
  const std::string& _internal_data_header() const;
  void _internal_set_data_header(const std::string& value);
  std::string* _internal_mutable_data_header();
  public:

  // bytes app_metadata = 3;
  void clear_app_metadata();
  const std::string& app_metadata() const;
  void set_app_metadata(const std::string& value);
  void set_app_metadata(std::string&& value);
  void set_app_metadata(const char* value);
  void set_app_metadata(const void* value, size_t size);
  std::string* mutable_app_metadata();
  std::string* release_app_metadata();
  void set_allocated_app_metadata(std::string* app_metadata);
  private:
  const std::string& _internal_app_metadata() const;
  void _internal_set_app_metadata(const std::string& value);
  std::string* _internal_mutable_app_metadata();
  public:

  // bytes data_body = 1000;
  void clear_data_body();
  const std::string& data_body() const;
  void set_data_body(const std::string& value);
  void set_data_body(std::string&& value);
  void set_data_body(const char* value);
  void set_data_body(const void* value, size_t size);
  std::string* mutable_data_body();
  std::string* release_data_body();
  void set_allocated_data_body(std::string* data_body);
  private:
  const std::string& _internal_data_body() const;
  void _internal_set_data_body(const std::string& value);
  std::string* _internal_mutable_data_body();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.BarrageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_barrage_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.SubscriptionRequest) */ {
 public:
  inline SubscriptionRequest() : SubscriptionRequest(nullptr) {}
  virtual ~SubscriptionRequest();
  explicit constexpr SubscriptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscriptionRequest(const SubscriptionRequest& from);
  SubscriptionRequest(SubscriptionRequest&& from) noexcept
    : SubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline SubscriptionRequest& operator=(const SubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionRequest& operator=(SubscriptionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionRequest*>(
               &_SubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscriptionRequest& a, SubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionRequest* New() const final {
    return CreateMaybeMessage<SubscriptionRequest>(nullptr);
  }

  SubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionRequest& from);
  void MergeFrom(const SubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.SubscriptionRequest";
  }
  protected:
  explicit SubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_barrage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kViewportFieldNumber = 3,
    kTicketFieldNumber = 1,
    kExportIdFieldNumber = 21,
    kUseDeephavenNullsFieldNumber = 23,
    kUpdateIntervalMsFieldNumber = 20,
    kSequenceFieldNumber = 22,
  };
  // bytes columns = 2;
  void clear_columns();
  const std::string& columns() const;
  void set_columns(const std::string& value);
  void set_columns(std::string&& value);
  void set_columns(const char* value);
  void set_columns(const void* value, size_t size);
  std::string* mutable_columns();
  std::string* release_columns();
  void set_allocated_columns(std::string* columns);
  private:
  const std::string& _internal_columns() const;
  void _internal_set_columns(const std::string& value);
  std::string* _internal_mutable_columns();
  public:

  // bytes viewport = 3;
  void clear_viewport();
  const std::string& viewport() const;
  void set_viewport(const std::string& value);
  void set_viewport(std::string&& value);
  void set_viewport(const char* value);
  void set_viewport(const void* value, size_t size);
  std::string* mutable_viewport();
  std::string* release_viewport();
  void set_allocated_viewport(std::string* viewport);
  private:
  const std::string& _internal_viewport() const;
  void _internal_set_viewport(const std::string& value);
  std::string* _internal_mutable_viewport();
  public:

  // .arrow.flight.protocol.Wicket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::arrow::flight::protocol::Wicket& ticket() const;
  ::arrow::flight::protocol::Wicket* release_ticket();
  ::arrow::flight::protocol::Wicket* mutable_ticket();
  void set_allocated_ticket(::arrow::flight::protocol::Wicket* ticket);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_ticket() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_ticket();
  public:
  void unsafe_arena_set_allocated_ticket(
      ::arrow::flight::protocol::Wicket* ticket);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_ticket();

  // .arrow.flight.protocol.Wicket export_id = 21;
  bool has_export_id() const;
  private:
  bool _internal_has_export_id() const;
  public:
  void clear_export_id();
  const ::arrow::flight::protocol::Wicket& export_id() const;
  ::arrow::flight::protocol::Wicket* release_export_id();
  ::arrow::flight::protocol::Wicket* mutable_export_id();
  void set_allocated_export_id(::arrow::flight::protocol::Wicket* export_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_export_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_export_id();
  public:
  void unsafe_arena_set_allocated_export_id(
      ::arrow::flight::protocol::Wicket* export_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_export_id();

  // bool use_deephaven_nulls = 23;
  void clear_use_deephaven_nulls();
  bool use_deephaven_nulls() const;
  void set_use_deephaven_nulls(bool value);
  private:
  bool _internal_use_deephaven_nulls() const;
  void _internal_set_use_deephaven_nulls(bool value);
  public:

  // sint64 update_interval_ms = 20 [jstype = JS_STRING];
  void clear_update_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 update_interval_ms() const;
  void set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_update_interval_ms() const;
  void _internal_set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 sequence = 22 [jstype = JS_STRING];
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.SubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr viewport_;
  ::arrow::flight::protocol::Wicket* ticket_;
  ::arrow::flight::protocol::Wicket* export_id_;
  bool use_deephaven_nulls_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_interval_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_barrage_2eproto;
};
// -------------------------------------------------------------------

class OutOfBandSubscriptionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse) */ {
 public:
  inline OutOfBandSubscriptionResponse() : OutOfBandSubscriptionResponse(nullptr) {}
  virtual ~OutOfBandSubscriptionResponse();
  explicit constexpr OutOfBandSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutOfBandSubscriptionResponse(const OutOfBandSubscriptionResponse& from);
  OutOfBandSubscriptionResponse(OutOfBandSubscriptionResponse&& from) noexcept
    : OutOfBandSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline OutOfBandSubscriptionResponse& operator=(const OutOfBandSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutOfBandSubscriptionResponse& operator=(OutOfBandSubscriptionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutOfBandSubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutOfBandSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const OutOfBandSubscriptionResponse*>(
               &_OutOfBandSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutOfBandSubscriptionResponse& a, OutOfBandSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OutOfBandSubscriptionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutOfBandSubscriptionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutOfBandSubscriptionResponse* New() const final {
    return CreateMaybeMessage<OutOfBandSubscriptionResponse>(nullptr);
  }

  OutOfBandSubscriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutOfBandSubscriptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutOfBandSubscriptionResponse& from);
  void MergeFrom(const OutOfBandSubscriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutOfBandSubscriptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse";
  }
  protected:
  explicit OutOfBandSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_barrage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFoundFieldNumber = 1,
  };
  // bool subscription_found = 1;
  void clear_subscription_found();
  bool subscription_found() const;
  void set_subscription_found(bool value);
  private:
  bool _internal_subscription_found() const;
  void _internal_set_subscription_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool subscription_found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_barrage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BarrageData

// bytes data_header = 2;
inline void BarrageData::clear_data_header() {
  data_header_.ClearToEmpty();
}
inline const std::string& BarrageData::data_header() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
  return _internal_data_header();
}
inline void BarrageData::set_data_header(const std::string& value) {
  _internal_set_data_header(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
}
inline std::string* BarrageData::mutable_data_header() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
  return _internal_mutable_data_header();
}
inline const std::string& BarrageData::_internal_data_header() const {
  return data_header_.Get();
}
inline void BarrageData::_internal_set_data_header(const std::string& value) {
  
  data_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BarrageData::set_data_header(std::string&& value) {
  
  data_header_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
}
inline void BarrageData::set_data_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
}
inline void BarrageData::set_data_header(const void* value,
    size_t size) {
  
  data_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
}
inline std::string* BarrageData::_internal_mutable_data_header() {
  
  return data_header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BarrageData::release_data_header() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
  return data_header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BarrageData::set_allocated_data_header(std::string* data_header) {
  if (data_header != nullptr) {
    
  } else {
    
  }
  data_header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BarrageData.data_header)
}

// bytes app_metadata = 3;
inline void BarrageData::clear_app_metadata() {
  app_metadata_.ClearToEmpty();
}
inline const std::string& BarrageData::app_metadata() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
  return _internal_app_metadata();
}
inline void BarrageData::set_app_metadata(const std::string& value) {
  _internal_set_app_metadata(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
}
inline std::string* BarrageData::mutable_app_metadata() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
  return _internal_mutable_app_metadata();
}
inline const std::string& BarrageData::_internal_app_metadata() const {
  return app_metadata_.Get();
}
inline void BarrageData::_internal_set_app_metadata(const std::string& value) {
  
  app_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BarrageData::set_app_metadata(std::string&& value) {
  
  app_metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
}
inline void BarrageData::set_app_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
}
inline void BarrageData::set_app_metadata(const void* value,
    size_t size) {
  
  app_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
}
inline std::string* BarrageData::_internal_mutable_app_metadata() {
  
  return app_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BarrageData::release_app_metadata() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
  return app_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BarrageData::set_allocated_app_metadata(std::string* app_metadata) {
  if (app_metadata != nullptr) {
    
  } else {
    
  }
  app_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BarrageData.app_metadata)
}

// bytes data_body = 1000;
inline void BarrageData::clear_data_body() {
  data_body_.ClearToEmpty();
}
inline const std::string& BarrageData::data_body() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
  return _internal_data_body();
}
inline void BarrageData::set_data_body(const std::string& value) {
  _internal_set_data_body(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
}
inline std::string* BarrageData::mutable_data_body() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
  return _internal_mutable_data_body();
}
inline const std::string& BarrageData::_internal_data_body() const {
  return data_body_.Get();
}
inline void BarrageData::_internal_set_data_body(const std::string& value) {
  
  data_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BarrageData::set_data_body(std::string&& value) {
  
  data_body_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
}
inline void BarrageData::set_data_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
}
inline void BarrageData::set_data_body(const void* value,
    size_t size) {
  
  data_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
}
inline std::string* BarrageData::_internal_mutable_data_body() {
  
  return data_body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BarrageData::release_data_body() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
  return data_body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BarrageData::set_allocated_data_body(std::string* data_body) {
  if (data_body != nullptr) {
    
  } else {
    
  }
  data_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BarrageData.data_body)
}

// -------------------------------------------------------------------

// SubscriptionRequest

// .arrow.flight.protocol.Wicket ticket = 1;
inline bool SubscriptionRequest::_internal_has_ticket() const {
  return this != internal_default_instance() && ticket_ != nullptr;
}
inline bool SubscriptionRequest::has_ticket() const {
  return _internal_has_ticket();
}
inline const ::arrow::flight::protocol::Wicket& SubscriptionRequest::_internal_ticket() const {
  const ::arrow::flight::protocol::Wicket* p = ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& SubscriptionRequest::ticket() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.ticket)
  return _internal_ticket();
}
inline void SubscriptionRequest::unsafe_arena_set_allocated_ticket(
    ::arrow::flight::protocol::Wicket* ticket) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  ticket_ = ticket;
  if (ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SubscriptionRequest.ticket)
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::release_ticket() {
  
  ::arrow::flight::protocol::Wicket* temp = ticket_;
  ticket_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SubscriptionRequest.ticket)
  
  ::arrow::flight::protocol::Wicket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::_internal_mutable_ticket() {
  
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    ticket_ = p;
  }
  return ticket_;
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SubscriptionRequest.ticket)
  return _internal_mutable_ticket();
}
inline void SubscriptionRequest::set_allocated_ticket(::arrow::flight::protocol::Wicket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket)->GetArena();
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    
  } else {
    
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SubscriptionRequest.ticket)
}

// bytes columns = 2;
inline void SubscriptionRequest::clear_columns() {
  columns_.ClearToEmpty();
}
inline const std::string& SubscriptionRequest::columns() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
  return _internal_columns();
}
inline void SubscriptionRequest::set_columns(const std::string& value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
}
inline std::string* SubscriptionRequest::mutable_columns() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
  return _internal_mutable_columns();
}
inline const std::string& SubscriptionRequest::_internal_columns() const {
  return columns_.Get();
}
inline void SubscriptionRequest::_internal_set_columns(const std::string& value) {
  
  columns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscriptionRequest::set_columns(std::string&& value) {
  
  columns_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
}
inline void SubscriptionRequest::set_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  columns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
}
inline void SubscriptionRequest::set_columns(const void* value,
    size_t size) {
  
  columns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
}
inline std::string* SubscriptionRequest::_internal_mutable_columns() {
  
  return columns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscriptionRequest::release_columns() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
  return columns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionRequest::set_allocated_columns(std::string* columns) {
  if (columns != nullptr) {
    
  } else {
    
  }
  columns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), columns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SubscriptionRequest.columns)
}

// bytes viewport = 3;
inline void SubscriptionRequest::clear_viewport() {
  viewport_.ClearToEmpty();
}
inline const std::string& SubscriptionRequest::viewport() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
  return _internal_viewport();
}
inline void SubscriptionRequest::set_viewport(const std::string& value) {
  _internal_set_viewport(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
}
inline std::string* SubscriptionRequest::mutable_viewport() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
  return _internal_mutable_viewport();
}
inline const std::string& SubscriptionRequest::_internal_viewport() const {
  return viewport_.Get();
}
inline void SubscriptionRequest::_internal_set_viewport(const std::string& value) {
  
  viewport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscriptionRequest::set_viewport(std::string&& value) {
  
  viewport_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
}
inline void SubscriptionRequest::set_viewport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  viewport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
}
inline void SubscriptionRequest::set_viewport(const void* value,
    size_t size) {
  
  viewport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
}
inline std::string* SubscriptionRequest::_internal_mutable_viewport() {
  
  return viewport_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscriptionRequest::release_viewport() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
  return viewport_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionRequest::set_allocated_viewport(std::string* viewport) {
  if (viewport != nullptr) {
    
  } else {
    
  }
  viewport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), viewport,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SubscriptionRequest.viewport)
}

// sint64 update_interval_ms = 20 [jstype = JS_STRING];
inline void SubscriptionRequest::clear_update_interval_ms() {
  update_interval_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionRequest::_internal_update_interval_ms() const {
  return update_interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionRequest::update_interval_ms() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.update_interval_ms)
  return _internal_update_interval_ms();
}
inline void SubscriptionRequest::_internal_set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  update_interval_ms_ = value;
}
inline void SubscriptionRequest::set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_update_interval_ms(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SubscriptionRequest.update_interval_ms)
}

// .arrow.flight.protocol.Wicket export_id = 21;
inline bool SubscriptionRequest::_internal_has_export_id() const {
  return this != internal_default_instance() && export_id_ != nullptr;
}
inline bool SubscriptionRequest::has_export_id() const {
  return _internal_has_export_id();
}
inline const ::arrow::flight::protocol::Wicket& SubscriptionRequest::_internal_export_id() const {
  const ::arrow::flight::protocol::Wicket* p = export_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& SubscriptionRequest::export_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.export_id)
  return _internal_export_id();
}
inline void SubscriptionRequest::unsafe_arena_set_allocated_export_id(
    ::arrow::flight::protocol::Wicket* export_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_id_);
  }
  export_id_ = export_id;
  if (export_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SubscriptionRequest.export_id)
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::release_export_id() {
  
  ::arrow::flight::protocol::Wicket* temp = export_id_;
  export_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::unsafe_arena_release_export_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SubscriptionRequest.export_id)
  
  ::arrow::flight::protocol::Wicket* temp = export_id_;
  export_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::_internal_mutable_export_id() {
  
  if (export_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    export_id_ = p;
  }
  return export_id_;
}
inline ::arrow::flight::protocol::Wicket* SubscriptionRequest::mutable_export_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SubscriptionRequest.export_id)
  return _internal_mutable_export_id();
}
inline void SubscriptionRequest::set_allocated_export_id(::arrow::flight::protocol::Wicket* export_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_id_);
  }
  if (export_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_id)->GetArena();
    if (message_arena != submessage_arena) {
      export_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, export_id, submessage_arena);
    }
    
  } else {
    
  }
  export_id_ = export_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SubscriptionRequest.export_id)
}

// sint64 sequence = 22 [jstype = JS_STRING];
inline void SubscriptionRequest::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionRequest::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionRequest::sequence() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.sequence)
  return _internal_sequence();
}
inline void SubscriptionRequest::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void SubscriptionRequest::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SubscriptionRequest.sequence)
}

// bool use_deephaven_nulls = 23;
inline void SubscriptionRequest::clear_use_deephaven_nulls() {
  use_deephaven_nulls_ = false;
}
inline bool SubscriptionRequest::_internal_use_deephaven_nulls() const {
  return use_deephaven_nulls_;
}
inline bool SubscriptionRequest::use_deephaven_nulls() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SubscriptionRequest.use_deephaven_nulls)
  return _internal_use_deephaven_nulls();
}
inline void SubscriptionRequest::_internal_set_use_deephaven_nulls(bool value) {
  
  use_deephaven_nulls_ = value;
}
inline void SubscriptionRequest::set_use_deephaven_nulls(bool value) {
  _internal_set_use_deephaven_nulls(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SubscriptionRequest.use_deephaven_nulls)
}

// -------------------------------------------------------------------

// OutOfBandSubscriptionResponse

// bool subscription_found = 1;
inline void OutOfBandSubscriptionResponse::clear_subscription_found() {
  subscription_found_ = false;
}
inline bool OutOfBandSubscriptionResponse::_internal_subscription_found() const {
  return subscription_found_;
}
inline bool OutOfBandSubscriptionResponse::subscription_found() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse.subscription_found)
  return _internal_subscription_found();
}
inline void OutOfBandSubscriptionResponse::_internal_set_subscription_found(bool value) {
  
  subscription_found_ = value;
}
inline void OutOfBandSubscriptionResponse::set_subscription_found(bool value) {
  _internal_set_subscription_found(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.OutOfBandSubscriptionResponse.subscription_found)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_barrage_2eproto
