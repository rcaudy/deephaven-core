// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table.proto

#include "table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
constexpr TableReference::TableReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TableReferenceDefaultTypeInternal {
  constexpr TableReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableReferenceDefaultTypeInternal() {}
  union {
    TableReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableReferenceDefaultTypeInternal _TableReference_default_instance_;
constexpr ExportedTableCreationResponse::ExportedTableCreationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr)
  , size_(PROTOBUF_LONGLONG(0))
  , success_(false)
  , is_static_(false){}
struct ExportedTableCreationResponseDefaultTypeInternal {
  constexpr ExportedTableCreationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableCreationResponseDefaultTypeInternal() {}
  union {
    ExportedTableCreationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableCreationResponseDefaultTypeInternal _ExportedTableCreationResponse_default_instance_;
constexpr ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExportedTableUpdatesRequestDefaultTypeInternal {
  constexpr ExportedTableUpdatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableUpdatesRequestDefaultTypeInternal() {}
  union {
    ExportedTableUpdatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableUpdatesRequestDefaultTypeInternal _ExportedTableUpdatesRequest_default_instance_;
constexpr ExportedTableUpdateMessage::ExportedTableUpdateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_failure_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , export_id_(nullptr)
  , size_(PROTOBUF_LONGLONG(0)){}
struct ExportedTableUpdateMessageDefaultTypeInternal {
  constexpr ExportedTableUpdateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableUpdateMessageDefaultTypeInternal() {}
  union {
    ExportedTableUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableUpdateMessageDefaultTypeInternal _ExportedTableUpdateMessage_default_instance_;
constexpr ExportedTableUpdateBatchMessage::ExportedTableUpdateBatchMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct ExportedTableUpdateBatchMessageDefaultTypeInternal {
  constexpr ExportedTableUpdateBatchMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableUpdateBatchMessageDefaultTypeInternal() {}
  union {
    ExportedTableUpdateBatchMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableUpdateBatchMessageDefaultTypeInternal _ExportedTableUpdateBatchMessage_default_instance_;
constexpr EmptyTableRequest::EmptyTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_names_()
  , column_types_()
  , result_id_(nullptr)
  , size_(PROTOBUF_LONGLONG(0)){}
struct EmptyTableRequestDefaultTypeInternal {
  constexpr EmptyTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyTableRequestDefaultTypeInternal() {}
  union {
    EmptyTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyTableRequestDefaultTypeInternal _EmptyTableRequest_default_instance_;
constexpr TimeTableRequest::TimeTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , start_time_nanos_(PROTOBUF_LONGLONG(0))
  , period_nanos_(PROTOBUF_LONGLONG(0)){}
struct TimeTableRequestDefaultTypeInternal {
  constexpr TimeTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeTableRequestDefaultTypeInternal() {}
  union {
    TimeTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeTableRequestDefaultTypeInternal _TimeTableRequest_default_instance_;
constexpr SelectOrUpdateRequest::SelectOrUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_specs_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct SelectOrUpdateRequestDefaultTypeInternal {
  constexpr SelectOrUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectOrUpdateRequestDefaultTypeInternal() {}
  union {
    SelectOrUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectOrUpdateRequestDefaultTypeInternal _SelectOrUpdateRequest_default_instance_;
constexpr SelectDistinctRequest::SelectDistinctRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_names_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct SelectDistinctRequestDefaultTypeInternal {
  constexpr SelectDistinctRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectDistinctRequestDefaultTypeInternal() {}
  union {
    SelectDistinctRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectDistinctRequestDefaultTypeInternal _SelectDistinctRequest_default_instance_;
constexpr DropColumnsRequest::DropColumnsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_names_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct DropColumnsRequestDefaultTypeInternal {
  constexpr DropColumnsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropColumnsRequestDefaultTypeInternal() {}
  union {
    DropColumnsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropColumnsRequestDefaultTypeInternal _DropColumnsRequest_default_instance_;
constexpr UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct UnstructuredFilterTableRequestDefaultTypeInternal {
  constexpr UnstructuredFilterTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnstructuredFilterTableRequestDefaultTypeInternal() {}
  union {
    UnstructuredFilterTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnstructuredFilterTableRequestDefaultTypeInternal _UnstructuredFilterTableRequest_default_instance_;
constexpr HeadOrTailRequest::HeadOrTailRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , source_id_(nullptr)
  , num_rows_(PROTOBUF_LONGLONG(0)){}
struct HeadOrTailRequestDefaultTypeInternal {
  constexpr HeadOrTailRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadOrTailRequestDefaultTypeInternal() {}
  union {
    HeadOrTailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadOrTailRequestDefaultTypeInternal _HeadOrTailRequest_default_instance_;
constexpr HeadOrTailByRequest::HeadOrTailByRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_column_specs_()
  , result_id_(nullptr)
  , source_id_(nullptr)
  , num_rows_(PROTOBUF_LONGLONG(0)){}
struct HeadOrTailByRequestDefaultTypeInternal {
  constexpr HeadOrTailByRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadOrTailByRequestDefaultTypeInternal() {}
  union {
    HeadOrTailByRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadOrTailByRequestDefaultTypeInternal _HeadOrTailByRequest_default_instance_;
constexpr UngroupRequest::UngroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_ungroup_()
  , result_id_(nullptr)
  , source_id_(nullptr)
  , null_fill_(false){}
struct UngroupRequestDefaultTypeInternal {
  constexpr UngroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UngroupRequestDefaultTypeInternal() {}
  union {
    UngroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UngroupRequestDefaultTypeInternal _UngroupRequest_default_instance_;
constexpr MergeTablesRequest::MergeTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_ids_()
  , key_column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr){}
struct MergeTablesRequestDefaultTypeInternal {
  constexpr MergeTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeTablesRequestDefaultTypeInternal() {}
  union {
    MergeTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeTablesRequestDefaultTypeInternal _MergeTablesRequest_default_instance_;
constexpr SnapshotTableRequest::SnapshotTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stamp_columns_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr)
  , do_initial_snapshot_(false){}
struct SnapshotTableRequestDefaultTypeInternal {
  constexpr SnapshotTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnapshotTableRequestDefaultTypeInternal() {}
  union {
    SnapshotTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnapshotTableRequestDefaultTypeInternal _SnapshotTableRequest_default_instance_;
constexpr JoinTablesRequest::JoinTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_match_()
  , columns_to_add_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr)
  , join_type_(0)
{}
struct JoinTablesRequestDefaultTypeInternal {
  constexpr JoinTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinTablesRequestDefaultTypeInternal() {}
  union {
    JoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinTablesRequestDefaultTypeInternal _JoinTablesRequest_default_instance_;
constexpr ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_pairs_()
  , column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , avg_median_(false)
  , percentile_(0){}
struct ComboAggregateRequest_AggregateDefaultTypeInternal {
  constexpr ComboAggregateRequest_AggregateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComboAggregateRequest_AggregateDefaultTypeInternal() {}
  union {
    ComboAggregateRequest_Aggregate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComboAggregateRequest_AggregateDefaultTypeInternal _ComboAggregateRequest_Aggregate_default_instance_;
constexpr ComboAggregateRequest::ComboAggregateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aggregates_()
  , group_by_columns_()
  , result_id_(nullptr)
  , source_id_(nullptr)
  , force_combo_(false){}
struct ComboAggregateRequestDefaultTypeInternal {
  constexpr ComboAggregateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComboAggregateRequestDefaultTypeInternal() {}
  union {
    ComboAggregateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComboAggregateRequestDefaultTypeInternal _ComboAggregateRequest_default_instance_;
constexpr SortDescriptor::SortDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_absolute_(false)
  , direction_(0)
{}
struct SortDescriptorDefaultTypeInternal {
  constexpr SortDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortDescriptorDefaultTypeInternal() {}
  union {
    SortDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortDescriptorDefaultTypeInternal _SortDescriptor_default_instance_;
constexpr SortTableRequest::SortTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorts_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct SortTableRequestDefaultTypeInternal {
  constexpr SortTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortTableRequestDefaultTypeInternal() {}
  union {
    SortTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortTableRequestDefaultTypeInternal _SortTableRequest_default_instance_;
constexpr FilterTableRequest::FilterTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct FilterTableRequestDefaultTypeInternal {
  constexpr FilterTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterTableRequestDefaultTypeInternal() {}
  union {
    FilterTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterTableRequestDefaultTypeInternal _FilterTableRequest_default_instance_;
constexpr FilterDescription::FilterDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , filter_op_(0)

  , _oneof_case_{}{}
struct FilterDescriptionDefaultTypeInternal {
  constexpr FilterDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterDescriptionDefaultTypeInternal() {}
  union {
    FilterDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterDescriptionDefaultTypeInternal _FilterDescription_default_instance_;
constexpr FlattenRequest::FlattenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , source_id_(nullptr){}
struct FlattenRequestDefaultTypeInternal {
  constexpr FlattenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlattenRequestDefaultTypeInternal() {}
  union {
    FlattenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlattenRequestDefaultTypeInternal _FlattenRequest_default_instance_;
constexpr BatchTableRequest_Operation::BatchTableRequest_Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BatchTableRequest_OperationDefaultTypeInternal {
  constexpr BatchTableRequest_OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchTableRequest_OperationDefaultTypeInternal() {}
  union {
    BatchTableRequest_Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchTableRequest_OperationDefaultTypeInternal _BatchTableRequest_Operation_default_instance_;
constexpr BatchTableRequest::BatchTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ops_(){}
struct BatchTableRequestDefaultTypeInternal {
  constexpr BatchTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchTableRequestDefaultTypeInternal() {}
  union {
    BatchTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchTableRequestDefaultTypeInternal _BatchTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_table_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_table_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_table_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_table_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, success_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, schema_header_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, is_static_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, export_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, update_failure_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, column_names_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, column_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, start_time_nanos_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, period_nanos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, column_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, num_rows_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, group_by_column_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, null_fill_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, columns_to_ungroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, source_ids_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, key_column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, do_initial_snapshot_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, stamp_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, columns_to_add_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::JoinTablesRequest, join_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, match_pairs_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, percentile_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, avg_median_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, aggregates_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, group_by_columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, force_combo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, is_absolute_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, sorts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterDescription, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterDescription, filter_op_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterDescription, children_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterDescription, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, source_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, ops_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::deephaven::proto::backplane::grpc::TableReference)},
  { 8, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse)},
  { 19, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest)},
  { 24, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage)},
  { 32, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage)},
  { 38, -1, sizeof(::io::deephaven::proto::backplane::grpc::EmptyTableRequest)},
  { 47, -1, sizeof(::io::deephaven::proto::backplane::grpc::TimeTableRequest)},
  { 55, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest)},
  { 63, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest)},
  { 71, -1, sizeof(::io::deephaven::proto::backplane::grpc::DropColumnsRequest)},
  { 79, -1, sizeof(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest)},
  { 87, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest)},
  { 95, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest)},
  { 104, -1, sizeof(::io::deephaven::proto::backplane::grpc::UngroupRequest)},
  { 113, -1, sizeof(::io::deephaven::proto::backplane::grpc::MergeTablesRequest)},
  { 121, -1, sizeof(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest)},
  { 131, -1, sizeof(::io::deephaven::proto::backplane::grpc::JoinTablesRequest)},
  { 142, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate)},
  { 152, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest)},
  { 162, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortDescriptor)},
  { 170, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortTableRequest)},
  { 178, -1, sizeof(::io::deephaven::proto::backplane::grpc::FilterTableRequest)},
  { 186, -1, sizeof(::io::deephaven::proto::backplane::grpc::FilterDescription)},
  { 199, -1, sizeof(::io::deephaven::proto::backplane::grpc::FlattenRequest)},
  { 206, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation)},
  { 234, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableCreationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableUpdatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableUpdateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableUpdateBatchMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_EmptyTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_TimeTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SelectDistinctRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_DropColumnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_UnstructuredFilterTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_HeadOrTailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_HeadOrTailByRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_UngroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_MergeTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SnapshotTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_JoinTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_Aggregate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SortDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SortTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FilterTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FilterDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FlattenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_BatchTableRequest_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_BatchTableRequest_default_instance_),
};

const char descriptor_table_protodef_table_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013table.proto\022!io.deephaven.proto.backpl"
  "ane.grpc\032\014flight.proto\"`\n\016TableReference"
  "\022/\n\006ticket\030\001 \001(\0132\035.arrow.flight.protocol"
  ".WicketH\000\022\026\n\014batch_offset\030\002 \001(\021H\000B\005\n\003ref"
  "\"\306\001\n\035ExportedTableCreationResponse\022D\n\tre"
  "sult_id\030\001 \001(\01321.io.deephaven.proto.backp"
  "lane.grpc.TableReference\022\017\n\007success\030\002 \001("
  "\010\022\022\n\nerror_info\030\003 \001(\t\022\025\n\rschema_header\030\004"
  " \001(\014\022\021\n\tis_static\030\005 \001(\010\022\020\n\004size\030\006 \001(\022B\0020"
  "\001\"\035\n\033ExportedTableUpdatesRequest\"\200\001\n\032Exp"
  "ortedTableUpdateMessage\0220\n\texport_id\030\001 \001"
  "(\0132\035.arrow.flight.protocol.Wicket\022\020\n\004siz"
  "e\030\002 \001(\022B\0020\001\022\036\n\026update_failure_message\030\003 "
  "\001(\t\"q\n\037ExportedTableUpdateBatchMessage\022N"
  "\n\007updates\030\001 \003(\0132=.io.deephaven.proto.bac"
  "kplane.grpc.ExportedTableUpdateMessage\"\203"
  "\001\n\021EmptyTableRequest\0220\n\tresult_id\030\001 \001(\0132"
  "\035.arrow.flight.protocol.Wicket\022\020\n\004size\030\002"
  " \001(\022B\0020\001\022\024\n\014column_names\030\003 \003(\t\022\024\n\014column"
  "_types\030\004 \003(\t\"|\n\020TimeTableRequest\0220\n\tresu"
  "lt_id\030\001 \001(\0132\035.arrow.flight.protocol.Wick"
  "et\022\034\n\020start_time_nanos\030\002 \001(\022B\0020\001\022\030\n\014peri"
  "od_nanos\030\003 \001(\022B\0020\001\"\245\001\n\025SelectOrUpdateReq"
  "uest\0220\n\tresult_id\030\001 \001(\0132\035.arrow.flight.p"
  "rotocol.Wicket\022D\n\tsource_id\030\002 \001(\01321.io.d"
  "eephaven.proto.backplane.grpc.TableRefer"
  "ence\022\024\n\014column_specs\030\003 \003(\t\"\245\001\n\025SelectDis"
  "tinctRequest\0220\n\tresult_id\030\001 \001(\0132\035.arrow."
  "flight.protocol.Wicket\022D\n\tsource_id\030\002 \001("
  "\01321.io.deephaven.proto.backplane.grpc.Ta"
  "bleReference\022\024\n\014column_names\030\003 \003(\t\"\242\001\n\022D"
  "ropColumnsRequest\0220\n\tresult_id\030\001 \001(\0132\035.a"
  "rrow.flight.protocol.Wicket\022D\n\tsource_id"
  "\030\002 \001(\01321.io.deephaven.proto.backplane.gr"
  "pc.TableReference\022\024\n\014column_names\030\003 \003(\t\""
  "\251\001\n\036UnstructuredFilterTableRequest\0220\n\tre"
  "sult_id\030\001 \001(\0132\035.arrow.flight.protocol.Wi"
  "cket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.p"
  "roto.backplane.grpc.TableReference\022\017\n\007fi"
  "lters\030\003 \003(\t\"\241\001\n\021HeadOrTailRequest\0220\n\tres"
  "ult_id\030\001 \001(\0132\035.arrow.flight.protocol.Wic"
  "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReference\022\024\n\010num"
  "_rows\030\003 \001(\022B\0020\001\"\302\001\n\023HeadOrTailByRequest\022"
  "0\n\tresult_id\030\001 \001(\0132\035.arrow.flight.protoc"
  "ol.Wicket\022D\n\tsource_id\030\002 \001(\01321.io.deepha"
  "ven.proto.backplane.grpc.TableReference\022"
  "\024\n\010num_rows\030\003 \001(\022B\0020\001\022\035\n\025group_by_column"
  "_specs\030\004 \003(\t\"\267\001\n\016UngroupRequest\0220\n\tresul"
  "t_id\030\001 \001(\0132\035.arrow.flight.protocol.Wicke"
  "t\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.prot"
  "o.backplane.grpc.TableReference\022\021\n\tnull_"
  "fill\030\003 \001(\010\022\032\n\022columns_to_ungroup\030\004 \003(\t\"\241"
  "\001\n\022MergeTablesRequest\0220\n\tresult_id\030\001 \001(\013"
  "2\035.arrow.flight.protocol.Wicket\022E\n\nsourc"
  "e_ids\030\002 \003(\01321.io.deephaven.proto.backpla"
  "ne.grpc.TableReference\022\022\n\nkey_column\030\003 \001"
  "(\t\"\205\002\n\024SnapshotTableRequest\0220\n\tresult_id"
  "\030\001 \001(\0132\035.arrow.flight.protocol.Wicket\022B\n"
  "\007left_id\030\002 \001(\01321.io.deephaven.proto.back"
  "plane.grpc.TableReference\022C\n\010right_id\030\003 "
  "\001(\01321.io.deephaven.proto.backplane.grpc."
  "TableReference\022\033\n\023do_initial_snapshot\030\004 "
  "\001(\010\022\025\n\rstamp_columns\030\005 \003(\t\"\277\003\n\021JoinTable"
  "sRequest\0220\n\tresult_id\030\001 \001(\0132\035.arrow.flig"
  "ht.protocol.Wicket\022B\n\007left_id\030\002 \001(\01321.io"
  ".deephaven.proto.backplane.grpc.TableRef"
  "erence\022C\n\010right_id\030\003 \001(\01321.io.deephaven."
  "proto.backplane.grpc.TableReference\022\030\n\020c"
  "olumns_to_match\030\004 \003(\t\022\026\n\016columns_to_add\030"
  "\005 \003(\t\022L\n\tjoin_type\030\006 \001(\01629.io.deephaven."
  "proto.backplane.grpc.JoinTablesRequest.T"
  "ype\"o\n\004Type\022\016\n\nCROSS_JOIN\020\000\022\020\n\014NATURAL_J"
  "OIN\020\001\022\016\n\nAS_OF_JOIN\020\002\022\026\n\022REVERSE_AS_OF_J"
  "OIN\020\003\022\016\n\nEXACT_JOIN\020\004\022\r\n\tLEFT_JOIN\020\005\"\356\004\n"
  "\025ComboAggregateRequest\0220\n\tresult_id\030\001 \001("
  "\0132\035.arrow.flight.protocol.Wicket\022D\n\tsour"
  "ce_id\030\002 \001(\01321.io.deephaven.proto.backpla"
  "ne.grpc.TableReference\022V\n\naggregates\030\003 \003"
  "(\0132B.io.deephaven.proto.backplane.grpc.C"
  "omboAggregateRequest.Aggregate\022\030\n\020group_"
  "by_columns\030\004 \003(\t\022\023\n\013force_combo\030\005 \001(\010\032\255\001"
  "\n\tAggregate\022N\n\004type\030\001 \001(\0162@.io.deephaven"
  ".proto.backplane.grpc.ComboAggregateRequ"
  "est.AggType\022\023\n\013match_pairs\030\002 \003(\t\022\023\n\013colu"
  "mn_name\030\003 \001(\t\022\022\n\npercentile\030\004 \001(\001\022\022\n\navg"
  "_median\030\005 \001(\010\"\245\001\n\007AggType\022\007\n\003SUM\020\000\022\013\n\007AB"
  "S_SUM\020\001\022\t\n\005ARRAY\020\002\022\007\n\003AVG\020\003\022\t\n\005COUNT\020\004\022\t"
  "\n\005FIRST\020\005\022\010\n\004LAST\020\006\022\007\n\003MIN\020\007\022\007\n\003MAX\020\010\022\n\n"
  "\006MEDIAN\020\t\022\016\n\nPERCENTILE\020\n\022\007\n\003STD\020\013\022\007\n\003VA"
  "R\020\014\022\020\n\014WEIGHTED_AVG\020\r\"\341\001\n\016SortDescriptor"
  "\022\023\n\013column_name\030\001 \001(\t\022\023\n\013is_absolute\030\002 \001"
  "(\010\022R\n\tdirection\030\003 \001(\0162\?.io.deephaven.pro"
  "to.backplane.grpc.SortDescriptor.SortDir"
  "ection\"Q\n\rSortDirection\022\013\n\007UNKNOWN\020\000\022\027\n\n"
  "DESCENDING\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tASCENDING\020\001\022\013\n\007"
  "REVERSE\020\002\"\314\001\n\020SortTableRequest\0220\n\tresult"
  "_id\030\001 \001(\0132\035.arrow.flight.protocol.Wicket"
  "\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.proto"
  ".backplane.grpc.TableReference\022@\n\005sorts\030"
  "\003 \003(\01321.io.deephaven.proto.backplane.grp"
  "c.SortDescriptor\"\323\001\n\022FilterTableRequest\022"
  "0\n\tresult_id\030\001 \001(\0132\035.arrow.flight.protoc"
  "ol.Wicket\022D\n\tsource_id\030\002 \001(\01321.io.deepha"
  "ven.proto.backplane.grpc.TableReference\022"
  "E\n\007filters\030\003 \003(\01324.io.deephaven.proto.ba"
  "ckplane.grpc.FilterDescription\"\352\004\n\021Filte"
  "rDescription\022Q\n\tfilter_op\030\001 \001(\0162>.io.dee"
  "phaven.proto.backplane.grpc.FilterDescri"
  "ption.Operation\022F\n\010children\030\002 \003(\01324.io.d"
  "eephaven.proto.backplane.grpc.FilterDesc"
  "ription\022\026\n\014string_value\030\003 \001(\tH\000\022\026\n\014doubl"
  "e_value\030\004 \001(\001H\000\022\024\n\nbool_value\030\005 \001(\010H\000\022\024\n"
  "\nlong_value\030\006 \001(\022H\000\022\031\n\017nano_time_value\030\007"
  " \001(\022H\000\"\271\002\n\tOperation\022\013\n\007UNKNOWN\020\000\022\007\n\003AND"
  "\020\001\022\006\n\002OR\020\002\022\007\n\003NOT\020\003\022\006\n\002LT\020\004\022\006\n\002GT\020\005\022\007\n\003L"
  "TE\020\006\022\007\n\003GTE\020\007\022\006\n\002EQ\020\010\022\014\n\010EQ_ICASE\020\t\022\007\n\003N"
  "EQ\020\n\022\r\n\tNEQ_ICASE\020\013\022\006\n\002IN\020\014\022\014\n\010IN_ICASE\020"
  "\r\022\n\n\006NOT_IN\020\016\022\020\n\014NOT_IN_ICASE\020\017\022\013\n\007IS_NU"
  "LL\020\020\022\n\n\006INVOKE\020\021\022\013\n\007LITERAL\020\022\022\r\n\tREFEREN"
  "CE\020\023\022\014\n\010CONTAINS\020\024\022\022\n\016CONTAINS_ICASE\020\025\022\013"
  "\n\007MATCHES\020\026\022\021\n\rMATCHES_ICASE\020\027\022\n\n\006SEARCH"
  "\020\030B\007\n\005value\"\210\001\n\016FlattenRequest\0220\n\tresult"
  "_id\030\001 \001(\0132\035.arrow.flight.protocol.Wicket"
  "\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.proto"
  ".backplane.grpc.TableReference\"\202\016\n\021Batch"
  "TableRequest\022K\n\003ops\030\001 \003(\0132>.io.deephaven"
  ".proto.backplane.grpc.BatchTableRequest."
  "Operation\032\237\r\n\tOperation\022K\n\013empty_table\030\001"
  " \001(\01324.io.deephaven.proto.backplane.grpc"
  ".EmptyTableRequestH\000\022I\n\ntime_table\030\002 \001(\013"
  "23.io.deephaven.proto.backplane.grpc.Tim"
  "eTableRequestH\000\022M\n\014drop_columns\030\003 \001(\01325."
  "io.deephaven.proto.backplane.grpc.DropCo"
  "lumnsRequestH\000\022J\n\006update\030\004 \001(\01328.io.deep"
  "haven.proto.backplane.grpc.SelectOrUpdat"
  "eRequestH\000\022O\n\013lazy_update\030\005 \001(\01328.io.dee"
  "phaven.proto.backplane.grpc.SelectOrUpda"
  "teRequestH\000\022H\n\004view\030\006 \001(\01328.io.deephaven"
  ".proto.backplane.grpc.SelectOrUpdateRequ"
  "estH\000\022O\n\013update_view\030\007 \001(\01328.io.deephave"
  "n.proto.backplane.grpc.SelectOrUpdateReq"
  "uestH\000\022J\n\006select\030\010 \001(\01328.io.deephaven.pr"
  "oto.backplane.grpc.SelectOrUpdateRequest"
  "H\000\022S\n\017select_distinct\030\t \001(\01328.io.deephav"
  "en.proto.backplane.grpc.SelectDistinctRe"
  "questH\000\022G\n\006filter\030\n \001(\01325.io.deephaven.p"
  "roto.backplane.grpc.FilterTableRequestH\000"
  "\022`\n\023unstructured_filter\030\013 \001(\0132A.io.deeph"
  "aven.proto.backplane.grpc.UnstructuredFi"
  "lterTableRequestH\000\022C\n\004sort\030\014 \001(\01323.io.de"
  "ephaven.proto.backplane.grpc.SortTableRe"
  "questH\000\022D\n\004head\030\r \001(\01324.io.deephaven.pro"
  "to.backplane.grpc.HeadOrTailRequestH\000\022D\n"
  "\004tail\030\016 \001(\01324.io.deephaven.proto.backpla"
  "ne.grpc.HeadOrTailRequestH\000\022I\n\007head_by\030\017"
  " \001(\01326.io.deephaven.proto.backplane.grpc"
  ".HeadOrTailByRequestH\000\022I\n\007tail_by\030\020 \001(\0132"
  "6.io.deephaven.proto.backplane.grpc.Head"
  "OrTailByRequestH\000\022D\n\007ungroup\030\021 \001(\01321.io."
  "deephaven.proto.backplane.grpc.UngroupRe"
  "questH\000\022F\n\005merge\030\022 \001(\01325.io.deephaven.pr"
  "oto.backplane.grpc.MergeTablesRequestH\000\022"
  "D\n\004join\030\023 \001(\01324.io.deephaven.proto.backp"
  "lane.grpc.JoinTablesRequestH\000\022S\n\017combo_a"
  "ggregate\030\024 \001(\01328.io.deephaven.proto.back"
  "plane.grpc.ComboAggregateRequestH\000\022K\n\010sn"
  "apshot\030\025 \001(\01327.io.deephaven.proto.backpl"
  "ane.grpc.SnapshotTableRequestH\000\022D\n\007flatt"
  "en\030\026 \001(\01321.io.deephaven.proto.backplane."
  "grpc.FlattenRequestH\000B\004\n\002op2\202\032\n\014TableSer"
  "vice\022\206\001\n\nEmptyTable\0224.io.deephaven.proto"
  ".backplane.grpc.EmptyTableRequest\032@.io.d"
  "eephaven.proto.backplane.grpc.ExportedTa"
  "bleCreationResponse\"\000\022\204\001\n\tTimeTable\0223.io"
  ".deephaven.proto.backplane.grpc.TimeTabl"
  "eRequest\032@.io.deephaven.proto.backplane."
  "grpc.ExportedTableCreationResponse\"\000\022\210\001\n"
  "\013DropColumns\0225.io.deephaven.proto.backpl"
  "ane.grpc.DropColumnsRequest\032@.io.deephav"
  "en.proto.backplane.grpc.ExportedTableCre"
  "ationResponse\"\000\022\206\001\n\006Update\0228.io.deephave"
  "n.proto.backplane.grpc.SelectOrUpdateReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\212\001\n\nLaz"
  "yUpdate\0228.io.deephaven.proto.backplane.g"
  "rpc.SelectOrUpdateRequest\032@.io.deephaven"
  ".proto.backplane.grpc.ExportedTableCreat"
  "ionResponse\"\000\022\204\001\n\004View\0228.io.deephaven.pr"
  "oto.backplane.grpc.SelectOrUpdateRequest"
  "\032@.io.deephaven.proto.backplane.grpc.Exp"
  "ortedTableCreationResponse\"\000\022\212\001\n\nUpdateV"
  "iew\0228.io.deephaven.proto.backplane.grpc."
  "SelectOrUpdateRequest\032@.io.deephaven.pro"
  "to.backplane.grpc.ExportedTableCreationR"
  "esponse\"\000\022\206\001\n\006Select\0228.io.deephaven.prot"
  "o.backplane.grpc.SelectOrUpdateRequest\032@"
  ".io.deephaven.proto.backplane.grpc.Expor"
  "tedTableCreationResponse\"\000\022\216\001\n\016SelectDis"
  "tinct\0228.io.deephaven.proto.backplane.grp"
  "c.SelectDistinctRequest\032@.io.deephaven.p"
  "roto.backplane.grpc.ExportedTableCreatio"
  "nResponse\"\000\022\203\001\n\006Filter\0225.io.deephaven.pr"
  "oto.backplane.grpc.FilterTableRequest\032@."
  "io.deephaven.proto.backplane.grpc.Export"
  "edTableCreationResponse\"\000\022\233\001\n\022Unstructur"
  "edFilter\022A.io.deephaven.proto.backplane."
  "grpc.UnstructuredFilterTableRequest\032@.io"
  ".deephaven.proto.backplane.grpc.Exported"
  "TableCreationResponse\"\000\022\177\n\004Sort\0223.io.dee"
  "phaven.proto.backplane.grpc.SortTableReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\200\001\n\004Hea"
  "d\0224.io.deephaven.proto.backplane.grpc.He"
  "adOrTailRequest\032@.io.deephaven.proto.bac"
  "kplane.grpc.ExportedTableCreationRespons"
  "e\"\000\022\200\001\n\004Tail\0224.io.deephaven.proto.backpl"
  "ane.grpc.HeadOrTailRequest\032@.io.deephave"
  "n.proto.backplane.grpc.ExportedTableCrea"
  "tionResponse\"\000\022\204\001\n\006HeadBy\0226.io.deephaven"
  ".proto.backplane.grpc.HeadOrTailByReques"
  "t\032@.io.deephaven.proto.backplane.grpc.Ex"
  "portedTableCreationResponse\"\000\022\204\001\n\006TailBy"
  "\0226.io.deephaven.proto.backplane.grpc.Hea"
  "dOrTailByRequest\032@.io.deephaven.proto.ba"
  "ckplane.grpc.ExportedTableCreationRespon"
  "se\"\000\022\200\001\n\007Ungroup\0221.io.deephaven.proto.ba"
  "ckplane.grpc.UngroupRequest\032@.io.deephav"
  "en.proto.backplane.grpc.ExportedTableCre"
  "ationResponse\"\000\022\210\001\n\013MergeTables\0225.io.dee"
  "phaven.proto.backplane.grpc.MergeTablesR"
  "equest\032@.io.deephaven.proto.backplane.gr"
  "pc.ExportedTableCreationResponse\"\000\022\206\001\n\nJ"
  "oinTables\0224.io.deephaven.proto.backplane"
  ".grpc.JoinTablesRequest\032@.io.deephaven.p"
  "roto.backplane.grpc.ExportedTableCreatio"
  "nResponse\"\000\022\216\001\n\016ComboAggregate\0228.io.deep"
  "haven.proto.backplane.grpc.ComboAggregat"
  "eRequest\032@.io.deephaven.proto.backplane."
  "grpc.ExportedTableCreationResponse\"\000\022\207\001\n"
  "\010Snapshot\0227.io.deephaven.proto.backplane"
  ".grpc.SnapshotTableRequest\032@.io.deephave"
  "n.proto.backplane.grpc.ExportedTableCrea"
  "tionResponse\"\000\022\200\001\n\007Flatten\0221.io.deephave"
  "n.proto.backplane.grpc.FlattenRequest\032@."
  "io.deephaven.proto.backplane.grpc.Export"
  "edTableCreationResponse\"\000\022\203\001\n\005Batch\0224.io"
  ".deephaven.proto.backplane.grpc.BatchTab"
  "leRequest\032@.io.deephaven.proto.backplane"
  ".grpc.ExportedTableCreationResponse\"\0000\001\022"
  "\236\001\n\024ExportedTableUpdates\022>.io.deephaven."
  "proto.backplane.grpc.ExportedTableUpdate"
  "sRequest\032B.io.deephaven.proto.backplane."
  "grpc.ExportedTableUpdateBatchMessage\"\0000\001"
  "B\004H\001P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_table_2eproto_deps[1] = {
  &::descriptor_table_flight_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_table_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_table_2eproto = {
  false, false, 10174, descriptor_table_protodef_table_2eproto, "table.proto", 
  &descriptor_table_table_2eproto_once, descriptor_table_table_2eproto_deps, 1, 26,
  schemas, file_default_instances, TableStruct_table_2eproto::offsets,
  file_level_metadata_table_2eproto, file_level_enum_descriptors_table_2eproto, file_level_service_descriptors_table_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_table_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_table_2eproto);
  return descriptor_table_table_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_table_2eproto(&descriptor_table_table_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinTablesRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_table_2eproto);
  return file_level_enum_descriptors_table_2eproto[0];
}
bool JoinTablesRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JoinTablesRequest_Type JoinTablesRequest::CROSS_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::NATURAL_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::AS_OF_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::REVERSE_AS_OF_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::EXACT_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::LEFT_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::Type_MIN;
constexpr JoinTablesRequest_Type JoinTablesRequest::Type_MAX;
constexpr int JoinTablesRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComboAggregateRequest_AggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_table_2eproto);
  return file_level_enum_descriptors_table_2eproto[1];
}
bool ComboAggregateRequest_AggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::ABS_SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::ARRAY;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::COUNT;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::FIRST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::LAST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MAX;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MEDIAN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::PERCENTILE;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::STD;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::VAR;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::WEIGHTED_AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MAX;
constexpr int ComboAggregateRequest::AggType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDescriptor_SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_table_2eproto);
  return file_level_enum_descriptors_table_2eproto[2];
}
bool SortDescriptor_SortDirection_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SortDescriptor_SortDirection SortDescriptor::UNKNOWN;
constexpr SortDescriptor_SortDirection SortDescriptor::DESCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::ASCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::REVERSE;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MIN;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MAX;
constexpr int SortDescriptor::SortDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterDescription_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_table_2eproto);
  return file_level_enum_descriptors_table_2eproto[3];
}
bool FilterDescription_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FilterDescription_Operation FilterDescription::UNKNOWN;
constexpr FilterDescription_Operation FilterDescription::AND;
constexpr FilterDescription_Operation FilterDescription::OR;
constexpr FilterDescription_Operation FilterDescription::NOT;
constexpr FilterDescription_Operation FilterDescription::LT;
constexpr FilterDescription_Operation FilterDescription::GT;
constexpr FilterDescription_Operation FilterDescription::LTE;
constexpr FilterDescription_Operation FilterDescription::GTE;
constexpr FilterDescription_Operation FilterDescription::EQ;
constexpr FilterDescription_Operation FilterDescription::EQ_ICASE;
constexpr FilterDescription_Operation FilterDescription::NEQ;
constexpr FilterDescription_Operation FilterDescription::NEQ_ICASE;
constexpr FilterDescription_Operation FilterDescription::IN;
constexpr FilterDescription_Operation FilterDescription::IN_ICASE;
constexpr FilterDescription_Operation FilterDescription::NOT_IN;
constexpr FilterDescription_Operation FilterDescription::NOT_IN_ICASE;
constexpr FilterDescription_Operation FilterDescription::IS_NULL;
constexpr FilterDescription_Operation FilterDescription::INVOKE;
constexpr FilterDescription_Operation FilterDescription::LITERAL;
constexpr FilterDescription_Operation FilterDescription::REFERENCE;
constexpr FilterDescription_Operation FilterDescription::CONTAINS;
constexpr FilterDescription_Operation FilterDescription::CONTAINS_ICASE;
constexpr FilterDescription_Operation FilterDescription::MATCHES;
constexpr FilterDescription_Operation FilterDescription::MATCHES_ICASE;
constexpr FilterDescription_Operation FilterDescription::SEARCH;
constexpr FilterDescription_Operation FilterDescription::Operation_MIN;
constexpr FilterDescription_Operation FilterDescription::Operation_MAX;
constexpr int FilterDescription::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TableReference::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& ticket(const TableReference* msg);
};

const ::arrow::flight::protocol::Wicket&
TableReference::_Internal::ticket(const TableReference* msg) {
  return *msg->ref_.ticket_;
}
void TableReference::set_allocated_ticket(::arrow::flight::protocol::Wicket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ref();
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket)->GetArena();
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
    ref_.ticket_ = ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TableReference.ticket)
}
void TableReference::clear_ticket() {
  if (_internal_has_ticket()) {
    if (GetArena() == nullptr) {
      delete ref_.ticket_;
    }
    clear_has_ref();
  }
}
TableReference::TableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}
TableReference::TableReference(const TableReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ref();
  switch (from.ref_case()) {
    case kTicket: {
      _internal_mutable_ticket()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_ticket());
      break;
    }
    case kBatchOffset: {
      _internal_set_batch_offset(from._internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}

void TableReference::SharedCtor() {
clear_has_ref();
}

TableReference::~TableReference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TableReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ref()) {
    clear_ref();
  }
}

void TableReference::ArenaDtor(void* object) {
  TableReference* _this = reinterpret_cast< TableReference* >(object);
  (void)_this;
}
void TableReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableReference::clear_ref() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  switch (ref_case()) {
    case kTicket: {
      if (GetArena() == nullptr) {
        delete ref_.ticket_;
      }
      break;
    }
    case kBatchOffset: {
      // No need to clear
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REF_NOT_SET;
}


void TableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ref();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 batch_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_batch_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket ticket = 1;
  if (_internal_has_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  // sint32 batch_offset = 2;
  if (_internal_has_batch_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_batch_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TableReference)
  return target;
}

size_t TableReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TableReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ref_case()) {
    // .arrow.flight.protocol.Wicket ticket = 1;
    case kTicket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_.ticket_);
      break;
    }
    // sint32 batch_offset = 2;
    case kBatchOffset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  GOOGLE_DCHECK_NE(&from, this);
  const TableReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.TableReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.TableReference)
    MergeFrom(*source);
  }
}

void TableReference::MergeFrom(const TableReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ref_case()) {
    case kTicket: {
      _internal_mutable_ticket()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_ticket());
      break;
    }
    case kBatchOffset: {
      _internal_set_batch_offset(from._internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
}

void TableReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableReference::CopyFrom(const TableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableReference::IsInitialized() const {
  return true;
}

void TableReference::InternalSwap(TableReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ref_, other->ref_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExportedTableCreationResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& result_id(const ExportedTableCreationResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
ExportedTableCreationResponse::_Internal::result_id(const ExportedTableCreationResponse* msg) {
  return *msg->result_id_;
}
ExportedTableCreationResponse::ExportedTableCreationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}
ExportedTableCreationResponse::ExportedTableCreationResponse(const ExportedTableCreationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_info(), 
      GetArena());
  }
  schema_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_schema_header().empty()) {
    schema_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema_header(), 
      GetArena());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&size_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}

void ExportedTableCreationResponse::SharedCtor() {
error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
schema_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(is_static_));
}

ExportedTableCreationResponse::~ExportedTableCreationResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportedTableCreationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
}

void ExportedTableCreationResponse::ArenaDtor(void* object) {
  ExportedTableCreationResponse* _this = reinterpret_cast< ExportedTableCreationResponse* >(object);
  (void)_this;
}
void ExportedTableCreationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedTableCreationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedTableCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmpty();
  schema_header_.ClearToEmpty();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_static_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableCreationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes schema_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_schema_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_static = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 size = 6 [jstype = JS_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedTableCreationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_info = 3;
  if (this->error_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_info().data(), static_cast<int>(this->_internal_error_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_info(), target);
  }

  // bytes schema_header = 4;
  if (this->schema_header().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_schema_header(), target);
  }

  // bool is_static = 5;
  if (this->is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_static(), target);
  }

  // sint64 size = 6 [jstype = JS_STRING];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  return target;
}

size_t ExportedTableCreationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_info = 3;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_info());
  }

  // bytes schema_header = 4;
  if (this->schema_header().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema_header());
  }

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // sint64 size = 6 [jstype = JS_STRING];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_size());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // bool is_static = 5;
  if (this->is_static() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportedTableCreationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportedTableCreationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportedTableCreationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
    MergeFrom(*source);
  }
}

void ExportedTableCreationResponse::MergeFrom(const ExportedTableCreationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {
    _internal_set_error_info(from._internal_error_info());
  }
  if (from.schema_header().size() > 0) {
    _internal_set_schema_header(from._internal_schema_header());
  }
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_result_id());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.is_static() != 0) {
    _internal_set_is_static(from._internal_is_static());
  }
}

void ExportedTableCreationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportedTableCreationResponse::CopyFrom(const ExportedTableCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableCreationResponse::IsInitialized() const {
  return true;
}

void ExportedTableCreationResponse::InternalSwap(ExportedTableCreationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  schema_header_.Swap(&other->schema_header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, is_static_)
      + sizeof(ExportedTableCreationResponse::is_static_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableCreationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExportedTableUpdatesRequest::_Internal {
 public:
};

ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}
ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(const ExportedTableUpdatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}

void ExportedTableUpdatesRequest::SharedCtor() {
}

ExportedTableUpdatesRequest::~ExportedTableUpdatesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportedTableUpdatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExportedTableUpdatesRequest::ArenaDtor(void* object) {
  ExportedTableUpdatesRequest* _this = reinterpret_cast< ExportedTableUpdatesRequest* >(object);
  (void)_this;
}
void ExportedTableUpdatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedTableUpdatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedTableUpdatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableUpdatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedTableUpdatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  return target;
}

size_t ExportedTableUpdatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportedTableUpdatesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportedTableUpdatesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportedTableUpdatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
    MergeFrom(*source);
  }
}

void ExportedTableUpdatesRequest::MergeFrom(const ExportedTableUpdatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExportedTableUpdatesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportedTableUpdatesRequest::CopyFrom(const ExportedTableUpdatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableUpdatesRequest::IsInitialized() const {
  return true;
}

void ExportedTableUpdatesRequest::InternalSwap(ExportedTableUpdatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdatesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExportedTableUpdateMessage::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& export_id(const ExportedTableUpdateMessage* msg);
};

const ::arrow::flight::protocol::Wicket&
ExportedTableUpdateMessage::_Internal::export_id(const ExportedTableUpdateMessage* msg) {
  return *msg->export_id_;
}
void ExportedTableUpdateMessage::clear_export_id() {
  if (GetArena() == nullptr && export_id_ != nullptr) {
    delete export_id_;
  }
  export_id_ = nullptr;
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(const ExportedTableUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_failure_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_failure_message().empty()) {
    update_failure_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_failure_message(), 
      GetArena());
  }
  if (from._internal_has_export_id()) {
    export_id_ = new ::arrow::flight::protocol::Wicket(*from.export_id_);
  } else {
    export_id_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}

void ExportedTableUpdateMessage::SharedCtor() {
update_failure_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&export_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&export_id_)) + sizeof(size_));
}

ExportedTableUpdateMessage::~ExportedTableUpdateMessage() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportedTableUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  update_failure_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete export_id_;
}

void ExportedTableUpdateMessage::ArenaDtor(void* object) {
  ExportedTableUpdateMessage* _this = reinterpret_cast< ExportedTableUpdateMessage* >(object);
  (void)_this;
}
void ExportedTableUpdateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedTableUpdateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedTableUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_failure_message_.ClearToEmpty();
  if (GetArena() == nullptr && export_id_ != nullptr) {
    delete export_id_;
  }
  export_id_ = nullptr;
  size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableUpdateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket export_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string update_failure_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_update_failure_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedTableUpdateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket export_id = 1;
  if (this->has_export_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::export_id(this), target, stream);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_size(), target);
  }

  // string update_failure_message = 3;
  if (this->update_failure_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_failure_message().data(), static_cast<int>(this->_internal_update_failure_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_failure_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  return target;
}

size_t ExportedTableUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string update_failure_message = 3;
  if (this->update_failure_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_failure_message());
  }

  // .arrow.flight.protocol.Wicket export_id = 1;
  if (this->has_export_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *export_id_);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportedTableUpdateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportedTableUpdateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportedTableUpdateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
    MergeFrom(*source);
  }
}

void ExportedTableUpdateMessage::MergeFrom(const ExportedTableUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_failure_message().size() > 0) {
    _internal_set_update_failure_message(from._internal_update_failure_message());
  }
  if (from.has_export_id()) {
    _internal_mutable_export_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_export_id());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void ExportedTableUpdateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportedTableUpdateMessage::CopyFrom(const ExportedTableUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableUpdateMessage::IsInitialized() const {
  return true;
}

void ExportedTableUpdateMessage::InternalSwap(ExportedTableUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  update_failure_message_.Swap(&other->update_failure_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, size_)
      + sizeof(ExportedTableUpdateMessage::size_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, export_id_)>(
          reinterpret_cast<char*>(&export_id_),
          reinterpret_cast<char*>(&other->export_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdateMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExportedTableUpdateBatchMessage::_Internal {
 public:
};

ExportedTableUpdateBatchMessage::ExportedTableUpdateBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
}
ExportedTableUpdateBatchMessage::ExportedTableUpdateBatchMessage(const ExportedTableUpdateBatchMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
}

void ExportedTableUpdateBatchMessage::SharedCtor() {
}

ExportedTableUpdateBatchMessage::~ExportedTableUpdateBatchMessage() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportedTableUpdateBatchMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExportedTableUpdateBatchMessage::ArenaDtor(void* object) {
  ExportedTableUpdateBatchMessage* _this = reinterpret_cast< ExportedTableUpdateBatchMessage* >(object);
  (void)_this;
}
void ExportedTableUpdateBatchMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedTableUpdateBatchMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedTableUpdateBatchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableUpdateBatchMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedTableUpdateBatchMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  return target;
}

size_t ExportedTableUpdateBatchMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportedTableUpdateBatchMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportedTableUpdateBatchMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportedTableUpdateBatchMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
    MergeFrom(*source);
  }
}

void ExportedTableUpdateBatchMessage::MergeFrom(const ExportedTableUpdateBatchMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void ExportedTableUpdateBatchMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportedTableUpdateBatchMessage::CopyFrom(const ExportedTableUpdateBatchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableUpdateBatchMessage::IsInitialized() const {
  return true;
}

void ExportedTableUpdateBatchMessage::InternalSwap(ExportedTableUpdateBatchMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdateBatchMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EmptyTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const EmptyTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
EmptyTableRequest::_Internal::result_id(const EmptyTableRequest* msg) {
  return *msg->result_id_;
}
void EmptyTableRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
EmptyTableRequest::EmptyTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_names_(arena),
  column_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}
EmptyTableRequest::EmptyTableRequest(const EmptyTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_names_(from.column_names_),
      column_types_(from.column_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}

void EmptyTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(size_));
}

EmptyTableRequest::~EmptyTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmptyTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
}

void EmptyTableRequest::ArenaDtor(void* object) {
  EmptyTableRequest* _this = reinterpret_cast< EmptyTableRequest* >(object);
  (void)_this;
}
void EmptyTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  column_types_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string column_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_size(), target);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  // repeated string column_types = 4;
  for (int i = 0, n = this->_internal_column_types_size(); i < n; i++) {
    const auto& s = this->_internal_column_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  return target;
}

size_t EmptyTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // repeated string column_types = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_types_.size());
  for (int i = 0, n = column_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_types_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
    MergeFrom(*source);
  }
}

void EmptyTableRequest::MergeFrom(const EmptyTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  column_types_.MergeFrom(from.column_types_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void EmptyTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyTableRequest::CopyFrom(const EmptyTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyTableRequest::IsInitialized() const {
  return true;
}

void EmptyTableRequest::InternalSwap(EmptyTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  column_types_.InternalSwap(&other->column_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmptyTableRequest, size_)
      + sizeof(EmptyTableRequest::size_)
      - PROTOBUF_FIELD_OFFSET(EmptyTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const TimeTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
TimeTableRequest::_Internal::result_id(const TimeTableRequest* msg) {
  return *msg->result_id_;
}
void TimeTableRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
TimeTableRequest::TimeTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}
TimeTableRequest::TimeTableRequest(const TimeTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  ::memcpy(&start_time_nanos_, &from.start_time_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_nanos_) -
    reinterpret_cast<char*>(&start_time_nanos_)) + sizeof(period_nanos_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}

void TimeTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&period_nanos_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(period_nanos_));
}

TimeTableRequest::~TimeTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
}

void TimeTableRequest::ArenaDtor(void* object) {
  TimeTableRequest* _this = reinterpret_cast< TimeTableRequest* >(object);
  (void)_this;
}
void TimeTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  ::memset(&start_time_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_nanos_) -
      reinterpret_cast<char*>(&start_time_nanos_)) + sizeof(period_nanos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 start_time_nanos = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_time_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 period_nanos = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // sint64 start_time_nanos = 2 [jstype = JS_STRING];
  if (this->start_time_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_start_time_nanos(), target);
  }

  // sint64 period_nanos = 3 [jstype = JS_STRING];
  if (this->period_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_period_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  return target;
}

size_t TimeTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // sint64 start_time_nanos = 2 [jstype = JS_STRING];
  if (this->start_time_nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_start_time_nanos());
  }

  // sint64 period_nanos = 3 [jstype = JS_STRING];
  if (this->period_nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_period_nanos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.TimeTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.TimeTableRequest)
    MergeFrom(*source);
  }
}

void TimeTableRequest::MergeFrom(const TimeTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.start_time_nanos() != 0) {
    _internal_set_start_time_nanos(from._internal_start_time_nanos());
  }
  if (from.period_nanos() != 0) {
    _internal_set_period_nanos(from._internal_period_nanos());
  }
}

void TimeTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTableRequest::CopyFrom(const TimeTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTableRequest::IsInitialized() const {
  return true;
}

void TimeTableRequest::InternalSwap(TimeTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTableRequest, period_nanos_)
      + sizeof(TimeTableRequest::period_nanos_)
      - PROTOBUF_FIELD_OFFSET(TimeTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SelectOrUpdateRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const SelectOrUpdateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SelectOrUpdateRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
SelectOrUpdateRequest::_Internal::result_id(const SelectOrUpdateRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SelectOrUpdateRequest::_Internal::source_id(const SelectOrUpdateRequest* msg) {
  return *msg->source_id_;
}
void SelectOrUpdateRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SelectOrUpdateRequest::SelectOrUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_specs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}
SelectOrUpdateRequest::SelectOrUpdateRequest(const SelectOrUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_specs_(from.column_specs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}

void SelectOrUpdateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

SelectOrUpdateRequest::~SelectOrUpdateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectOrUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void SelectOrUpdateRequest::ArenaDtor(void* object) {
  SelectOrUpdateRequest* _this = reinterpret_cast< SelectOrUpdateRequest* >(object);
  (void)_this;
}
void SelectOrUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectOrUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectOrUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_specs_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectOrUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_specs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_specs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectOrUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string column_specs = 3;
  for (int i = 0, n = this->_internal_column_specs_size(); i < n; i++) {
    const auto& s = this->_internal_column_specs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  return target;
}

size_t SelectOrUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_specs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_specs_.size());
  for (int i = 0, n = column_specs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_specs_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectOrUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectOrUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectOrUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
    MergeFrom(*source);
  }
}

void SelectOrUpdateRequest::MergeFrom(const SelectOrUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_specs_.MergeFrom(from.column_specs_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void SelectOrUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectOrUpdateRequest::CopyFrom(const SelectOrUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectOrUpdateRequest::IsInitialized() const {
  return true;
}

void SelectOrUpdateRequest::InternalSwap(SelectOrUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  column_specs_.InternalSwap(&other->column_specs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, source_id_)
      + sizeof(SelectOrUpdateRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectOrUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SelectDistinctRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const SelectDistinctRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SelectDistinctRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
SelectDistinctRequest::_Internal::result_id(const SelectDistinctRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SelectDistinctRequest::_Internal::source_id(const SelectDistinctRequest* msg) {
  return *msg->source_id_;
}
void SelectDistinctRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SelectDistinctRequest::SelectDistinctRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}
SelectDistinctRequest::SelectDistinctRequest(const SelectDistinctRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_names_(from.column_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}

void SelectDistinctRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

SelectDistinctRequest::~SelectDistinctRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectDistinctRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void SelectDistinctRequest::ArenaDtor(void* object) {
  SelectDistinctRequest* _this = reinterpret_cast< SelectDistinctRequest* >(object);
  (void)_this;
}
void SelectDistinctRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectDistinctRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectDistinctRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectDistinctRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectDistinctRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  return target;
}

size_t SelectDistinctRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectDistinctRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectDistinctRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectDistinctRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
    MergeFrom(*source);
  }
}

void SelectDistinctRequest::MergeFrom(const SelectDistinctRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void SelectDistinctRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectDistinctRequest::CopyFrom(const SelectDistinctRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectDistinctRequest::IsInitialized() const {
  return true;
}

void SelectDistinctRequest::InternalSwap(SelectDistinctRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, source_id_)
      + sizeof(SelectDistinctRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectDistinctRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DropColumnsRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const DropColumnsRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const DropColumnsRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
DropColumnsRequest::_Internal::result_id(const DropColumnsRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
DropColumnsRequest::_Internal::source_id(const DropColumnsRequest* msg) {
  return *msg->source_id_;
}
void DropColumnsRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
DropColumnsRequest::DropColumnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}
DropColumnsRequest::DropColumnsRequest(const DropColumnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_names_(from.column_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}

void DropColumnsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

DropColumnsRequest::~DropColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropColumnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void DropColumnsRequest::ArenaDtor(void* object) {
  DropColumnsRequest* _this = reinterpret_cast< DropColumnsRequest* >(object);
  (void)_this;
}
void DropColumnsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropColumnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropColumnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropColumnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  return target;
}

size_t DropColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropColumnsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropColumnsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropColumnsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
    MergeFrom(*source);
  }
}

void DropColumnsRequest::MergeFrom(const DropColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void DropColumnsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropColumnsRequest::CopyFrom(const DropColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropColumnsRequest::IsInitialized() const {
  return true;
}

void DropColumnsRequest::InternalSwap(DropColumnsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropColumnsRequest, source_id_)
      + sizeof(DropColumnsRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(DropColumnsRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropColumnsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnstructuredFilterTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const UnstructuredFilterTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UnstructuredFilterTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
UnstructuredFilterTableRequest::_Internal::result_id(const UnstructuredFilterTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UnstructuredFilterTableRequest::_Internal::source_id(const UnstructuredFilterTableRequest* msg) {
  return *msg->source_id_;
}
void UnstructuredFilterTableRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(const UnstructuredFilterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}

void UnstructuredFilterTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

UnstructuredFilterTableRequest::~UnstructuredFilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnstructuredFilterTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void UnstructuredFilterTableRequest::ArenaDtor(void* object) {
  UnstructuredFilterTableRequest* _this = reinterpret_cast< UnstructuredFilterTableRequest* >(object);
  (void)_this;
}
void UnstructuredFilterTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnstructuredFilterTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnstructuredFilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnstructuredFilterTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnstructuredFilterTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string filters = 3;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    const auto& s = this->_internal_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  return target;
}

size_t UnstructuredFilterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filters_.size());
  for (int i = 0, n = filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filters_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnstructuredFilterTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnstructuredFilterTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnstructuredFilterTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
    MergeFrom(*source);
  }
}

void UnstructuredFilterTableRequest::MergeFrom(const UnstructuredFilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void UnstructuredFilterTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnstructuredFilterTableRequest::CopyFrom(const UnstructuredFilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnstructuredFilterTableRequest::IsInitialized() const {
  return true;
}

void UnstructuredFilterTableRequest::InternalSwap(UnstructuredFilterTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, source_id_)
      + sizeof(UnstructuredFilterTableRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnstructuredFilterTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeadOrTailRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const HeadOrTailRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const HeadOrTailRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
HeadOrTailRequest::_Internal::result_id(const HeadOrTailRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
HeadOrTailRequest::_Internal::source_id(const HeadOrTailRequest* msg) {
  return *msg->source_id_;
}
void HeadOrTailRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
HeadOrTailRequest::HeadOrTailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}
HeadOrTailRequest::HeadOrTailRequest(const HeadOrTailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  num_rows_ = from.num_rows_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}

void HeadOrTailRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(num_rows_));
}

HeadOrTailRequest::~HeadOrTailRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeadOrTailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void HeadOrTailRequest::ArenaDtor(void* object) {
  HeadOrTailRequest* _this = reinterpret_cast< HeadOrTailRequest* >(object);
  (void)_this;
}
void HeadOrTailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadOrTailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadOrTailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  num_rows_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadOrTailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 num_rows = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadOrTailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  return target;
}

size_t HeadOrTailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_num_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeadOrTailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadOrTailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeadOrTailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
    MergeFrom(*source);
  }
}

void HeadOrTailRequest::MergeFrom(const HeadOrTailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from.num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
}

void HeadOrTailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadOrTailRequest::CopyFrom(const HeadOrTailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrTailRequest::IsInitialized() const {
  return true;
}

void HeadOrTailRequest::InternalSwap(HeadOrTailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, num_rows_)
      + sizeof(HeadOrTailRequest::num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadOrTailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeadOrTailByRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const HeadOrTailByRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const HeadOrTailByRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
HeadOrTailByRequest::_Internal::result_id(const HeadOrTailByRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
HeadOrTailByRequest::_Internal::source_id(const HeadOrTailByRequest* msg) {
  return *msg->source_id_;
}
void HeadOrTailByRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
HeadOrTailByRequest::HeadOrTailByRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  group_by_column_specs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}
HeadOrTailByRequest::HeadOrTailByRequest(const HeadOrTailByRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_by_column_specs_(from.group_by_column_specs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  num_rows_ = from.num_rows_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}

void HeadOrTailByRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(num_rows_));
}

HeadOrTailByRequest::~HeadOrTailByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeadOrTailByRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void HeadOrTailByRequest::ArenaDtor(void* object) {
  HeadOrTailByRequest* _this = reinterpret_cast< HeadOrTailByRequest* >(object);
  (void)_this;
}
void HeadOrTailByRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadOrTailByRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadOrTailByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_by_column_specs_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  num_rows_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadOrTailByRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 num_rows = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string group_by_column_specs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_column_specs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadOrTailByRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_num_rows(), target);
  }

  // repeated string group_by_column_specs = 4;
  for (int i = 0, n = this->_internal_group_by_column_specs_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_column_specs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  return target;
}

size_t HeadOrTailByRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string group_by_column_specs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_column_specs_.size());
  for (int i = 0, n = group_by_column_specs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_column_specs_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_num_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeadOrTailByRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadOrTailByRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeadOrTailByRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
    MergeFrom(*source);
  }
}

void HeadOrTailByRequest::MergeFrom(const HeadOrTailByRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_by_column_specs_.MergeFrom(from.group_by_column_specs_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from.num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
}

void HeadOrTailByRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadOrTailByRequest::CopyFrom(const HeadOrTailByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrTailByRequest::IsInitialized() const {
  return true;
}

void HeadOrTailByRequest::InternalSwap(HeadOrTailByRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_by_column_specs_.InternalSwap(&other->group_by_column_specs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, num_rows_)
      + sizeof(HeadOrTailByRequest::num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadOrTailByRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UngroupRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const UngroupRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UngroupRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
UngroupRequest::_Internal::result_id(const UngroupRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UngroupRequest::_Internal::source_id(const UngroupRequest* msg) {
  return *msg->source_id_;
}
void UngroupRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
UngroupRequest::UngroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_to_ungroup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}
UngroupRequest::UngroupRequest(const UngroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_ungroup_(from.columns_to_ungroup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  null_fill_ = from.null_fill_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}

void UngroupRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&null_fill_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(null_fill_));
}

UngroupRequest::~UngroupRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UngroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void UngroupRequest::ArenaDtor(void* object) {
  UngroupRequest* _this = reinterpret_cast< UngroupRequest* >(object);
  (void)_this;
}
void UngroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UngroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UngroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_ungroup_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  null_fill_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UngroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool null_fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          null_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string columns_to_ungroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_ungroup();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UngroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // bool null_fill = 3;
  if (this->null_fill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_null_fill(), target);
  }

  // repeated string columns_to_ungroup = 4;
  for (int i = 0, n = this->_internal_columns_to_ungroup_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_ungroup(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UngroupRequest)
  return target;
}

size_t UngroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_ungroup = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_ungroup_.size());
  for (int i = 0, n = columns_to_ungroup_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_ungroup_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // bool null_fill = 3;
  if (this->null_fill() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UngroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UngroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UngroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.UngroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.UngroupRequest)
    MergeFrom(*source);
  }
}

void UngroupRequest::MergeFrom(const UngroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_ungroup_.MergeFrom(from.columns_to_ungroup_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from.null_fill() != 0) {
    _internal_set_null_fill(from._internal_null_fill());
  }
}

void UngroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UngroupRequest::CopyFrom(const UngroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupRequest::IsInitialized() const {
  return true;
}

void UngroupRequest::InternalSwap(UngroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  columns_to_ungroup_.InternalSwap(&other->columns_to_ungroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupRequest, null_fill_)
      + sizeof(UngroupRequest::null_fill_)
      - PROTOBUF_FIELD_OFFSET(UngroupRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UngroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MergeTablesRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const MergeTablesRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
MergeTablesRequest::_Internal::result_id(const MergeTablesRequest* msg) {
  return *msg->result_id_;
}
void MergeTablesRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
MergeTablesRequest::MergeTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  source_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}
MergeTablesRequest::MergeTablesRequest(const MergeTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_ids_(from.source_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_column().empty()) {
    key_column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_column(), 
      GetArena());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}

void MergeTablesRequest::SharedCtor() {
key_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_id_ = nullptr;
}

MergeTablesRequest::~MergeTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
}

void MergeTablesRequest::ArenaDtor(void* object) {
  MergeTablesRequest* _this = reinterpret_cast< MergeTablesRequest* >(object);
  (void)_this;
}
void MergeTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ids_.Clear();
  key_column_.ClearToEmpty();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string key_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key_column();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_source_ids(i), target, stream);
  }

  // string key_column = 3;
  if (this->key_column().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_column().data(), static_cast<int>(this->_internal_key_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  return target;
}

size_t MergeTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  total_size += 1UL * this->_internal_source_ids_size();
  for (const auto& msg : this->source_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key_column = 3;
  if (this->key_column().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_column());
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeTablesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeTablesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeTablesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
    MergeFrom(*source);
  }
}

void MergeTablesRequest::MergeFrom(const MergeTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_ids_.MergeFrom(from.source_ids_);
  if (from.key_column().size() > 0) {
    _internal_set_key_column(from._internal_key_column());
  }
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
}

void MergeTablesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeTablesRequest::CopyFrom(const MergeTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTablesRequest::IsInitialized() const {
  return true;
}

void MergeTablesRequest::InternalSwap(MergeTablesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_ids_.InternalSwap(&other->source_ids_);
  key_column_.Swap(&other->key_column_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_id_, other->result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeTablesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SnapshotTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const SnapshotTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const SnapshotTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const SnapshotTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
SnapshotTableRequest::_Internal::result_id(const SnapshotTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotTableRequest::_Internal::left_id(const SnapshotTableRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotTableRequest::_Internal::right_id(const SnapshotTableRequest* msg) {
  return *msg->right_id_;
}
void SnapshotTableRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SnapshotTableRequest::SnapshotTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stamp_columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}
SnapshotTableRequest::SnapshotTableRequest(const SnapshotTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stamp_columns_(from.stamp_columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  do_initial_snapshot_ = from.do_initial_snapshot_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}

void SnapshotTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&do_initial_snapshot_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(do_initial_snapshot_));
}

SnapshotTableRequest::~SnapshotTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnapshotTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void SnapshotTableRequest::ArenaDtor(void* object) {
  SnapshotTableRequest* _this = reinterpret_cast< SnapshotTableRequest* >(object);
  (void)_this;
}
void SnapshotTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapshotTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnapshotTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stamp_columns_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArena() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  do_initial_snapshot_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_initial_snapshot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          do_initial_snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stamp_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stamp_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // bool do_initial_snapshot = 4;
  if (this->do_initial_snapshot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_do_initial_snapshot(), target);
  }

  // repeated string stamp_columns = 5;
  for (int i = 0, n = this->_internal_stamp_columns_size(); i < n; i++) {
    const auto& s = this->_internal_stamp_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  return target;
}

size_t SnapshotTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stamp_columns = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stamp_columns_.size());
  for (int i = 0, n = stamp_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stamp_columns_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  // bool do_initial_snapshot = 4;
  if (this->do_initial_snapshot() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
    MergeFrom(*source);
  }
}

void SnapshotTableRequest::MergeFrom(const SnapshotTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stamp_columns_.MergeFrom(from.stamp_columns_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from.has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  if (from.do_initial_snapshot() != 0) {
    _internal_set_do_initial_snapshot(from._internal_do_initial_snapshot());
  }
}

void SnapshotTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotTableRequest::CopyFrom(const SnapshotTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotTableRequest::IsInitialized() const {
  return true;
}

void SnapshotTableRequest::InternalSwap(SnapshotTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stamp_columns_.InternalSwap(&other->stamp_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, do_initial_snapshot_)
      + sizeof(SnapshotTableRequest::do_initial_snapshot_)
      - PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinTablesRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const JoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const JoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const JoinTablesRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
JoinTablesRequest::_Internal::result_id(const JoinTablesRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
JoinTablesRequest::_Internal::left_id(const JoinTablesRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
JoinTablesRequest::_Internal::right_id(const JoinTablesRequest* msg) {
  return *msg->right_id_;
}
void JoinTablesRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
JoinTablesRequest::JoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_to_match_(arena),
  columns_to_add_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
}
JoinTablesRequest::JoinTablesRequest(const JoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_match_(from.columns_to_match_),
      columns_to_add_(from.columns_to_add_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  join_type_ = from.join_type_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
}

void JoinTablesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(join_type_));
}

JoinTablesRequest::~JoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void JoinTablesRequest::ArenaDtor(void* object) {
  JoinTablesRequest* _this = reinterpret_cast< JoinTablesRequest* >(object);
  (void)_this;
}
void JoinTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_match_.Clear();
  columns_to_add_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArena() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  join_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.JoinTablesRequest.Type join_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_join_type(static_cast<::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  // .io.deephaven.proto.backplane.grpc.JoinTablesRequest.Type join_type = 6;
  if (this->join_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_join_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  return target;
}

size_t JoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_match_.size());
  for (int i = 0, n = columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_add_.size());
  for (int i = 0, n = columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_add_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  // .io.deephaven.proto.backplane.grpc.JoinTablesRequest.Type join_type = 6;
  if (this->join_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_join_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinTablesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinTablesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinTablesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
    MergeFrom(*source);
  }
}

void JoinTablesRequest::MergeFrom(const JoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_match_.MergeFrom(from.columns_to_match_);
  columns_to_add_.MergeFrom(from.columns_to_add_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from.has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  if (from.join_type() != 0) {
    _internal_set_join_type(from._internal_join_type());
  }
}

void JoinTablesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTablesRequest::CopyFrom(const JoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTablesRequest::IsInitialized() const {
  return true;
}

void JoinTablesRequest::InternalSwap(JoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  columns_to_match_.InternalSwap(&other->columns_to_match_);
  columns_to_add_.InternalSwap(&other->columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinTablesRequest, join_type_)
      + sizeof(JoinTablesRequest::join_type_)
      - PROTOBUF_FIELD_OFFSET(JoinTablesRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinTablesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComboAggregateRequest_Aggregate::_Internal {
 public:
};

ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_pairs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}
ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(const ComboAggregateRequest_Aggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_pairs_(from.match_pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&type_)) + sizeof(percentile_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}

void ComboAggregateRequest_Aggregate::SharedCtor() {
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&type_)) + sizeof(percentile_));
}

ComboAggregateRequest_Aggregate::~ComboAggregateRequest_Aggregate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComboAggregateRequest_Aggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComboAggregateRequest_Aggregate::ArenaDtor(void* object) {
  ComboAggregateRequest_Aggregate* _this = reinterpret_cast< ComboAggregateRequest_Aggregate* >(object);
  (void)_this;
}
void ComboAggregateRequest_Aggregate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComboAggregateRequest_Aggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComboAggregateRequest_Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_pairs_.Clear();
  column_name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentile_) -
      reinterpret_cast<char*>(&type_)) + sizeof(percentile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboAggregateRequest_Aggregate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string match_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_pairs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double percentile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool avg_median = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avg_median_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboAggregateRequest_Aggregate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string match_pairs = 2;
  for (int i = 0, n = this->_internal_match_pairs_size(); i < n; i++) {
    const auto& s = this->_internal_match_pairs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs");
    target = stream->WriteString(2, s, target);
  }

  // string column_name = 3;
  if (this->column_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_column_name(), target);
  }

  // double percentile = 4;
  if (!(this->percentile() <= 0 && this->percentile() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_percentile(), target);
  }

  // bool avg_median = 5;
  if (this->avg_median() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_avg_median(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  return target;
}

size_t ComboAggregateRequest_Aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_pairs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(match_pairs_.size());
  for (int i = 0, n = match_pairs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      match_pairs_.Get(i));
  }

  // string column_name = 3;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool avg_median = 5;
  if (this->avg_median() != 0) {
    total_size += 1 + 1;
  }

  // double percentile = 4;
  if (!(this->percentile() <= 0 && this->percentile() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComboAggregateRequest_Aggregate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  const ComboAggregateRequest_Aggregate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComboAggregateRequest_Aggregate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
    MergeFrom(*source);
  }
}

void ComboAggregateRequest_Aggregate::MergeFrom(const ComboAggregateRequest_Aggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_pairs_.MergeFrom(from.match_pairs_);
  if (from.column_name().size() > 0) {
    _internal_set_column_name(from._internal_column_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.avg_median() != 0) {
    _internal_set_avg_median(from._internal_avg_median());
  }
  if (!(from.percentile() <= 0 && from.percentile() >= 0)) {
    _internal_set_percentile(from._internal_percentile());
  }
}

void ComboAggregateRequest_Aggregate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComboAggregateRequest_Aggregate::CopyFrom(const ComboAggregateRequest_Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboAggregateRequest_Aggregate::IsInitialized() const {
  return true;
}

void ComboAggregateRequest_Aggregate::InternalSwap(ComboAggregateRequest_Aggregate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_pairs_.InternalSwap(&other->match_pairs_);
  column_name_.Swap(&other->column_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, percentile_)
      + sizeof(ComboAggregateRequest_Aggregate::percentile_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboAggregateRequest_Aggregate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComboAggregateRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const ComboAggregateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const ComboAggregateRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
ComboAggregateRequest::_Internal::result_id(const ComboAggregateRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ComboAggregateRequest::_Internal::source_id(const ComboAggregateRequest* msg) {
  return *msg->source_id_;
}
void ComboAggregateRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
ComboAggregateRequest::ComboAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  aggregates_(arena),
  group_by_columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}
ComboAggregateRequest::ComboAggregateRequest(const ComboAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aggregates_(from.aggregates_),
      group_by_columns_(from.group_by_columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  force_combo_ = from.force_combo_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}

void ComboAggregateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_combo_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(force_combo_));
}

ComboAggregateRequest::~ComboAggregateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComboAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void ComboAggregateRequest::ArenaDtor(void* object) {
  ComboAggregateRequest* _this = reinterpret_cast< ComboAggregateRequest* >(object);
  (void)_this;
}
void ComboAggregateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComboAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComboAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregates_.Clear();
  group_by_columns_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  force_combo_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string group_by_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool force_combo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          force_combo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboAggregateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aggregates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_aggregates(i), target, stream);
  }

  // repeated string group_by_columns = 4;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns");
    target = stream->WriteString(4, s, target);
  }

  // bool force_combo = 5;
  if (this->force_combo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_force_combo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  return target;
}

size_t ComboAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  total_size += 1UL * this->_internal_aggregates_size();
  for (const auto& msg : this->aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by_columns = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_columns_.size());
  for (int i = 0, n = group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_columns_.Get(i));
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // bool force_combo = 5;
  if (this->force_combo() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComboAggregateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ComboAggregateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComboAggregateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
    MergeFrom(*source);
  }
}

void ComboAggregateRequest::MergeFrom(const ComboAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aggregates_.MergeFrom(from.aggregates_);
  group_by_columns_.MergeFrom(from.group_by_columns_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from.force_combo() != 0) {
    _internal_set_force_combo(from._internal_force_combo());
  }
}

void ComboAggregateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComboAggregateRequest::CopyFrom(const ComboAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboAggregateRequest::IsInitialized() const {
  return true;
}

void ComboAggregateRequest::InternalSwap(ComboAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  aggregates_.InternalSwap(&other->aggregates_);
  group_by_columns_.InternalSwap(&other->group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, force_combo_)
      + sizeof(ComboAggregateRequest::force_combo_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboAggregateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SortDescriptor::_Internal {
 public:
};

SortDescriptor::SortDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}
SortDescriptor::SortDescriptor(const SortDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArena());
  }
  ::memcpy(&is_absolute_, &from.is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&is_absolute_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}

void SortDescriptor::SharedCtor() {
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_absolute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&is_absolute_)) + sizeof(direction_));
}

SortDescriptor::~SortDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SortDescriptor::ArenaDtor(void* object) {
  SortDescriptor* _this = reinterpret_cast< SortDescriptor* >(object);
  (void)_this;
}
void SortDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.ClearToEmpty();
  ::memset(&is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&is_absolute_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  // bool is_absolute = 2;
  if (this->is_absolute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_absolute(), target);
  }

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortDescriptor)
  return target;
}

size_t SortDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // bool is_absolute = 2;
  if (this->is_absolute() != 0) {
    total_size += 1 + 1;
  }

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const SortDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.SortDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.SortDescriptor)
    MergeFrom(*source);
  }
}

void SortDescriptor::MergeFrom(const SortDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.column_name().size() > 0) {
    _internal_set_column_name(from._internal_column_name());
  }
  if (from.is_absolute() != 0) {
    _internal_set_is_absolute(from._internal_is_absolute());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void SortDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortDescriptor::CopyFrom(const SortDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortDescriptor::IsInitialized() const {
  return true;
}

void SortDescriptor::InternalSwap(SortDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  column_name_.Swap(&other->column_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortDescriptor, direction_)
      + sizeof(SortDescriptor::direction_)
      - PROTOBUF_FIELD_OFFSET(SortDescriptor, is_absolute_)>(
          reinterpret_cast<char*>(&is_absolute_),
          reinterpret_cast<char*>(&other->is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SortTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const SortTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SortTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
SortTableRequest::_Internal::result_id(const SortTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SortTableRequest::_Internal::source_id(const SortTableRequest* msg) {
  return *msg->source_id_;
}
void SortTableRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SortTableRequest::SortTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sorts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}
SortTableRequest::SortTableRequest(const SortTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}

void SortTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

SortTableRequest::~SortTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void SortTableRequest::ArenaDtor(void* object) {
  SortTableRequest* _this = reinterpret_cast< SortTableRequest* >(object);
  (void)_this;
}
void SortTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorts_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortTableRequest)
  return target;
}

size_t SortTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SortTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.SortTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.SortTableRequest)
    MergeFrom(*source);
  }
}

void SortTableRequest::MergeFrom(const SortTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorts_.MergeFrom(from.sorts_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void SortTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortTableRequest::CopyFrom(const SortTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortTableRequest::IsInitialized() const {
  return true;
}

void SortTableRequest::InternalSwap(SortTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortTableRequest, source_id_)
      + sizeof(SortTableRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(SortTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterTableRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const FilterTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FilterTableRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
FilterTableRequest::_Internal::result_id(const FilterTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
FilterTableRequest::_Internal::source_id(const FilterTableRequest* msg) {
  return *msg->source_id_;
}
void FilterTableRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FilterTableRequest::FilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}
FilterTableRequest::FilterTableRequest(const FilterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}

void FilterTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

FilterTableRequest::~FilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void FilterTableRequest::ArenaDtor(void* object) {
  FilterTableRequest* _this = reinterpret_cast< FilterTableRequest* >(object);
  (void)_this;
}
void FilterTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.FilterDescription filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.FilterDescription filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  return target;
}

size_t FilterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.FilterDescription filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.FilterTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.FilterTableRequest)
    MergeFrom(*source);
  }
}

void FilterTableRequest::MergeFrom(const FilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void FilterTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterTableRequest::CopyFrom(const FilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterTableRequest::IsInitialized() const {
  return true;
}

void FilterTableRequest::InternalSwap(FilterTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterTableRequest, source_id_)
      + sizeof(FilterTableRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(FilterTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterDescription::_Internal {
 public:
};

FilterDescription::FilterDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FilterDescription)
}
FilterDescription::FilterDescription(const FilterDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_op_ = from.filter_op_;
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kNanoTimeValue: {
      _internal_set_nano_time_value(from._internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FilterDescription)
}

void FilterDescription::SharedCtor() {
filter_op_ = 0;
clear_has_value();
}

FilterDescription::~FilterDescription() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FilterDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void FilterDescription::ArenaDtor(void* object) {
  FilterDescription* _this = reinterpret_cast< FilterDescription* >(object);
  (void)_this;
}
void FilterDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterDescription::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kNanoTimeValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void FilterDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  filter_op_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.FilterDescription.Operation filter_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filter_op(static_cast<::io::deephaven::proto::backplane::grpc::FilterDescription_Operation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.FilterDescription children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string string_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.FilterDescription.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 long_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 nano_time_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_nano_time_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.FilterDescription.Operation filter_op = 1;
  if (this->filter_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filter_op(), target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.FilterDescription children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_children(i), target, stream);
  }

  // string string_value = 3;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.FilterDescription.string_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_value(), target);
  }

  // double double_value = 4;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // bool bool_value = 5;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bool_value(), target);
  }

  // sint64 long_value = 6;
  if (_internal_has_long_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_long_value(), target);
  }

  // sint64 nano_time_value = 7;
  if (_internal_has_nano_time_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_nano_time_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FilterDescription)
  return target;
}

size_t FilterDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.FilterDescription children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.FilterDescription.Operation filter_op = 1;
  if (this->filter_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter_op());
  }

  switch (value_case()) {
    // string string_value = 3;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 5;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // sint64 long_value = 6;
    case kLongValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_long_value());
      break;
    }
    // sint64 nano_time_value = 7;
    case kNanoTimeValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.FilterDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.FilterDescription)
    MergeFrom(*source);
  }
}

void FilterDescription::MergeFrom(const FilterDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.filter_op() != 0) {
    _internal_set_filter_op(from._internal_filter_op());
  }
  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kNanoTimeValue: {
      _internal_set_nano_time_value(from._internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void FilterDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterDescription::CopyFrom(const FilterDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FilterDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterDescription::IsInitialized() const {
  return true;
}

void FilterDescription::InternalSwap(FilterDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  swap(filter_op_, other->filter_op_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FlattenRequest::_Internal {
 public:
  static const ::arrow::flight::protocol::Wicket& result_id(const FlattenRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FlattenRequest* msg);
};

const ::arrow::flight::protocol::Wicket&
FlattenRequest::_Internal::result_id(const FlattenRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
FlattenRequest::_Internal::source_id(const FlattenRequest* msg) {
  return *msg->source_id_;
}
void FlattenRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FlattenRequest::FlattenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}
FlattenRequest::FlattenRequest(const FlattenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::arrow::flight::protocol::Wicket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}

void FlattenRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

FlattenRequest::~FlattenRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlattenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void FlattenRequest::ArenaDtor(void* object) {
  FlattenRequest* _this = reinterpret_cast< FlattenRequest* >(object);
  (void)_this;
}
void FlattenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlattenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlattenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlattenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Wicket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlattenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FlattenRequest)
  return target;
}

size_t FlattenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.protocol.Wicket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlattenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlattenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlattenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.FlattenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.FlattenRequest)
    MergeFrom(*source);
  }
}

void FlattenRequest::MergeFrom(const FlattenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_id()) {
    _internal_mutable_result_id()->::arrow::flight::protocol::Wicket::MergeFrom(from._internal_result_id());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
}

void FlattenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenRequest::CopyFrom(const FlattenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenRequest::IsInitialized() const {
  return true;
}

void FlattenRequest::InternalSwap(FlattenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlattenRequest, source_id_)
      + sizeof(FlattenRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(FlattenRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchTableRequest_Operation::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& empty_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& time_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& drop_columns(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& lazy_update(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& view(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update_view(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& select(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& select_distinct(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& filter(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& unstructured_filter(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SortTableRequest& sort(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& head(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& tail(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& head_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& tail_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UngroupRequest& ungroup(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& merge(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::JoinTablesRequest& join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& combo_aggregate(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& snapshot(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FlattenRequest& flatten(const BatchTableRequest_Operation* msg);
};

const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest&
BatchTableRequest_Operation::_Internal::empty_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.empty_table_;
}
const ::io::deephaven::proto::backplane::grpc::TimeTableRequest&
BatchTableRequest_Operation::_Internal::time_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.time_table_;
}
const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest&
BatchTableRequest_Operation::_Internal::drop_columns(const BatchTableRequest_Operation* msg) {
  return *msg->op_.drop_columns_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::update(const BatchTableRequest_Operation* msg) {
  return *msg->op_.update_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::lazy_update(const BatchTableRequest_Operation* msg) {
  return *msg->op_.lazy_update_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::view(const BatchTableRequest_Operation* msg) {
  return *msg->op_.view_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::update_view(const BatchTableRequest_Operation* msg) {
  return *msg->op_.update_view_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::select(const BatchTableRequest_Operation* msg) {
  return *msg->op_.select_;
}
const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest&
BatchTableRequest_Operation::_Internal::select_distinct(const BatchTableRequest_Operation* msg) {
  return *msg->op_.select_distinct_;
}
const ::io::deephaven::proto::backplane::grpc::FilterTableRequest&
BatchTableRequest_Operation::_Internal::filter(const BatchTableRequest_Operation* msg) {
  return *msg->op_.filter_;
}
const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest&
BatchTableRequest_Operation::_Internal::unstructured_filter(const BatchTableRequest_Operation* msg) {
  return *msg->op_.unstructured_filter_;
}
const ::io::deephaven::proto::backplane::grpc::SortTableRequest&
BatchTableRequest_Operation::_Internal::sort(const BatchTableRequest_Operation* msg) {
  return *msg->op_.sort_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&
BatchTableRequest_Operation::_Internal::head(const BatchTableRequest_Operation* msg) {
  return *msg->op_.head_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&
BatchTableRequest_Operation::_Internal::tail(const BatchTableRequest_Operation* msg) {
  return *msg->op_.tail_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&
BatchTableRequest_Operation::_Internal::head_by(const BatchTableRequest_Operation* msg) {
  return *msg->op_.head_by_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&
BatchTableRequest_Operation::_Internal::tail_by(const BatchTableRequest_Operation* msg) {
  return *msg->op_.tail_by_;
}
const ::io::deephaven::proto::backplane::grpc::UngroupRequest&
BatchTableRequest_Operation::_Internal::ungroup(const BatchTableRequest_Operation* msg) {
  return *msg->op_.ungroup_;
}
const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest&
BatchTableRequest_Operation::_Internal::merge(const BatchTableRequest_Operation* msg) {
  return *msg->op_.merge_;
}
const ::io::deephaven::proto::backplane::grpc::JoinTablesRequest&
BatchTableRequest_Operation::_Internal::join(const BatchTableRequest_Operation* msg) {
  return *msg->op_.join_;
}
const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest&
BatchTableRequest_Operation::_Internal::combo_aggregate(const BatchTableRequest_Operation* msg) {
  return *msg->op_.combo_aggregate_;
}
const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest&
BatchTableRequest_Operation::_Internal::snapshot(const BatchTableRequest_Operation* msg) {
  return *msg->op_.snapshot_;
}
const ::io::deephaven::proto::backplane::grpc::FlattenRequest&
BatchTableRequest_Operation::_Internal::flatten(const BatchTableRequest_Operation* msg) {
  return *msg->op_.flatten_;
}
void BatchTableRequest_Operation::set_allocated_empty_table(::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (empty_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_table);
    if (message_arena != submessage_arena) {
      empty_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_table, submessage_arena);
    }
    set_has_empty_table();
    op_.empty_table_ = empty_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
}
void BatchTableRequest_Operation::set_allocated_time_table(::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (time_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_table);
    if (message_arena != submessage_arena) {
      time_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_table, submessage_arena);
    }
    set_has_time_table();
    op_.time_table_ = time_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
}
void BatchTableRequest_Operation::set_allocated_drop_columns(::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (drop_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drop_columns);
    if (message_arena != submessage_arena) {
      drop_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_columns, submessage_arena);
    }
    set_has_drop_columns();
    op_.drop_columns_ = drop_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
}
void BatchTableRequest_Operation::set_allocated_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    op_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
}
void BatchTableRequest_Operation::set_allocated_lazy_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (lazy_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lazy_update);
    if (message_arena != submessage_arena) {
      lazy_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lazy_update, submessage_arena);
    }
    set_has_lazy_update();
    op_.lazy_update_ = lazy_update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
}
void BatchTableRequest_Operation::set_allocated_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    set_has_view();
    op_.view_ = view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
}
void BatchTableRequest_Operation::set_allocated_update_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (update_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_view);
    if (message_arena != submessage_arena) {
      update_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_view, submessage_arena);
    }
    set_has_update_view();
    op_.update_view_ = update_view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
}
void BatchTableRequest_Operation::set_allocated_select(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    op_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
}
void BatchTableRequest_Operation::set_allocated_select_distinct(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (select_distinct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_distinct);
    if (message_arena != submessage_arena) {
      select_distinct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_distinct, submessage_arena);
    }
    set_has_select_distinct();
    op_.select_distinct_ = select_distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
}
void BatchTableRequest_Operation::set_allocated_filter(::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    op_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
}
void BatchTableRequest_Operation::set_allocated_unstructured_filter(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (unstructured_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unstructured_filter);
    if (message_arena != submessage_arena) {
      unstructured_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unstructured_filter, submessage_arena);
    }
    set_has_unstructured_filter();
    op_.unstructured_filter_ = unstructured_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
}
void BatchTableRequest_Operation::set_allocated_sort(::io::deephaven::proto::backplane::grpc::SortTableRequest* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    op_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
}
void BatchTableRequest_Operation::set_allocated_head(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    set_has_head();
    op_.head_ = head;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
}
void BatchTableRequest_Operation::set_allocated_tail(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tail);
    if (message_arena != submessage_arena) {
      tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail, submessage_arena);
    }
    set_has_tail();
    op_.tail_ = tail;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
}
void BatchTableRequest_Operation::set_allocated_head_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (head_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(head_by);
    if (message_arena != submessage_arena) {
      head_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_by, submessage_arena);
    }
    set_has_head_by();
    op_.head_by_ = head_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
}
void BatchTableRequest_Operation::set_allocated_tail_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (tail_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tail_by);
    if (message_arena != submessage_arena) {
      tail_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail_by, submessage_arena);
    }
    set_has_tail_by();
    op_.tail_by_ = tail_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
}
void BatchTableRequest_Operation::set_allocated_ungroup(::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (ungroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ungroup);
    if (message_arena != submessage_arena) {
      ungroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ungroup, submessage_arena);
    }
    set_has_ungroup();
    op_.ungroup_ = ungroup;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
}
void BatchTableRequest_Operation::set_allocated_merge(::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (merge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(merge);
    if (message_arena != submessage_arena) {
      merge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge, submessage_arena);
    }
    set_has_merge();
    op_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
}
void BatchTableRequest_Operation::set_allocated_join(::io::deephaven::proto::backplane::grpc::JoinTablesRequest* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    op_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.join)
}
void BatchTableRequest_Operation::set_allocated_combo_aggregate(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (combo_aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(combo_aggregate);
    if (message_arena != submessage_arena) {
      combo_aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combo_aggregate, submessage_arena);
    }
    set_has_combo_aggregate();
    op_.combo_aggregate_ = combo_aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
}
void BatchTableRequest_Operation::set_allocated_snapshot(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    op_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
}
void BatchTableRequest_Operation::set_allocated_flatten(::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (flatten) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flatten);
    if (message_arena != submessage_arena) {
      flatten = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten, submessage_arena);
    }
    set_has_flatten();
    op_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(const BatchTableRequest_Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kEmptyTable: {
      _internal_mutable_empty_table()->::io::deephaven::proto::backplane::grpc::EmptyTableRequest::MergeFrom(from._internal_empty_table());
      break;
    }
    case kTimeTable: {
      _internal_mutable_time_table()->::io::deephaven::proto::backplane::grpc::TimeTableRequest::MergeFrom(from._internal_time_table());
      break;
    }
    case kDropColumns: {
      _internal_mutable_drop_columns()->::io::deephaven::proto::backplane::grpc::DropColumnsRequest::MergeFrom(from._internal_drop_columns());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update());
      break;
    }
    case kLazyUpdate: {
      _internal_mutable_lazy_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_lazy_update());
      break;
    }
    case kView: {
      _internal_mutable_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_view());
      break;
    }
    case kUpdateView: {
      _internal_mutable_update_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update_view());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_select());
      break;
    }
    case kSelectDistinct: {
      _internal_mutable_select_distinct()->::io::deephaven::proto::backplane::grpc::SelectDistinctRequest::MergeFrom(from._internal_select_distinct());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::FilterTableRequest::MergeFrom(from._internal_filter());
      break;
    }
    case kUnstructuredFilter: {
      _internal_mutable_unstructured_filter()->::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest::MergeFrom(from._internal_unstructured_filter());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::io::deephaven::proto::backplane::grpc::SortTableRequest::MergeFrom(from._internal_sort());
      break;
    }
    case kHead: {
      _internal_mutable_head()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_head());
      break;
    }
    case kTail: {
      _internal_mutable_tail()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_tail());
      break;
    }
    case kHeadBy: {
      _internal_mutable_head_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_head_by());
      break;
    }
    case kTailBy: {
      _internal_mutable_tail_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_tail_by());
      break;
    }
    case kUngroup: {
      _internal_mutable_ungroup()->::io::deephaven::proto::backplane::grpc::UngroupRequest::MergeFrom(from._internal_ungroup());
      break;
    }
    case kMerge: {
      _internal_mutable_merge()->::io::deephaven::proto::backplane::grpc::MergeTablesRequest::MergeFrom(from._internal_merge());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::io::deephaven::proto::backplane::grpc::JoinTablesRequest::MergeFrom(from._internal_join());
      break;
    }
    case kComboAggregate: {
      _internal_mutable_combo_aggregate()->::io::deephaven::proto::backplane::grpc::ComboAggregateRequest::MergeFrom(from._internal_combo_aggregate());
      break;
    }
    case kSnapshot: {
      _internal_mutable_snapshot()->::io::deephaven::proto::backplane::grpc::SnapshotTableRequest::MergeFrom(from._internal_snapshot());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::io::deephaven::proto::backplane::grpc::FlattenRequest::MergeFrom(from._internal_flatten());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}

void BatchTableRequest_Operation::SharedCtor() {
clear_has_op();
}

BatchTableRequest_Operation::~BatchTableRequest_Operation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchTableRequest_Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_op()) {
    clear_op();
  }
}

void BatchTableRequest_Operation::ArenaDtor(void* object) {
  BatchTableRequest_Operation* _this = reinterpret_cast< BatchTableRequest_Operation* >(object);
  (void)_this;
}
void BatchTableRequest_Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchTableRequest_Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchTableRequest_Operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  switch (op_case()) {
    case kEmptyTable: {
      if (GetArena() == nullptr) {
        delete op_.empty_table_;
      }
      break;
    }
    case kTimeTable: {
      if (GetArena() == nullptr) {
        delete op_.time_table_;
      }
      break;
    }
    case kDropColumns: {
      if (GetArena() == nullptr) {
        delete op_.drop_columns_;
      }
      break;
    }
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete op_.update_;
      }
      break;
    }
    case kLazyUpdate: {
      if (GetArena() == nullptr) {
        delete op_.lazy_update_;
      }
      break;
    }
    case kView: {
      if (GetArena() == nullptr) {
        delete op_.view_;
      }
      break;
    }
    case kUpdateView: {
      if (GetArena() == nullptr) {
        delete op_.update_view_;
      }
      break;
    }
    case kSelect: {
      if (GetArena() == nullptr) {
        delete op_.select_;
      }
      break;
    }
    case kSelectDistinct: {
      if (GetArena() == nullptr) {
        delete op_.select_distinct_;
      }
      break;
    }
    case kFilter: {
      if (GetArena() == nullptr) {
        delete op_.filter_;
      }
      break;
    }
    case kUnstructuredFilter: {
      if (GetArena() == nullptr) {
        delete op_.unstructured_filter_;
      }
      break;
    }
    case kSort: {
      if (GetArena() == nullptr) {
        delete op_.sort_;
      }
      break;
    }
    case kHead: {
      if (GetArena() == nullptr) {
        delete op_.head_;
      }
      break;
    }
    case kTail: {
      if (GetArena() == nullptr) {
        delete op_.tail_;
      }
      break;
    }
    case kHeadBy: {
      if (GetArena() == nullptr) {
        delete op_.head_by_;
      }
      break;
    }
    case kTailBy: {
      if (GetArena() == nullptr) {
        delete op_.tail_by_;
      }
      break;
    }
    case kUngroup: {
      if (GetArena() == nullptr) {
        delete op_.ungroup_;
      }
      break;
    }
    case kMerge: {
      if (GetArena() == nullptr) {
        delete op_.merge_;
      }
      break;
    }
    case kJoin: {
      if (GetArena() == nullptr) {
        delete op_.join_;
      }
      break;
    }
    case kComboAggregate: {
      if (GetArena() == nullptr) {
        delete op_.combo_aggregate_;
      }
      break;
    }
    case kSnapshot: {
      if (GetArena() == nullptr) {
        delete op_.snapshot_;
      }
      break;
    }
    case kFlatten: {
      if (GetArena() == nullptr) {
        delete op_.flatten_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void BatchTableRequest_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTableRequest_Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lazy_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_distinct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_unstructured_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ungroup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.JoinTablesRequest join = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_combo_aggregate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchTableRequest_Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
  if (_internal_has_empty_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::empty_table(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
  if (_internal_has_time_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_table(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
  if (_internal_has_drop_columns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::drop_columns(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
  if (_internal_has_lazy_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lazy_update(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
  if (_internal_has_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::view(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
  if (_internal_has_update_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::update_view(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
  if (_internal_has_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::select(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
  if (_internal_has_select_distinct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::select_distinct(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::filter(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
  if (_internal_has_unstructured_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::unstructured_filter(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
  if (_internal_has_sort()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sort(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
  if (_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::head(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
  if (_internal_has_tail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tail(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
  if (_internal_has_head_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::head_by(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
  if (_internal_has_tail_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tail_by(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
  if (_internal_has_ungroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::ungroup(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
  if (_internal_has_merge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::merge(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.JoinTablesRequest join = 19;
  if (_internal_has_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::join(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 20;
  if (_internal_has_combo_aggregate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::combo_aggregate(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 21;
  if (_internal_has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::snapshot(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 22;
  if (_internal_has_flatten()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::flatten(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  return target;
}

size_t BatchTableRequest_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (op_case()) {
    // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
    case kEmptyTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.empty_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
    case kTimeTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.time_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
    case kDropColumns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.drop_columns_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.update_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
    case kLazyUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.lazy_update_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
    case kView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.view_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
    case kUpdateView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.update_view_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
    case kSelect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.select_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
    case kSelectDistinct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.select_distinct_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.filter_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
    case kUnstructuredFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.unstructured_filter_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.sort_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
    case kHead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.head_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
    case kTail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.tail_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
    case kHeadBy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.head_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
    case kTailBy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.tail_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
    case kUngroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.ungroup_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
    case kMerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.merge_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.JoinTablesRequest join = 19;
    case kJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 20;
    case kComboAggregate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.combo_aggregate_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 21;
    case kSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.snapshot_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 22;
    case kFlatten: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.flatten_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchTableRequest_Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchTableRequest_Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchTableRequest_Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
    MergeFrom(*source);
  }
}

void BatchTableRequest_Operation::MergeFrom(const BatchTableRequest_Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kEmptyTable: {
      _internal_mutable_empty_table()->::io::deephaven::proto::backplane::grpc::EmptyTableRequest::MergeFrom(from._internal_empty_table());
      break;
    }
    case kTimeTable: {
      _internal_mutable_time_table()->::io::deephaven::proto::backplane::grpc::TimeTableRequest::MergeFrom(from._internal_time_table());
      break;
    }
    case kDropColumns: {
      _internal_mutable_drop_columns()->::io::deephaven::proto::backplane::grpc::DropColumnsRequest::MergeFrom(from._internal_drop_columns());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update());
      break;
    }
    case kLazyUpdate: {
      _internal_mutable_lazy_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_lazy_update());
      break;
    }
    case kView: {
      _internal_mutable_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_view());
      break;
    }
    case kUpdateView: {
      _internal_mutable_update_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update_view());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_select());
      break;
    }
    case kSelectDistinct: {
      _internal_mutable_select_distinct()->::io::deephaven::proto::backplane::grpc::SelectDistinctRequest::MergeFrom(from._internal_select_distinct());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::FilterTableRequest::MergeFrom(from._internal_filter());
      break;
    }
    case kUnstructuredFilter: {
      _internal_mutable_unstructured_filter()->::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest::MergeFrom(from._internal_unstructured_filter());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::io::deephaven::proto::backplane::grpc::SortTableRequest::MergeFrom(from._internal_sort());
      break;
    }
    case kHead: {
      _internal_mutable_head()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_head());
      break;
    }
    case kTail: {
      _internal_mutable_tail()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_tail());
      break;
    }
    case kHeadBy: {
      _internal_mutable_head_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_head_by());
      break;
    }
    case kTailBy: {
      _internal_mutable_tail_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_tail_by());
      break;
    }
    case kUngroup: {
      _internal_mutable_ungroup()->::io::deephaven::proto::backplane::grpc::UngroupRequest::MergeFrom(from._internal_ungroup());
      break;
    }
    case kMerge: {
      _internal_mutable_merge()->::io::deephaven::proto::backplane::grpc::MergeTablesRequest::MergeFrom(from._internal_merge());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::io::deephaven::proto::backplane::grpc::JoinTablesRequest::MergeFrom(from._internal_join());
      break;
    }
    case kComboAggregate: {
      _internal_mutable_combo_aggregate()->::io::deephaven::proto::backplane::grpc::ComboAggregateRequest::MergeFrom(from._internal_combo_aggregate());
      break;
    }
    case kSnapshot: {
      _internal_mutable_snapshot()->::io::deephaven::proto::backplane::grpc::SnapshotTableRequest::MergeFrom(from._internal_snapshot());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::io::deephaven::proto::backplane::grpc::FlattenRequest::MergeFrom(from._internal_flatten());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
}

void BatchTableRequest_Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTableRequest_Operation::CopyFrom(const BatchTableRequest_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTableRequest_Operation::IsInitialized() const {
  return true;
}

void BatchTableRequest_Operation::InternalSwap(BatchTableRequest_Operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTableRequest_Operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchTableRequest::_Internal {
 public:
};

BatchTableRequest::BatchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}
BatchTableRequest::BatchTableRequest(const BatchTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}

void BatchTableRequest::SharedCtor() {
}

BatchTableRequest::~BatchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatchTableRequest::ArenaDtor(void* object) {
  BatchTableRequest* _this = reinterpret_cast< BatchTableRequest* >(object);
  (void)_this;
}
void BatchTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  return target;
}

size_t BatchTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.grpc.BatchTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.grpc.BatchTableRequest)
    MergeFrom(*source);
  }
}

void BatchTableRequest::MergeFrom(const BatchTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
}

void BatchTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTableRequest::CopyFrom(const BatchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTableRequest::IsInitialized() const {
  return true;
}

void BatchTableRequest::InternalSwap(BatchTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TableReference* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TableReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TableReference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TimeTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UngroupRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SortDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SortDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SortTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FilterTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FilterDescription* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FilterDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FilterDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FlattenRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BatchTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BatchTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BatchTableRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
