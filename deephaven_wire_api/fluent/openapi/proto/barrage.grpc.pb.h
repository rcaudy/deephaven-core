// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: barrage.proto
#ifndef GRPC_barrage_2eproto__INCLUDED
#define GRPC_barrage_2eproto__INCLUDED

#include "barrage.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

//
// A barrage service is an endpoint for retrieving or storing ticking Arrow data.
// Implementations should also implement FlightService.
class BarrageService final {
 public:
  static constexpr char const* service_full_name() {
    return "io.deephaven.proto.backplane.grpc.BarrageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Create a table subscription. You can send a new request to update the subscription.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>> DoSubscribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>>(DoSubscribeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>> AsyncDoSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>>(AsyncDoSubscribeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>> PrepareAsyncDoSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>>(PrepareAsyncDoSubscribeRaw(context, cq));
    }
    //
    // Create a table subscription. This variant is server-side streaming only. This is to better serve javascript clients
    // which have poor bidirectional streaming support.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>> DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>>(DoSubscribeNoClientStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>> AsyncDoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>>(AsyncDoSubscribeNoClientStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>> PrepareAsyncDoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>>(PrepareAsyncDoSubscribeNoClientStreamRaw(context, request, cq));
    }
    //
    // Update a subscription out-of-band. The provided sequence is used as a high water mark; the server ignores
    // requests that do not increase the sequence. It assumes it was a request received out of order.
    virtual ::grpc::Status DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>> AsyncDoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>>(AsyncDoUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>> PrepareAsyncDoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>>(PrepareAsyncDoUpdateSubscriptionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // Create a table subscription. You can send a new request to update the subscription.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoSubscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) = 0;
      #else
      virtual void DoSubscribe(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) = 0;
      #endif
      //
      // Create a table subscription. This variant is server-side streaming only. This is to better serve javascript clients
      // which have poor bidirectional streaming support.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) = 0;
      #else
      virtual void DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::experimental::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) = 0;
      #endif
      //
      // Update a subscription out-of-band. The provided sequence is used as a high water mark; the server ignores
      // requests that do not increase the sequence. It assumes it was a request received out of order.
      virtual void DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* AsyncDoSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* PrepareAsyncDoSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>* AsyncDoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::io::deephaven::proto::backplane::grpc::BarrageData>* PrepareAsyncDoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* AsyncDoUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* PrepareAsyncDoUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>> DoSubscribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>>(DoSubscribeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>> AsyncDoSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>>(AsyncDoSubscribeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>> PrepareAsyncDoSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>>(PrepareAsyncDoSubscribeRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::io::deephaven::proto::backplane::grpc::BarrageData>> DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::io::deephaven::proto::backplane::grpc::BarrageData>>(DoSubscribeNoClientStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>> AsyncDoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>>(AsyncDoSubscribeNoClientStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>> PrepareAsyncDoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>>(PrepareAsyncDoSubscribeNoClientStreamRaw(context, request, cq));
    }
    ::grpc::Status DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>> AsyncDoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>>(AsyncDoUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>> PrepareAsyncDoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>>(PrepareAsyncDoUpdateSubscriptionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoSubscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) override;
      #else
      void DoSubscribe(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) override;
      #else
      void DoSubscribeNoClientStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::experimental::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* reactor) override;
      #endif
      void DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoUpdateSubscription(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* AsyncDoSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* PrepareAsyncDoSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request) override;
    ::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>* AsyncDoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::BarrageData>* PrepareAsyncDoSubscribeNoClientStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* AsyncDoUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* PrepareAsyncDoUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DoSubscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_DoSubscribeNoClientStream_;
    const ::grpc::internal::RpcMethod rpcmethod_DoUpdateSubscription_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Create a table subscription. You can send a new request to update the subscription.
    virtual ::grpc::Status DoSubscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* stream);
    //
    // Create a table subscription. This variant is server-side streaming only. This is to better serve javascript clients
    // which have poor bidirectional streaming support.
    virtual ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* writer);
    //
    // Update a subscription out-of-band. The provided sequence is used as a high water mark; the server ignores
    // requests that do not increase the sequence. It assumes it was a request received out of order.
    virtual ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DoSubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoSubscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DoSubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoSubscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoSubscribeNoClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoSubscribeNoClientStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DoSubscribeNoClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoSubscribeNoClientStream(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::ServerAsyncWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoUpdateSubscription() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DoUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoUpdateSubscription(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DoSubscribe<WithAsyncMethod_DoSubscribeNoClientStream<WithAsyncMethod_DoUpdateSubscription<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoSubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoSubscribe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoSubscribe(context); }));
    }
    ~ExperimentalWithCallbackMethod_DoSubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribe(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribe(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoSubscribeNoClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoSubscribeNoClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request) { return this->DoSubscribeNoClientStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DoSubscribeNoClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribeNoClientStream(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::io::deephaven::proto::backplane::grpc::BarrageData>* DoSubscribeNoClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoUpdateSubscription() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* request, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* response) { return this->DoUpdateSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_DoUpdateSubscription(
        ::grpc::experimental::MessageAllocator< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoUpdateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoUpdateSubscription(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DoSubscribe<ExperimentalWithCallbackMethod_DoSubscribeNoClientStream<ExperimentalWithCallbackMethod_DoUpdateSubscription<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DoSubscribe<ExperimentalWithCallbackMethod_DoSubscribeNoClientStream<ExperimentalWithCallbackMethod_DoUpdateSubscription<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DoSubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoSubscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DoSubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoSubscribeNoClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoSubscribeNoClientStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DoSubscribeNoClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoUpdateSubscription() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DoUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoSubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoSubscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DoSubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoSubscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoSubscribeNoClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoSubscribeNoClientStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DoSubscribeNoClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoSubscribeNoClientStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoUpdateSubscription() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DoUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoUpdateSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoSubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoSubscribe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoSubscribe(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoSubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::grpc::BarrageData, ::io::deephaven::proto::backplane::grpc::SubscriptionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoSubscribe(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoSubscribe(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoSubscribeNoClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoSubscribeNoClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DoSubscribeNoClientStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoSubscribeNoClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DoSubscribeNoClientStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DoSubscribeNoClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoUpdateSubscription() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoUpdateSubscription(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoUpdateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoUpdateSubscription(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoUpdateSubscription() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* streamer) {
                       return this->StreamedDoUpdateSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoUpdateSubscription(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoUpdateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::OutOfBandSubscriptionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DoUpdateSubscription<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DoSubscribeNoClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DoSubscribeNoClientStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::io::deephaven::proto::backplane::grpc::SubscriptionRequest, ::io::deephaven::proto::backplane::grpc::BarrageData>* streamer) {
                       return this->StreamedDoSubscribeNoClientStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DoSubscribeNoClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoSubscribeNoClientStream(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::BarrageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDoSubscribeNoClientStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::io::deephaven::proto::backplane::grpc::SubscriptionRequest,::io::deephaven::proto::backplane::grpc::BarrageData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DoSubscribeNoClientStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_DoSubscribeNoClientStream<WithStreamedUnaryMethod_DoUpdateSubscription<Service > > StreamedService;
};

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


#endif  // GRPC_barrage_2eproto__INCLUDED
