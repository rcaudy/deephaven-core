// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flight.proto

#include "flight.pb.h"
#include "flight.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace arrow {
namespace flight {
namespace protocol {

static const char* FlightService_method_names[] = {
  "/arrow.flight.protocol.FlightService/Handshake",
  "/arrow.flight.protocol.FlightService/ListFlights",
  "/arrow.flight.protocol.FlightService/GetFlightInfo",
  "/arrow.flight.protocol.FlightService/GetSchema",
  "/arrow.flight.protocol.FlightService/DoGet",
  "/arrow.flight.protocol.FlightService/DoPut",
  "/arrow.flight.protocol.FlightService/DoExchange",
  "/arrow.flight.protocol.FlightService/DoAction",
  "/arrow.flight.protocol.FlightService/ListActions",
};

std::unique_ptr< FlightService::Stub> FlightService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FlightService::Stub> stub(new FlightService::Stub(channel, options));
  return stub;
}

FlightService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Handshake_(FlightService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ListFlights_(FlightService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetFlightInfo_(FlightService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSchema_(FlightService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoGet_(FlightService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DoPut_(FlightService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DoExchange_(FlightService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DoAction_(FlightService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListActions_(FlightService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>* FlightService::Stub::HandshakeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>::Create(channel_.get(), rpcmethod_Handshake_, context);
}

void FlightService::Stub::experimental_async::Handshake(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::arrow::flight::protocol::HandshakeRequest,::arrow::flight::protocol::HandshakeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::arrow::flight::protocol::HandshakeRequest,::arrow::flight::protocol::HandshakeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>* FlightService::Stub::AsyncHandshakeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>::Create(channel_.get(), cq, rpcmethod_Handshake_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>* FlightService::Stub::PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>::Create(channel_.get(), cq, rpcmethod_Handshake_, context, false, nullptr);
}

::grpc::ClientReader< ::arrow::flight::protocol::FlightInfo>* FlightService::Stub::ListFlightsRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Criteria& request) {
  return ::grpc::internal::ClientReaderFactory< ::arrow::flight::protocol::FlightInfo>::Create(channel_.get(), rpcmethod_ListFlights_, context, request);
}

void FlightService::Stub::experimental_async::ListFlights(::grpc::ClientContext* context, const ::arrow::flight::protocol::Criteria* request, ::grpc::experimental::ClientReadReactor< ::arrow::flight::protocol::FlightInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::arrow::flight::protocol::FlightInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_ListFlights_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::FlightInfo>* FlightService::Stub::AsyncListFlightsRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Criteria& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::FlightInfo>::Create(channel_.get(), cq, rpcmethod_ListFlights_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::FlightInfo>* FlightService::Stub::PrepareAsyncListFlightsRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Criteria& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::FlightInfo>::Create(channel_.get(), cq, rpcmethod_ListFlights_, context, request, false, nullptr);
}

::grpc::Status FlightService::Stub::GetFlightInfo(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor& request, ::arrow::flight::protocol::FlightInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arrow::flight::protocol::FlightDescriptor, ::arrow::flight::protocol::FlightInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFlightInfo_, context, request, response);
}

void FlightService::Stub::experimental_async::GetFlightInfo(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor* request, ::arrow::flight::protocol::FlightInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arrow::flight::protocol::FlightDescriptor, ::arrow::flight::protocol::FlightInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlightInfo_, context, request, response, std::move(f));
}

void FlightService::Stub::experimental_async::GetFlightInfo(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor* request, ::arrow::flight::protocol::FlightInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlightInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arrow::flight::protocol::FlightInfo>* FlightService::Stub::PrepareAsyncGetFlightInfoRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arrow::flight::protocol::FlightInfo, ::arrow::flight::protocol::FlightDescriptor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFlightInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arrow::flight::protocol::FlightInfo>* FlightService::Stub::AsyncGetFlightInfoRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFlightInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlightService::Stub::GetSchema(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor& request, ::arrow::flight::protocol::SchemaResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arrow::flight::protocol::FlightDescriptor, ::arrow::flight::protocol::SchemaResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSchema_, context, request, response);
}

void FlightService::Stub::experimental_async::GetSchema(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor* request, ::arrow::flight::protocol::SchemaResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arrow::flight::protocol::FlightDescriptor, ::arrow::flight::protocol::SchemaResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSchema_, context, request, response, std::move(f));
}

void FlightService::Stub::experimental_async::GetSchema(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor* request, ::arrow::flight::protocol::SchemaResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSchema_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arrow::flight::protocol::SchemaResult>* FlightService::Stub::PrepareAsyncGetSchemaRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arrow::flight::protocol::SchemaResult, ::arrow::flight::protocol::FlightDescriptor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSchema_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arrow::flight::protocol::SchemaResult>* FlightService::Stub::AsyncGetSchemaRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::FlightDescriptor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSchemaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::arrow::flight::protocol::FlightData>* FlightService::Stub::DoGetRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Ticket& request) {
  return ::grpc::internal::ClientReaderFactory< ::arrow::flight::protocol::FlightData>::Create(channel_.get(), rpcmethod_DoGet_, context, request);
}

void FlightService::Stub::experimental_async::DoGet(::grpc::ClientContext* context, const ::arrow::flight::protocol::Ticket* request, ::grpc::experimental::ClientReadReactor< ::arrow::flight::protocol::FlightData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::arrow::flight::protocol::FlightData>::Create(stub_->channel_.get(), stub_->rpcmethod_DoGet_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::FlightData>* FlightService::Stub::AsyncDoGetRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Ticket& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::FlightData>::Create(channel_.get(), cq, rpcmethod_DoGet_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::FlightData>* FlightService::Stub::PrepareAsyncDoGetRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Ticket& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::FlightData>::Create(channel_.get(), cq, rpcmethod_DoGet_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>* FlightService::Stub::DoPutRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>::Create(channel_.get(), rpcmethod_DoPut_, context);
}

void FlightService::Stub::experimental_async::DoPut(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::arrow::flight::protocol::FlightData,::arrow::flight::protocol::PutResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::arrow::flight::protocol::FlightData,::arrow::flight::protocol::PutResult>::Create(stub_->channel_.get(), stub_->rpcmethod_DoPut_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>* FlightService::Stub::AsyncDoPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>::Create(channel_.get(), cq, rpcmethod_DoPut_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>* FlightService::Stub::PrepareAsyncDoPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>::Create(channel_.get(), cq, rpcmethod_DoPut_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>* FlightService::Stub::DoExchangeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>::Create(channel_.get(), rpcmethod_DoExchange_, context);
}

void FlightService::Stub::experimental_async::DoExchange(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::arrow::flight::protocol::FlightData,::arrow::flight::protocol::FlightData>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::arrow::flight::protocol::FlightData,::arrow::flight::protocol::FlightData>::Create(stub_->channel_.get(), stub_->rpcmethod_DoExchange_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>* FlightService::Stub::AsyncDoExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>::Create(channel_.get(), cq, rpcmethod_DoExchange_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>* FlightService::Stub::PrepareAsyncDoExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>::Create(channel_.get(), cq, rpcmethod_DoExchange_, context, false, nullptr);
}

::grpc::ClientReader< ::arrow::flight::protocol::Result>* FlightService::Stub::DoActionRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Action& request) {
  return ::grpc::internal::ClientReaderFactory< ::arrow::flight::protocol::Result>::Create(channel_.get(), rpcmethod_DoAction_, context, request);
}

void FlightService::Stub::experimental_async::DoAction(::grpc::ClientContext* context, const ::arrow::flight::protocol::Action* request, ::grpc::experimental::ClientReadReactor< ::arrow::flight::protocol::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::arrow::flight::protocol::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_DoAction_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::Result>* FlightService::Stub::AsyncDoActionRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Action& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::Result>::Create(channel_.get(), cq, rpcmethod_DoAction_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::Result>* FlightService::Stub::PrepareAsyncDoActionRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Action& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::Result>::Create(channel_.get(), cq, rpcmethod_DoAction_, context, request, false, nullptr);
}

::grpc::ClientReader< ::arrow::flight::protocol::ActionType>* FlightService::Stub::ListActionsRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::arrow::flight::protocol::ActionType>::Create(channel_.get(), rpcmethod_ListActions_, context, request);
}

void FlightService::Stub::experimental_async::ListActions(::grpc::ClientContext* context, const ::arrow::flight::protocol::Empty* request, ::grpc::experimental::ClientReadReactor< ::arrow::flight::protocol::ActionType>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::arrow::flight::protocol::ActionType>::Create(stub_->channel_.get(), stub_->rpcmethod_ListActions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::ActionType>* FlightService::Stub::AsyncListActionsRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::ActionType>::Create(channel_.get(), cq, rpcmethod_ListActions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::arrow::flight::protocol::ActionType>* FlightService::Stub::PrepareAsyncListActionsRaw(::grpc::ClientContext* context, const ::arrow::flight::protocol::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::arrow::flight::protocol::ActionType>::Create(channel_.get(), cq, rpcmethod_ListActions_, context, request, false, nullptr);
}

FlightService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FlightService::Service, ::arrow::flight::protocol::HandshakeRequest, ::arrow::flight::protocol::HandshakeResponse>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::arrow::flight::protocol::HandshakeResponse,
             ::arrow::flight::protocol::HandshakeRequest>* stream) {
               return service->Handshake(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FlightService::Service, ::arrow::flight::protocol::Criteria, ::arrow::flight::protocol::FlightInfo>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arrow::flight::protocol::Criteria* req,
             ::grpc::ServerWriter<::arrow::flight::protocol::FlightInfo>* writer) {
               return service->ListFlights(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlightService::Service, ::arrow::flight::protocol::FlightDescriptor, ::arrow::flight::protocol::FlightInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arrow::flight::protocol::FlightDescriptor* req,
             ::arrow::flight::protocol::FlightInfo* resp) {
               return service->GetFlightInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlightService::Service, ::arrow::flight::protocol::FlightDescriptor, ::arrow::flight::protocol::SchemaResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arrow::flight::protocol::FlightDescriptor* req,
             ::arrow::flight::protocol::SchemaResult* resp) {
               return service->GetSchema(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FlightService::Service, ::arrow::flight::protocol::Ticket, ::arrow::flight::protocol::FlightData>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arrow::flight::protocol::Ticket* req,
             ::grpc::ServerWriter<::arrow::flight::protocol::FlightData>* writer) {
               return service->DoGet(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FlightService::Service, ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::PutResult>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::arrow::flight::protocol::PutResult,
             ::arrow::flight::protocol::FlightData>* stream) {
               return service->DoPut(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[6],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FlightService::Service, ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::arrow::flight::protocol::FlightData,
             ::arrow::flight::protocol::FlightData>* stream) {
               return service->DoExchange(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FlightService::Service, ::arrow::flight::protocol::Action, ::arrow::flight::protocol::Result>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arrow::flight::protocol::Action* req,
             ::grpc::ServerWriter<::arrow::flight::protocol::Result>* writer) {
               return service->DoAction(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FlightService::Service, ::arrow::flight::protocol::Empty, ::arrow::flight::protocol::ActionType>(
          [](FlightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arrow::flight::protocol::Empty* req,
             ::grpc::ServerWriter<::arrow::flight::protocol::ActionType>* writer) {
               return service->ListActions(ctx, req, writer);
             }, this)));
}

FlightService::Service::~Service() {
}

::grpc::Status FlightService::Service::Handshake(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::arrow::flight::protocol::HandshakeResponse, ::arrow::flight::protocol::HandshakeRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::ListFlights(::grpc::ServerContext* context, const ::arrow::flight::protocol::Criteria* request, ::grpc::ServerWriter< ::arrow::flight::protocol::FlightInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::GetFlightInfo(::grpc::ServerContext* context, const ::arrow::flight::protocol::FlightDescriptor* request, ::arrow::flight::protocol::FlightInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::GetSchema(::grpc::ServerContext* context, const ::arrow::flight::protocol::FlightDescriptor* request, ::arrow::flight::protocol::SchemaResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::DoGet(::grpc::ServerContext* context, const ::arrow::flight::protocol::Ticket* request, ::grpc::ServerWriter< ::arrow::flight::protocol::FlightData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::DoPut(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::arrow::flight::protocol::PutResult, ::arrow::flight::protocol::FlightData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::DoExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::arrow::flight::protocol::FlightData, ::arrow::flight::protocol::FlightData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::DoAction(::grpc::ServerContext* context, const ::arrow::flight::protocol::Action* request, ::grpc::ServerWriter< ::arrow::flight::protocol::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlightService::Service::ListActions(::grpc::ServerContext* context, const ::arrow::flight::protocol::Empty* request, ::grpc::ServerWriter< ::arrow::flight::protocol::ActionType>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace arrow
}  // namespace flight
}  // namespace protocol

