// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: console.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_console_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_console_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "table.pb.h"
#include "flight.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_console_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_console_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_console_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_console_2eproto_metadata_getter(int index);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
class BindTableToVariableRequest;
struct BindTableToVariableRequestDefaultTypeInternal;
extern BindTableToVariableRequestDefaultTypeInternal _BindTableToVariableRequest_default_instance_;
class BindTableToVariableResponse;
struct BindTableToVariableResponseDefaultTypeInternal;
extern BindTableToVariableResponseDefaultTypeInternal _BindTableToVariableResponse_default_instance_;
class CancelCommandRequest;
struct CancelCommandRequestDefaultTypeInternal;
extern CancelCommandRequestDefaultTypeInternal _CancelCommandRequest_default_instance_;
class CancelCommandResponse;
struct CancelCommandResponseDefaultTypeInternal;
extern CancelCommandResponseDefaultTypeInternal _CancelCommandResponse_default_instance_;
class ChangeDocumentRequest;
struct ChangeDocumentRequestDefaultTypeInternal;
extern ChangeDocumentRequestDefaultTypeInternal _ChangeDocumentRequest_default_instance_;
class ChangeDocumentRequest_TextDocumentContentChangeEvent;
struct ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal;
extern ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal _ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_;
class ChangeDocumentResponse;
struct ChangeDocumentResponseDefaultTypeInternal;
extern ChangeDocumentResponseDefaultTypeInternal _ChangeDocumentResponse_default_instance_;
class CloseDocumentRequest;
struct CloseDocumentRequestDefaultTypeInternal;
extern CloseDocumentRequestDefaultTypeInternal _CloseDocumentRequest_default_instance_;
class CloseDocumentResponse;
struct CloseDocumentResponseDefaultTypeInternal;
extern CloseDocumentResponseDefaultTypeInternal _CloseDocumentResponse_default_instance_;
class CompletionContext;
struct CompletionContextDefaultTypeInternal;
extern CompletionContextDefaultTypeInternal _CompletionContext_default_instance_;
class CompletionItem;
struct CompletionItemDefaultTypeInternal;
extern CompletionItemDefaultTypeInternal _CompletionItem_default_instance_;
class DocumentRange;
struct DocumentRangeDefaultTypeInternal;
extern DocumentRangeDefaultTypeInternal _DocumentRange_default_instance_;
class ExecuteCommandRequest;
struct ExecuteCommandRequestDefaultTypeInternal;
extern ExecuteCommandRequestDefaultTypeInternal _ExecuteCommandRequest_default_instance_;
class ExecuteCommandResponse;
struct ExecuteCommandResponseDefaultTypeInternal;
extern ExecuteCommandResponseDefaultTypeInternal _ExecuteCommandResponse_default_instance_;
class FetchFigureRequest;
struct FetchFigureRequestDefaultTypeInternal;
extern FetchFigureRequestDefaultTypeInternal _FetchFigureRequest_default_instance_;
class FetchFigureResponse;
struct FetchFigureResponseDefaultTypeInternal;
extern FetchFigureResponseDefaultTypeInternal _FetchFigureResponse_default_instance_;
class FetchPandasTableRequest;
struct FetchPandasTableRequestDefaultTypeInternal;
extern FetchPandasTableRequestDefaultTypeInternal _FetchPandasTableRequest_default_instance_;
class FetchTableMapRequest;
struct FetchTableMapRequestDefaultTypeInternal;
extern FetchTableMapRequestDefaultTypeInternal _FetchTableMapRequest_default_instance_;
class FetchTableMapResponse;
struct FetchTableMapResponseDefaultTypeInternal;
extern FetchTableMapResponseDefaultTypeInternal _FetchTableMapResponse_default_instance_;
class FetchTableRequest;
struct FetchTableRequestDefaultTypeInternal;
extern FetchTableRequestDefaultTypeInternal _FetchTableRequest_default_instance_;
class GetCompletionItemsRequest;
struct GetCompletionItemsRequestDefaultTypeInternal;
extern GetCompletionItemsRequestDefaultTypeInternal _GetCompletionItemsRequest_default_instance_;
class GetCompletionItemsResponse;
struct GetCompletionItemsResponseDefaultTypeInternal;
extern GetCompletionItemsResponseDefaultTypeInternal _GetCompletionItemsResponse_default_instance_;
class GetConsoleTypesRequest;
struct GetConsoleTypesRequestDefaultTypeInternal;
extern GetConsoleTypesRequestDefaultTypeInternal _GetConsoleTypesRequest_default_instance_;
class GetConsoleTypesResponse;
struct GetConsoleTypesResponseDefaultTypeInternal;
extern GetConsoleTypesResponseDefaultTypeInternal _GetConsoleTypesResponse_default_instance_;
class LogSubscriptionData;
struct LogSubscriptionDataDefaultTypeInternal;
extern LogSubscriptionDataDefaultTypeInternal _LogSubscriptionData_default_instance_;
class LogSubscriptionRequest;
struct LogSubscriptionRequestDefaultTypeInternal;
extern LogSubscriptionRequestDefaultTypeInternal _LogSubscriptionRequest_default_instance_;
class OpenDocumentRequest;
struct OpenDocumentRequestDefaultTypeInternal;
extern OpenDocumentRequestDefaultTypeInternal _OpenDocumentRequest_default_instance_;
class OpenDocumentResponse;
struct OpenDocumentResponseDefaultTypeInternal;
extern OpenDocumentResponseDefaultTypeInternal _OpenDocumentResponse_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class StartConsoleRequest;
struct StartConsoleRequestDefaultTypeInternal;
extern StartConsoleRequestDefaultTypeInternal _StartConsoleRequest_default_instance_;
class StartConsoleResponse;
struct StartConsoleResponseDefaultTypeInternal;
extern StartConsoleResponseDefaultTypeInternal _StartConsoleResponse_default_instance_;
class TextDocumentItem;
struct TextDocumentItemDefaultTypeInternal;
extern TextDocumentItemDefaultTypeInternal _TextDocumentItem_default_instance_;
class TextEdit;
struct TextEditDefaultTypeInternal;
extern TextEditDefaultTypeInternal _TextEdit_default_instance_;
class VariableDefinition;
struct VariableDefinitionDefaultTypeInternal;
extern VariableDefinitionDefaultTypeInternal _VariableDefinition_default_instance_;
class VersionedTextDocumentIdentifier;
struct VersionedTextDocumentIdentifierDefaultTypeInternal;
extern VersionedTextDocumentIdentifierDefaultTypeInternal _VersionedTextDocumentIdentifier_default_instance_;
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::ChangeDocumentResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CloseDocumentResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::CompletionContext* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CompletionContext>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::CompletionItem* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CompletionItem>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::DocumentRange* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FetchPandasTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FetchTableMapRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FetchTableMapResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::FetchTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FetchTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::OpenDocumentResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::Position* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::TextDocumentItem>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::TextEdit* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::TextEdit>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VariableDefinition>(Arena*);
template<> ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {

// ===================================================================

class GetConsoleTypesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest) */ {
 public:
  inline GetConsoleTypesRequest() : GetConsoleTypesRequest(nullptr) {}
  virtual ~GetConsoleTypesRequest();
  explicit constexpr GetConsoleTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsoleTypesRequest(const GetConsoleTypesRequest& from);
  GetConsoleTypesRequest(GetConsoleTypesRequest&& from) noexcept
    : GetConsoleTypesRequest() {
    *this = ::std::move(from);
  }

  inline GetConsoleTypesRequest& operator=(const GetConsoleTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsoleTypesRequest& operator=(GetConsoleTypesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConsoleTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsoleTypesRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsoleTypesRequest*>(
               &_GetConsoleTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetConsoleTypesRequest& a, GetConsoleTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsoleTypesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsoleTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConsoleTypesRequest* New() const final {
    return CreateMaybeMessage<GetConsoleTypesRequest>(nullptr);
  }

  GetConsoleTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConsoleTypesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConsoleTypesRequest& from);
  void MergeFrom(const GetConsoleTypesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsoleTypesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest";
  }
  protected:
  explicit GetConsoleTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class GetConsoleTypesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse) */ {
 public:
  inline GetConsoleTypesResponse() : GetConsoleTypesResponse(nullptr) {}
  virtual ~GetConsoleTypesResponse();
  explicit constexpr GetConsoleTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsoleTypesResponse(const GetConsoleTypesResponse& from);
  GetConsoleTypesResponse(GetConsoleTypesResponse&& from) noexcept
    : GetConsoleTypesResponse() {
    *this = ::std::move(from);
  }

  inline GetConsoleTypesResponse& operator=(const GetConsoleTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsoleTypesResponse& operator=(GetConsoleTypesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConsoleTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsoleTypesResponse* internal_default_instance() {
    return reinterpret_cast<const GetConsoleTypesResponse*>(
               &_GetConsoleTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetConsoleTypesResponse& a, GetConsoleTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsoleTypesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsoleTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConsoleTypesResponse* New() const final {
    return CreateMaybeMessage<GetConsoleTypesResponse>(nullptr);
  }

  GetConsoleTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConsoleTypesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConsoleTypesResponse& from);
  void MergeFrom(const GetConsoleTypesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsoleTypesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse";
  }
  protected:
  explicit GetConsoleTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleTypesFieldNumber = 1,
  };
  // repeated string console_types = 1;
  int console_types_size() const;
  private:
  int _internal_console_types_size() const;
  public:
  void clear_console_types();
  const std::string& console_types(int index) const;
  std::string* mutable_console_types(int index);
  void set_console_types(int index, const std::string& value);
  void set_console_types(int index, std::string&& value);
  void set_console_types(int index, const char* value);
  void set_console_types(int index, const char* value, size_t size);
  std::string* add_console_types();
  void add_console_types(const std::string& value);
  void add_console_types(std::string&& value);
  void add_console_types(const char* value);
  void add_console_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& console_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_console_types();
  private:
  const std::string& _internal_console_types(int index) const;
  std::string* _internal_add_console_types();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> console_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class StartConsoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest) */ {
 public:
  inline StartConsoleRequest() : StartConsoleRequest(nullptr) {}
  virtual ~StartConsoleRequest();
  explicit constexpr StartConsoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartConsoleRequest(const StartConsoleRequest& from);
  StartConsoleRequest(StartConsoleRequest&& from) noexcept
    : StartConsoleRequest() {
    *this = ::std::move(from);
  }

  inline StartConsoleRequest& operator=(const StartConsoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartConsoleRequest& operator=(StartConsoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartConsoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartConsoleRequest* internal_default_instance() {
    return reinterpret_cast<const StartConsoleRequest*>(
               &_StartConsoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartConsoleRequest& a, StartConsoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartConsoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartConsoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartConsoleRequest* New() const final {
    return CreateMaybeMessage<StartConsoleRequest>(nullptr);
  }

  StartConsoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartConsoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartConsoleRequest& from);
  void MergeFrom(const StartConsoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartConsoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest";
  }
  protected:
  explicit StartConsoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionTypeFieldNumber = 2,
    kResultIdFieldNumber = 1,
  };
  // string session_type = 2;
  void clear_session_type();
  const std::string& session_type() const;
  void set_session_type(const std::string& value);
  void set_session_type(std::string&& value);
  void set_session_type(const char* value);
  void set_session_type(const char* value, size_t size);
  std::string* mutable_session_type();
  std::string* release_session_type();
  void set_allocated_session_type(std::string* session_type);
  private:
  const std::string& _internal_session_type() const;
  void _internal_set_session_type(const std::string& value);
  std::string* _internal_mutable_session_type();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_type_;
  ::arrow::flight::protocol::Wicket* result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class StartConsoleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse) */ {
 public:
  inline StartConsoleResponse() : StartConsoleResponse(nullptr) {}
  virtual ~StartConsoleResponse();
  explicit constexpr StartConsoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartConsoleResponse(const StartConsoleResponse& from);
  StartConsoleResponse(StartConsoleResponse&& from) noexcept
    : StartConsoleResponse() {
    *this = ::std::move(from);
  }

  inline StartConsoleResponse& operator=(const StartConsoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartConsoleResponse& operator=(StartConsoleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartConsoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartConsoleResponse* internal_default_instance() {
    return reinterpret_cast<const StartConsoleResponse*>(
               &_StartConsoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartConsoleResponse& a, StartConsoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartConsoleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartConsoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartConsoleResponse* New() const final {
    return CreateMaybeMessage<StartConsoleResponse>(nullptr);
  }

  StartConsoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartConsoleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartConsoleResponse& from);
  void MergeFrom(const StartConsoleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartConsoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.StartConsoleResponse";
  }
  protected:
  explicit StartConsoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNamesFieldNumber = 2,
    kWidgetNamesFieldNumber = 3,
    kResultIdFieldNumber = 1,
  };
  // repeated string table_names = 2;
  int table_names_size() const;
  private:
  int _internal_table_names_size() const;
  public:
  void clear_table_names();
  const std::string& table_names(int index) const;
  std::string* mutable_table_names(int index);
  void set_table_names(int index, const std::string& value);
  void set_table_names(int index, std::string&& value);
  void set_table_names(int index, const char* value);
  void set_table_names(int index, const char* value, size_t size);
  std::string* add_table_names();
  void add_table_names(const std::string& value);
  void add_table_names(std::string&& value);
  void add_table_names(const char* value);
  void add_table_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_names();
  private:
  const std::string& _internal_table_names(int index) const;
  std::string* _internal_add_table_names();
  public:

  // repeated string widget_names = 3;
  int widget_names_size() const;
  private:
  int _internal_widget_names_size() const;
  public:
  void clear_widget_names();
  const std::string& widget_names(int index) const;
  std::string* mutable_widget_names(int index);
  void set_widget_names(int index, const std::string& value);
  void set_widget_names(int index, std::string&& value);
  void set_widget_names(int index, const char* value);
  void set_widget_names(int index, const char* value, size_t size);
  std::string* add_widget_names();
  void add_widget_names(const std::string& value);
  void add_widget_names(std::string&& value);
  void add_widget_names(const char* value);
  void add_widget_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& widget_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_widget_names();
  private:
  const std::string& _internal_widget_names(int index) const;
  std::string* _internal_add_widget_names();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> widget_names_;
  ::arrow::flight::protocol::Wicket* result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class LogSubscriptionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest) */ {
 public:
  inline LogSubscriptionRequest() : LogSubscriptionRequest(nullptr) {}
  virtual ~LogSubscriptionRequest();
  explicit constexpr LogSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogSubscriptionRequest(const LogSubscriptionRequest& from);
  LogSubscriptionRequest(LogSubscriptionRequest&& from) noexcept
    : LogSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline LogSubscriptionRequest& operator=(const LogSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogSubscriptionRequest& operator=(LogSubscriptionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const LogSubscriptionRequest*>(
               &_LogSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogSubscriptionRequest& a, LogSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogSubscriptionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogSubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogSubscriptionRequest* New() const final {
    return CreateMaybeMessage<LogSubscriptionRequest>(nullptr);
  }

  LogSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogSubscriptionRequest& from);
  void MergeFrom(const LogSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSubscriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest";
  }
  protected:
  explicit LogSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelsFieldNumber = 2,
    kLastSeenLogTimestampFieldNumber = 1,
  };
  // repeated string levels = 2;
  int levels_size() const;
  private:
  int _internal_levels_size() const;
  public:
  void clear_levels();
  const std::string& levels(int index) const;
  std::string* mutable_levels(int index);
  void set_levels(int index, const std::string& value);
  void set_levels(int index, std::string&& value);
  void set_levels(int index, const char* value);
  void set_levels(int index, const char* value, size_t size);
  std::string* add_levels();
  void add_levels(const std::string& value);
  void add_levels(std::string&& value);
  void add_levels(const char* value);
  void add_levels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_levels();
  private:
  const std::string& _internal_levels(int index) const;
  std::string* _internal_add_levels();
  public:

  // int64 last_seen_log_timestamp = 1;
  void clear_last_seen_log_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_seen_log_timestamp() const;
  void set_last_seen_log_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_seen_log_timestamp() const;
  void _internal_set_last_seen_log_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> levels_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_seen_log_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class LogSubscriptionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData) */ {
 public:
  inline LogSubscriptionData() : LogSubscriptionData(nullptr) {}
  virtual ~LogSubscriptionData();
  explicit constexpr LogSubscriptionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogSubscriptionData(const LogSubscriptionData& from);
  LogSubscriptionData(LogSubscriptionData&& from) noexcept
    : LogSubscriptionData() {
    *this = ::std::move(from);
  }

  inline LogSubscriptionData& operator=(const LogSubscriptionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogSubscriptionData& operator=(LogSubscriptionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogSubscriptionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogSubscriptionData* internal_default_instance() {
    return reinterpret_cast<const LogSubscriptionData*>(
               &_LogSubscriptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogSubscriptionData& a, LogSubscriptionData& b) {
    a.Swap(&b);
  }
  inline void Swap(LogSubscriptionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogSubscriptionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogSubscriptionData* New() const final {
    return CreateMaybeMessage<LogSubscriptionData>(nullptr);
  }

  LogSubscriptionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogSubscriptionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogSubscriptionData& from);
  void MergeFrom(const LogSubscriptionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSubscriptionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData";
  }
  protected:
  explicit LogSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber = 2,
    kMessageFieldNumber = 3,
    kMicrosFieldNumber = 1,
  };
  // string log_level = 2;
  void clear_log_level();
  const std::string& log_level() const;
  void set_log_level(const std::string& value);
  void set_log_level(std::string&& value);
  void set_log_level(const char* value);
  void set_log_level(const char* value, size_t size);
  std::string* mutable_log_level();
  std::string* release_log_level();
  void set_allocated_log_level(std::string* log_level);
  private:
  const std::string& _internal_log_level() const;
  void _internal_set_log_level(const std::string& value);
  std::string* _internal_mutable_log_level();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 micros = 1;
  void clear_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 micros() const;
  void set_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_micros() const;
  void _internal_set_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 micros_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest) */ {
 public:
  inline ExecuteCommandRequest() : ExecuteCommandRequest(nullptr) {}
  virtual ~ExecuteCommandRequest();
  explicit constexpr ExecuteCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteCommandRequest(const ExecuteCommandRequest& from);
  ExecuteCommandRequest(ExecuteCommandRequest&& from) noexcept
    : ExecuteCommandRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteCommandRequest& operator=(const ExecuteCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCommandRequest& operator=(ExecuteCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteCommandRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteCommandRequest*>(
               &_ExecuteCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExecuteCommandRequest& a, ExecuteCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCommandRequest* New() const final {
    return CreateMaybeMessage<ExecuteCommandRequest>(nullptr);
  }

  ExecuteCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCommandRequest& from);
  void MergeFrom(const ExecuteCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest";
  }
  protected:
  explicit ExecuteCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 3,
    kConsoleIdFieldNumber = 1,
  };
  // string code = 3;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::arrow::flight::protocol::Wicket* console_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse) */ {
 public:
  inline ExecuteCommandResponse() : ExecuteCommandResponse(nullptr) {}
  virtual ~ExecuteCommandResponse();
  explicit constexpr ExecuteCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteCommandResponse(const ExecuteCommandResponse& from);
  ExecuteCommandResponse(ExecuteCommandResponse&& from) noexcept
    : ExecuteCommandResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteCommandResponse& operator=(const ExecuteCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCommandResponse& operator=(ExecuteCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteCommandResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteCommandResponse*>(
               &_ExecuteCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExecuteCommandResponse& a, ExecuteCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCommandResponse* New() const final {
    return CreateMaybeMessage<ExecuteCommandResponse>(nullptr);
  }

  ExecuteCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCommandResponse& from);
  void MergeFrom(const ExecuteCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse";
  }
  protected:
  explicit ExecuteCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 2,
    kUpdatedFieldNumber = 3,
    kRemovedFieldNumber = 4,
    kErrorMessageFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
  int created_size() const;
  private:
  int _internal_created_size() const;
  public:
  void clear_created();
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* mutable_created(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >*
      mutable_created();
  private:
  const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& _internal_created(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* _internal_add_created();
  public:
  const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& created(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* add_created();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >&
      created() const;

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
  int updated_size() const;
  private:
  int _internal_updated_size() const;
  public:
  void clear_updated();
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* mutable_updated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >*
      mutable_updated();
  private:
  const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& _internal_updated(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* _internal_add_updated();
  public:
  const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& updated(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* add_updated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >&
      updated() const;

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
  int removed_size() const;
  private:
  int _internal_removed_size() const;
  public:
  void clear_removed();
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* mutable_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >*
      mutable_removed();
  private:
  const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& _internal_removed(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* _internal_add_removed();
  public:
  const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& removed(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >&
      removed() const;

  // string error_message = 1;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition > created_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition > updated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition > removed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class VariableDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.VariableDefinition) */ {
 public:
  inline VariableDefinition() : VariableDefinition(nullptr) {}
  virtual ~VariableDefinition();
  explicit constexpr VariableDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableDefinition(const VariableDefinition& from);
  VariableDefinition(VariableDefinition&& from) noexcept
    : VariableDefinition() {
    *this = ::std::move(from);
  }

  inline VariableDefinition& operator=(const VariableDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableDefinition& operator=(VariableDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableDefinition* internal_default_instance() {
    return reinterpret_cast<const VariableDefinition*>(
               &_VariableDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VariableDefinition& a, VariableDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableDefinition* New() const final {
    return CreateMaybeMessage<VariableDefinition>(nullptr);
  }

  VariableDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableDefinition& from);
  void MergeFrom(const VariableDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.VariableDefinition";
  }
  protected:
  explicit VariableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class BindTableToVariableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest) */ {
 public:
  inline BindTableToVariableRequest() : BindTableToVariableRequest(nullptr) {}
  virtual ~BindTableToVariableRequest();
  explicit constexpr BindTableToVariableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BindTableToVariableRequest(const BindTableToVariableRequest& from);
  BindTableToVariableRequest(BindTableToVariableRequest&& from) noexcept
    : BindTableToVariableRequest() {
    *this = ::std::move(from);
  }

  inline BindTableToVariableRequest& operator=(const BindTableToVariableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindTableToVariableRequest& operator=(BindTableToVariableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindTableToVariableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BindTableToVariableRequest* internal_default_instance() {
    return reinterpret_cast<const BindTableToVariableRequest*>(
               &_BindTableToVariableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BindTableToVariableRequest& a, BindTableToVariableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BindTableToVariableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindTableToVariableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindTableToVariableRequest* New() const final {
    return CreateMaybeMessage<BindTableToVariableRequest>(nullptr);
  }

  BindTableToVariableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindTableToVariableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindTableToVariableRequest& from);
  void MergeFrom(const BindTableToVariableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindTableToVariableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest";
  }
  protected:
  explicit BindTableToVariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableNameFieldNumber = 3,
    kConsoleIdFieldNumber = 1,
    kTableIdFieldNumber = 4,
  };
  // string variable_name = 3;
  void clear_variable_name();
  const std::string& variable_name() const;
  void set_variable_name(const std::string& value);
  void set_variable_name(std::string&& value);
  void set_variable_name(const char* value);
  void set_variable_name(const char* value, size_t size);
  std::string* mutable_variable_name();
  std::string* release_variable_name();
  void set_allocated_variable_name(std::string* variable_name);
  private:
  const std::string& _internal_variable_name() const;
  void _internal_set_variable_name(const std::string& value);
  std::string* _internal_mutable_variable_name();
  public:

  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .arrow.flight.protocol.Wicket table_id = 4;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::arrow::flight::protocol::Wicket& table_id() const;
  ::arrow::flight::protocol::Wicket* release_table_id();
  ::arrow::flight::protocol::Wicket* mutable_table_id();
  void set_allocated_table_id(::arrow::flight::protocol::Wicket* table_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_table_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::arrow::flight::protocol::Wicket* table_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_name_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::arrow::flight::protocol::Wicket* table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class BindTableToVariableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse) */ {
 public:
  inline BindTableToVariableResponse() : BindTableToVariableResponse(nullptr) {}
  virtual ~BindTableToVariableResponse();
  explicit constexpr BindTableToVariableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BindTableToVariableResponse(const BindTableToVariableResponse& from);
  BindTableToVariableResponse(BindTableToVariableResponse&& from) noexcept
    : BindTableToVariableResponse() {
    *this = ::std::move(from);
  }

  inline BindTableToVariableResponse& operator=(const BindTableToVariableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindTableToVariableResponse& operator=(BindTableToVariableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindTableToVariableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BindTableToVariableResponse* internal_default_instance() {
    return reinterpret_cast<const BindTableToVariableResponse*>(
               &_BindTableToVariableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BindTableToVariableResponse& a, BindTableToVariableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BindTableToVariableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindTableToVariableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindTableToVariableResponse* New() const final {
    return CreateMaybeMessage<BindTableToVariableResponse>(nullptr);
  }

  BindTableToVariableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindTableToVariableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindTableToVariableResponse& from);
  void MergeFrom(const BindTableToVariableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindTableToVariableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse";
  }
  protected:
  explicit BindTableToVariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class CancelCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest) */ {
 public:
  inline CancelCommandRequest() : CancelCommandRequest(nullptr) {}
  virtual ~CancelCommandRequest();
  explicit constexpr CancelCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelCommandRequest(const CancelCommandRequest& from);
  CancelCommandRequest(CancelCommandRequest&& from) noexcept
    : CancelCommandRequest() {
    *this = ::std::move(from);
  }

  inline CancelCommandRequest& operator=(const CancelCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelCommandRequest& operator=(CancelCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelCommandRequest* internal_default_instance() {
    return reinterpret_cast<const CancelCommandRequest*>(
               &_CancelCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CancelCommandRequest& a, CancelCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelCommandRequest* New() const final {
    return CreateMaybeMessage<CancelCommandRequest>(nullptr);
  }

  CancelCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelCommandRequest& from);
  void MergeFrom(const CancelCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.CancelCommandRequest";
  }
  protected:
  explicit CancelCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
    kCommandIdFieldNumber = 2,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .arrow.flight.protocol.Wicket command_id = 2;
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  const ::arrow::flight::protocol::Wicket& command_id() const;
  ::arrow::flight::protocol::Wicket* release_command_id();
  ::arrow::flight::protocol::Wicket* mutable_command_id();
  void set_allocated_command_id(::arrow::flight::protocol::Wicket* command_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_command_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_command_id();
  public:
  void unsafe_arena_set_allocated_command_id(
      ::arrow::flight::protocol::Wicket* command_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_command_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::arrow::flight::protocol::Wicket* command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class CancelCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse) */ {
 public:
  inline CancelCommandResponse() : CancelCommandResponse(nullptr) {}
  virtual ~CancelCommandResponse();
  explicit constexpr CancelCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelCommandResponse(const CancelCommandResponse& from);
  CancelCommandResponse(CancelCommandResponse&& from) noexcept
    : CancelCommandResponse() {
    *this = ::std::move(from);
  }

  inline CancelCommandResponse& operator=(const CancelCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelCommandResponse& operator=(CancelCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelCommandResponse* internal_default_instance() {
    return reinterpret_cast<const CancelCommandResponse*>(
               &_CancelCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CancelCommandResponse& a, CancelCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelCommandResponse* New() const final {
    return CreateMaybeMessage<CancelCommandResponse>(nullptr);
  }

  CancelCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelCommandResponse& from);
  void MergeFrom(const CancelCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.CancelCommandResponse";
  }
  protected:
  explicit CancelCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class OpenDocumentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest) */ {
 public:
  inline OpenDocumentRequest() : OpenDocumentRequest(nullptr) {}
  virtual ~OpenDocumentRequest();
  explicit constexpr OpenDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenDocumentRequest(const OpenDocumentRequest& from);
  OpenDocumentRequest(OpenDocumentRequest&& from) noexcept
    : OpenDocumentRequest() {
    *this = ::std::move(from);
  }

  inline OpenDocumentRequest& operator=(const OpenDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenDocumentRequest& operator=(OpenDocumentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const OpenDocumentRequest*>(
               &_OpenDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OpenDocumentRequest& a, OpenDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenDocumentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenDocumentRequest* New() const final {
    return CreateMaybeMessage<OpenDocumentRequest>(nullptr);
  }

  OpenDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenDocumentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenDocumentRequest& from);
  void MergeFrom(const OpenDocumentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenDocumentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest";
  }
  protected:
  explicit OpenDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
    kTextDocumentFieldNumber = 2,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  bool has_text_document() const;
  private:
  bool _internal_has_text_document() const;
  public:
  void clear_text_document();
  const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* release_text_document();
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* mutable_text_document();
  void set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* text_document);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& _internal_text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* _internal_mutable_text_document();
  public:
  void unsafe_arena_set_allocated_text_document(
      ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* text_document);
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* unsafe_arena_release_text_document();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* text_document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class TextDocumentItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.TextDocumentItem) */ {
 public:
  inline TextDocumentItem() : TextDocumentItem(nullptr) {}
  virtual ~TextDocumentItem();
  explicit constexpr TextDocumentItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextDocumentItem(const TextDocumentItem& from);
  TextDocumentItem(TextDocumentItem&& from) noexcept
    : TextDocumentItem() {
    *this = ::std::move(from);
  }

  inline TextDocumentItem& operator=(const TextDocumentItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextDocumentItem& operator=(TextDocumentItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextDocumentItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextDocumentItem* internal_default_instance() {
    return reinterpret_cast<const TextDocumentItem*>(
               &_TextDocumentItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TextDocumentItem& a, TextDocumentItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TextDocumentItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextDocumentItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextDocumentItem* New() const final {
    return CreateMaybeMessage<TextDocumentItem>(nullptr);
  }

  TextDocumentItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextDocumentItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextDocumentItem& from);
  void MergeFrom(const TextDocumentItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextDocumentItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.TextDocumentItem";
  }
  protected:
  explicit TextDocumentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kLanguageIdFieldNumber = 2,
    kTextFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string language_id = 2;
  void clear_language_id();
  const std::string& language_id() const;
  void set_language_id(const std::string& value);
  void set_language_id(std::string&& value);
  void set_language_id(const char* value);
  void set_language_id(const char* value, size_t size);
  std::string* mutable_language_id();
  std::string* release_language_id();
  void set_allocated_language_id(std::string* language_id);
  private:
  const std::string& _internal_language_id() const;
  void _internal_set_language_id(const std::string& value);
  std::string* _internal_mutable_language_id();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class OpenDocumentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse) */ {
 public:
  inline OpenDocumentResponse() : OpenDocumentResponse(nullptr) {}
  virtual ~OpenDocumentResponse();
  explicit constexpr OpenDocumentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenDocumentResponse(const OpenDocumentResponse& from);
  OpenDocumentResponse(OpenDocumentResponse&& from) noexcept
    : OpenDocumentResponse() {
    *this = ::std::move(from);
  }

  inline OpenDocumentResponse& operator=(const OpenDocumentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenDocumentResponse& operator=(OpenDocumentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenDocumentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenDocumentResponse* internal_default_instance() {
    return reinterpret_cast<const OpenDocumentResponse*>(
               &_OpenDocumentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OpenDocumentResponse& a, OpenDocumentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenDocumentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenDocumentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenDocumentResponse* New() const final {
    return CreateMaybeMessage<OpenDocumentResponse>(nullptr);
  }

  OpenDocumentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenDocumentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenDocumentResponse& from);
  void MergeFrom(const OpenDocumentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenDocumentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse";
  }
  protected:
  explicit OpenDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.OpenDocumentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class CloseDocumentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest) */ {
 public:
  inline CloseDocumentRequest() : CloseDocumentRequest(nullptr) {}
  virtual ~CloseDocumentRequest();
  explicit constexpr CloseDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseDocumentRequest(const CloseDocumentRequest& from);
  CloseDocumentRequest(CloseDocumentRequest&& from) noexcept
    : CloseDocumentRequest() {
    *this = ::std::move(from);
  }

  inline CloseDocumentRequest& operator=(const CloseDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDocumentRequest& operator=(CloseDocumentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const CloseDocumentRequest*>(
               &_CloseDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CloseDocumentRequest& a, CloseDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseDocumentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseDocumentRequest* New() const final {
    return CreateMaybeMessage<CloseDocumentRequest>(nullptr);
  }

  CloseDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseDocumentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseDocumentRequest& from);
  void MergeFrom(const CloseDocumentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseDocumentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest";
  }
  protected:
  explicit CloseDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
    kTextDocumentFieldNumber = 2,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  bool has_text_document() const;
  private:
  bool _internal_has_text_document() const;
  public:
  void clear_text_document();
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* release_text_document();
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* mutable_text_document();
  void set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& _internal_text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* _internal_mutable_text_document();
  public:
  void unsafe_arena_set_allocated_text_document(
      ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document);
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* unsafe_arena_release_text_document();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class CloseDocumentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse) */ {
 public:
  inline CloseDocumentResponse() : CloseDocumentResponse(nullptr) {}
  virtual ~CloseDocumentResponse();
  explicit constexpr CloseDocumentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseDocumentResponse(const CloseDocumentResponse& from);
  CloseDocumentResponse(CloseDocumentResponse&& from) noexcept
    : CloseDocumentResponse() {
    *this = ::std::move(from);
  }

  inline CloseDocumentResponse& operator=(const CloseDocumentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDocumentResponse& operator=(CloseDocumentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseDocumentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseDocumentResponse* internal_default_instance() {
    return reinterpret_cast<const CloseDocumentResponse*>(
               &_CloseDocumentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CloseDocumentResponse& a, CloseDocumentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseDocumentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDocumentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseDocumentResponse* New() const final {
    return CreateMaybeMessage<CloseDocumentResponse>(nullptr);
  }

  CloseDocumentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseDocumentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseDocumentResponse& from);
  void MergeFrom(const CloseDocumentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseDocumentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse";
  }
  protected:
  explicit CloseDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.CloseDocumentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class ChangeDocumentRequest_TextDocumentContentChangeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent) */ {
 public:
  inline ChangeDocumentRequest_TextDocumentContentChangeEvent() : ChangeDocumentRequest_TextDocumentContentChangeEvent(nullptr) {}
  virtual ~ChangeDocumentRequest_TextDocumentContentChangeEvent();
  explicit constexpr ChangeDocumentRequest_TextDocumentContentChangeEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeDocumentRequest_TextDocumentContentChangeEvent(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from);
  ChangeDocumentRequest_TextDocumentContentChangeEvent(ChangeDocumentRequest_TextDocumentContentChangeEvent&& from) noexcept
    : ChangeDocumentRequest_TextDocumentContentChangeEvent() {
    *this = ::std::move(from);
  }

  inline ChangeDocumentRequest_TextDocumentContentChangeEvent& operator=(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeDocumentRequest_TextDocumentContentChangeEvent& operator=(ChangeDocumentRequest_TextDocumentContentChangeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeDocumentRequest_TextDocumentContentChangeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeDocumentRequest_TextDocumentContentChangeEvent* internal_default_instance() {
    return reinterpret_cast<const ChangeDocumentRequest_TextDocumentContentChangeEvent*>(
               &_ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChangeDocumentRequest_TextDocumentContentChangeEvent& a, ChangeDocumentRequest_TextDocumentContentChangeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeDocumentRequest_TextDocumentContentChangeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeDocumentRequest_TextDocumentContentChangeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeDocumentRequest_TextDocumentContentChangeEvent* New() const final {
    return CreateMaybeMessage<ChangeDocumentRequest_TextDocumentContentChangeEvent>(nullptr);
  }

  ChangeDocumentRequest_TextDocumentContentChangeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeDocumentRequest_TextDocumentContentChangeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from);
  void MergeFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeDocumentRequest_TextDocumentContentChangeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent";
  }
  protected:
  explicit ChangeDocumentRequest_TextDocumentContentChangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kRangeFieldNumber = 1,
    kRangeLengthFieldNumber = 2,
  };
  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range() const;
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* release_range();
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* mutable_range();
  void set_allocated_range(::io::deephaven::proto::backplane::script::grpc::DocumentRange* range);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& _internal_range() const;
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::io::deephaven::proto::backplane::script::grpc::DocumentRange* range);
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* unsafe_arena_release_range();

  // int32 range_length = 2;
  void clear_range_length();
  ::PROTOBUF_NAMESPACE_ID::int32 range_length() const;
  void set_range_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range_length() const;
  void _internal_set_range_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* range_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class ChangeDocumentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest) */ {
 public:
  inline ChangeDocumentRequest() : ChangeDocumentRequest(nullptr) {}
  virtual ~ChangeDocumentRequest();
  explicit constexpr ChangeDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeDocumentRequest(const ChangeDocumentRequest& from);
  ChangeDocumentRequest(ChangeDocumentRequest&& from) noexcept
    : ChangeDocumentRequest() {
    *this = ::std::move(from);
  }

  inline ChangeDocumentRequest& operator=(const ChangeDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeDocumentRequest& operator=(ChangeDocumentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeDocumentRequest*>(
               &_ChangeDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChangeDocumentRequest& a, ChangeDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeDocumentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeDocumentRequest* New() const final {
    return CreateMaybeMessage<ChangeDocumentRequest>(nullptr);
  }

  ChangeDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeDocumentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeDocumentRequest& from);
  void MergeFrom(const ChangeDocumentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeDocumentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest";
  }
  protected:
  explicit ChangeDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChangeDocumentRequest_TextDocumentContentChangeEvent TextDocumentContentChangeEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kContentChangesFieldNumber = 3,
    kConsoleIdFieldNumber = 1,
    kTextDocumentFieldNumber = 2,
  };
  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  int content_changes_size() const;
  private:
  int _internal_content_changes_size() const;
  public:
  void clear_content_changes();
  ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* mutable_content_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >*
      mutable_content_changes();
  private:
  const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent& _internal_content_changes(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* _internal_add_content_changes();
  public:
  const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent& content_changes(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* add_content_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >&
      content_changes() const;

  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  bool has_text_document() const;
  private:
  bool _internal_has_text_document() const;
  public:
  void clear_text_document();
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* release_text_document();
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* mutable_text_document();
  void set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& _internal_text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* _internal_mutable_text_document();
  public:
  void unsafe_arena_set_allocated_text_document(
      ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document);
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* unsafe_arena_release_text_document();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent > content_changes_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class DocumentRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.DocumentRange) */ {
 public:
  inline DocumentRange() : DocumentRange(nullptr) {}
  virtual ~DocumentRange();
  explicit constexpr DocumentRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentRange(const DocumentRange& from);
  DocumentRange(DocumentRange&& from) noexcept
    : DocumentRange() {
    *this = ::std::move(from);
  }

  inline DocumentRange& operator=(const DocumentRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentRange& operator=(DocumentRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentRange* internal_default_instance() {
    return reinterpret_cast<const DocumentRange*>(
               &_DocumentRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DocumentRange& a, DocumentRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentRange* New() const final {
    return CreateMaybeMessage<DocumentRange>(nullptr);
  }

  DocumentRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentRange& from);
  void MergeFrom(const DocumentRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.DocumentRange";
  }
  protected:
  explicit DocumentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::io::deephaven::proto::backplane::script::grpc::Position& start() const;
  ::io::deephaven::proto::backplane::script::grpc::Position* release_start();
  ::io::deephaven::proto::backplane::script::grpc::Position* mutable_start();
  void set_allocated_start(::io::deephaven::proto::backplane::script::grpc::Position* start);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::Position& _internal_start() const;
  ::io::deephaven::proto::backplane::script::grpc::Position* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::io::deephaven::proto::backplane::script::grpc::Position* start);
  ::io::deephaven::proto::backplane::script::grpc::Position* unsafe_arena_release_start();

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::io::deephaven::proto::backplane::script::grpc::Position& end() const;
  ::io::deephaven::proto::backplane::script::grpc::Position* release_end();
  ::io::deephaven::proto::backplane::script::grpc::Position* mutable_end();
  void set_allocated_end(::io::deephaven::proto::backplane::script::grpc::Position* end);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::Position& _internal_end() const;
  ::io::deephaven::proto::backplane::script::grpc::Position* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::io::deephaven::proto::backplane::script::grpc::Position* end);
  ::io::deephaven::proto::backplane::script::grpc::Position* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.DocumentRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::script::grpc::Position* start_;
  ::io::deephaven::proto::backplane::script::grpc::Position* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class VersionedTextDocumentIdentifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier) */ {
 public:
  inline VersionedTextDocumentIdentifier() : VersionedTextDocumentIdentifier(nullptr) {}
  virtual ~VersionedTextDocumentIdentifier();
  explicit constexpr VersionedTextDocumentIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionedTextDocumentIdentifier(const VersionedTextDocumentIdentifier& from);
  VersionedTextDocumentIdentifier(VersionedTextDocumentIdentifier&& from) noexcept
    : VersionedTextDocumentIdentifier() {
    *this = ::std::move(from);
  }

  inline VersionedTextDocumentIdentifier& operator=(const VersionedTextDocumentIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionedTextDocumentIdentifier& operator=(VersionedTextDocumentIdentifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionedTextDocumentIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionedTextDocumentIdentifier* internal_default_instance() {
    return reinterpret_cast<const VersionedTextDocumentIdentifier*>(
               &_VersionedTextDocumentIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VersionedTextDocumentIdentifier& a, VersionedTextDocumentIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionedTextDocumentIdentifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionedTextDocumentIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionedTextDocumentIdentifier* New() const final {
    return CreateMaybeMessage<VersionedTextDocumentIdentifier>(nullptr);
  }

  VersionedTextDocumentIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionedTextDocumentIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionedTextDocumentIdentifier& from);
  void MergeFrom(const VersionedTextDocumentIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionedTextDocumentIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier";
  }
  protected:
  explicit VersionedTextDocumentIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // int32 line = 1;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::int32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  ::PROTOBUF_NAMESPACE_ID::int32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class ChangeDocumentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse) */ {
 public:
  inline ChangeDocumentResponse() : ChangeDocumentResponse(nullptr) {}
  virtual ~ChangeDocumentResponse();
  explicit constexpr ChangeDocumentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeDocumentResponse(const ChangeDocumentResponse& from);
  ChangeDocumentResponse(ChangeDocumentResponse&& from) noexcept
    : ChangeDocumentResponse() {
    *this = ::std::move(from);
  }

  inline ChangeDocumentResponse& operator=(const ChangeDocumentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeDocumentResponse& operator=(ChangeDocumentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeDocumentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeDocumentResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeDocumentResponse*>(
               &_ChangeDocumentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ChangeDocumentResponse& a, ChangeDocumentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeDocumentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeDocumentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeDocumentResponse* New() const final {
    return CreateMaybeMessage<ChangeDocumentResponse>(nullptr);
  }

  ChangeDocumentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeDocumentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeDocumentResponse& from);
  void MergeFrom(const ChangeDocumentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeDocumentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse";
  }
  protected:
  explicit ChangeDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.ChangeDocumentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class GetCompletionItemsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest) */ {
 public:
  inline GetCompletionItemsRequest() : GetCompletionItemsRequest(nullptr) {}
  virtual ~GetCompletionItemsRequest();
  explicit constexpr GetCompletionItemsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompletionItemsRequest(const GetCompletionItemsRequest& from);
  GetCompletionItemsRequest(GetCompletionItemsRequest&& from) noexcept
    : GetCompletionItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetCompletionItemsRequest& operator=(const GetCompletionItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompletionItemsRequest& operator=(GetCompletionItemsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCompletionItemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompletionItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCompletionItemsRequest*>(
               &_GetCompletionItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetCompletionItemsRequest& a, GetCompletionItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompletionItemsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompletionItemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCompletionItemsRequest* New() const final {
    return CreateMaybeMessage<GetCompletionItemsRequest>(nullptr);
  }

  GetCompletionItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCompletionItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCompletionItemsRequest& from);
  void MergeFrom(const GetCompletionItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompletionItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest";
  }
  protected:
  explicit GetCompletionItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
    kContextFieldNumber = 2,
    kTextDocumentFieldNumber = 3,
    kPositionFieldNumber = 4,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& context() const;
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* release_context();
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* mutable_context();
  void set_allocated_context(::io::deephaven::proto::backplane::script::grpc::CompletionContext* context);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& _internal_context() const;
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::io::deephaven::proto::backplane::script::grpc::CompletionContext* context);
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* unsafe_arena_release_context();

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  bool has_text_document() const;
  private:
  bool _internal_has_text_document() const;
  public:
  void clear_text_document();
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* release_text_document();
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* mutable_text_document();
  void set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& _internal_text_document() const;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* _internal_mutable_text_document();
  public:
  void unsafe_arena_set_allocated_text_document(
      ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document);
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* unsafe_arena_release_text_document();

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::io::deephaven::proto::backplane::script::grpc::Position& position() const;
  ::io::deephaven::proto::backplane::script::grpc::Position* release_position();
  ::io::deephaven::proto::backplane::script::grpc::Position* mutable_position();
  void set_allocated_position(::io::deephaven::proto::backplane::script::grpc::Position* position);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::Position& _internal_position() const;
  ::io::deephaven::proto::backplane::script::grpc::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::io::deephaven::proto::backplane::script::grpc::Position* position);
  ::io::deephaven::proto::backplane::script::grpc::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* context_;
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document_;
  ::io::deephaven::proto::backplane::script::grpc::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class CompletionContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.CompletionContext) */ {
 public:
  inline CompletionContext() : CompletionContext(nullptr) {}
  virtual ~CompletionContext();
  explicit constexpr CompletionContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompletionContext(const CompletionContext& from);
  CompletionContext(CompletionContext&& from) noexcept
    : CompletionContext() {
    *this = ::std::move(from);
  }

  inline CompletionContext& operator=(const CompletionContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompletionContext& operator=(CompletionContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompletionContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompletionContext* internal_default_instance() {
    return reinterpret_cast<const CompletionContext*>(
               &_CompletionContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CompletionContext& a, CompletionContext& b) {
    a.Swap(&b);
  }
  inline void Swap(CompletionContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompletionContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompletionContext* New() const final {
    return CreateMaybeMessage<CompletionContext>(nullptr);
  }

  CompletionContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompletionContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompletionContext& from);
  void MergeFrom(const CompletionContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompletionContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.CompletionContext";
  }
  protected:
  explicit CompletionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerCharacterFieldNumber = 2,
    kTriggerKindFieldNumber = 1,
  };
  // string trigger_character = 2;
  void clear_trigger_character();
  const std::string& trigger_character() const;
  void set_trigger_character(const std::string& value);
  void set_trigger_character(std::string&& value);
  void set_trigger_character(const char* value);
  void set_trigger_character(const char* value, size_t size);
  std::string* mutable_trigger_character();
  std::string* release_trigger_character();
  void set_allocated_trigger_character(std::string* trigger_character);
  private:
  const std::string& _internal_trigger_character() const;
  void _internal_set_trigger_character(const std::string& value);
  std::string* _internal_mutable_trigger_character();
  public:

  // int32 trigger_kind = 1;
  void clear_trigger_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_kind() const;
  void set_trigger_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trigger_kind() const;
  void _internal_set_trigger_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.CompletionContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_character_;
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class GetCompletionItemsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse) */ {
 public:
  inline GetCompletionItemsResponse() : GetCompletionItemsResponse(nullptr) {}
  virtual ~GetCompletionItemsResponse();
  explicit constexpr GetCompletionItemsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompletionItemsResponse(const GetCompletionItemsResponse& from);
  GetCompletionItemsResponse(GetCompletionItemsResponse&& from) noexcept
    : GetCompletionItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetCompletionItemsResponse& operator=(const GetCompletionItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompletionItemsResponse& operator=(GetCompletionItemsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCompletionItemsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompletionItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCompletionItemsResponse*>(
               &_GetCompletionItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetCompletionItemsResponse& a, GetCompletionItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompletionItemsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompletionItemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCompletionItemsResponse* New() const final {
    return CreateMaybeMessage<GetCompletionItemsResponse>(nullptr);
  }

  GetCompletionItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCompletionItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCompletionItemsResponse& from);
  void MergeFrom(const GetCompletionItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompletionItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse";
  }
  protected:
  explicit GetCompletionItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::io::deephaven::proto::backplane::script::grpc::CompletionItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >*
      mutable_items();
  private:
  const ::io::deephaven::proto::backplane::script::grpc::CompletionItem& _internal_items(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::CompletionItem* _internal_add_items();
  public:
  const ::io::deephaven::proto::backplane::script::grpc::CompletionItem& items(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::CompletionItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::CompletionItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class CompletionItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.CompletionItem) */ {
 public:
  inline CompletionItem() : CompletionItem(nullptr) {}
  virtual ~CompletionItem();
  explicit constexpr CompletionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompletionItem(const CompletionItem& from);
  CompletionItem(CompletionItem&& from) noexcept
    : CompletionItem() {
    *this = ::std::move(from);
  }

  inline CompletionItem& operator=(const CompletionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompletionItem& operator=(CompletionItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompletionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompletionItem* internal_default_instance() {
    return reinterpret_cast<const CompletionItem*>(
               &_CompletionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CompletionItem& a, CompletionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CompletionItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompletionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompletionItem* New() const final {
    return CreateMaybeMessage<CompletionItem>(nullptr);
  }

  CompletionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompletionItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompletionItem& from);
  void MergeFrom(const CompletionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompletionItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.CompletionItem";
  }
  protected:
  explicit CompletionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalTextEditsFieldNumber = 13,
    kCommitCharactersFieldNumber = 14,
    kLabelFieldNumber = 3,
    kDetailFieldNumber = 5,
    kDocumentationFieldNumber = 6,
    kSortTextFieldNumber = 10,
    kFilterTextFieldNumber = 11,
    kTextEditFieldNumber = 9,
    kStartFieldNumber = 1,
    kLengthFieldNumber = 2,
    kKindFieldNumber = 4,
    kDeprecatedFieldNumber = 7,
    kPreselectFieldNumber = 8,
    kInsertTextFormatFieldNumber = 12,
  };
  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  int additional_text_edits_size() const;
  private:
  int _internal_additional_text_edits_size() const;
  public:
  void clear_additional_text_edits();
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* mutable_additional_text_edits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::TextEdit >*
      mutable_additional_text_edits();
  private:
  const ::io::deephaven::proto::backplane::script::grpc::TextEdit& _internal_additional_text_edits(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* _internal_add_additional_text_edits();
  public:
  const ::io::deephaven::proto::backplane::script::grpc::TextEdit& additional_text_edits(int index) const;
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* add_additional_text_edits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::TextEdit >&
      additional_text_edits() const;

  // repeated string commit_characters = 14;
  int commit_characters_size() const;
  private:
  int _internal_commit_characters_size() const;
  public:
  void clear_commit_characters();
  const std::string& commit_characters(int index) const;
  std::string* mutable_commit_characters(int index);
  void set_commit_characters(int index, const std::string& value);
  void set_commit_characters(int index, std::string&& value);
  void set_commit_characters(int index, const char* value);
  void set_commit_characters(int index, const char* value, size_t size);
  std::string* add_commit_characters();
  void add_commit_characters(const std::string& value);
  void add_commit_characters(std::string&& value);
  void add_commit_characters(const char* value);
  void add_commit_characters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& commit_characters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_commit_characters();
  private:
  const std::string& _internal_commit_characters(int index) const;
  std::string* _internal_add_commit_characters();
  public:

  // string label = 3;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string detail = 5;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // string documentation = 6;
  void clear_documentation();
  const std::string& documentation() const;
  void set_documentation(const std::string& value);
  void set_documentation(std::string&& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  std::string* mutable_documentation();
  std::string* release_documentation();
  void set_allocated_documentation(std::string* documentation);
  private:
  const std::string& _internal_documentation() const;
  void _internal_set_documentation(const std::string& value);
  std::string* _internal_mutable_documentation();
  public:

  // string sort_text = 10;
  void clear_sort_text();
  const std::string& sort_text() const;
  void set_sort_text(const std::string& value);
  void set_sort_text(std::string&& value);
  void set_sort_text(const char* value);
  void set_sort_text(const char* value, size_t size);
  std::string* mutable_sort_text();
  std::string* release_sort_text();
  void set_allocated_sort_text(std::string* sort_text);
  private:
  const std::string& _internal_sort_text() const;
  void _internal_set_sort_text(const std::string& value);
  std::string* _internal_mutable_sort_text();
  public:

  // string filter_text = 11;
  void clear_filter_text();
  const std::string& filter_text() const;
  void set_filter_text(const std::string& value);
  void set_filter_text(std::string&& value);
  void set_filter_text(const char* value);
  void set_filter_text(const char* value, size_t size);
  std::string* mutable_filter_text();
  std::string* release_filter_text();
  void set_allocated_filter_text(std::string* filter_text);
  private:
  const std::string& _internal_filter_text() const;
  void _internal_set_filter_text(const std::string& value);
  std::string* _internal_mutable_filter_text();
  public:

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  bool has_text_edit() const;
  private:
  bool _internal_has_text_edit() const;
  public:
  void clear_text_edit();
  const ::io::deephaven::proto::backplane::script::grpc::TextEdit& text_edit() const;
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* release_text_edit();
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* mutable_text_edit();
  void set_allocated_text_edit(::io::deephaven::proto::backplane::script::grpc::TextEdit* text_edit);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::TextEdit& _internal_text_edit() const;
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* _internal_mutable_text_edit();
  public:
  void unsafe_arena_set_allocated_text_edit(
      ::io::deephaven::proto::backplane::script::grpc::TextEdit* text_edit);
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* unsafe_arena_release_text_edit();

  // int32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kind = 4;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool deprecated = 7;
  void clear_deprecated();
  bool deprecated() const;
  void set_deprecated(bool value);
  private:
  bool _internal_deprecated() const;
  void _internal_set_deprecated(bool value);
  public:

  // bool preselect = 8;
  void clear_preselect();
  bool preselect() const;
  void set_preselect(bool value);
  private:
  bool _internal_preselect() const;
  void _internal_set_preselect(bool value);
  public:

  // int32 insert_text_format = 12;
  void clear_insert_text_format();
  ::PROTOBUF_NAMESPACE_ID::int32 insert_text_format() const;
  void set_insert_text_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_insert_text_format() const;
  void _internal_set_insert_text_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.CompletionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::TextEdit > additional_text_edits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> commit_characters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_text_;
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* text_edit_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::int32 kind_;
  bool deprecated_;
  bool preselect_;
  ::PROTOBUF_NAMESPACE_ID::int32 insert_text_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class TextEdit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.TextEdit) */ {
 public:
  inline TextEdit() : TextEdit(nullptr) {}
  virtual ~TextEdit();
  explicit constexpr TextEdit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextEdit(const TextEdit& from);
  TextEdit(TextEdit&& from) noexcept
    : TextEdit() {
    *this = ::std::move(from);
  }

  inline TextEdit& operator=(const TextEdit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextEdit& operator=(TextEdit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextEdit& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextEdit* internal_default_instance() {
    return reinterpret_cast<const TextEdit*>(
               &_TextEdit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TextEdit& a, TextEdit& b) {
    a.Swap(&b);
  }
  inline void Swap(TextEdit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextEdit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextEdit* New() const final {
    return CreateMaybeMessage<TextEdit>(nullptr);
  }

  TextEdit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextEdit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextEdit& from);
  void MergeFrom(const TextEdit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextEdit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.TextEdit";
  }
  protected:
  explicit TextEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range() const;
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* release_range();
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* mutable_range();
  void set_allocated_range(::io::deephaven::proto::backplane::script::grpc::DocumentRange* range);
  private:
  const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& _internal_range() const;
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::io::deephaven::proto::backplane::script::grpc::DocumentRange* range);
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* unsafe_arena_release_range();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.TextEdit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class FetchTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.FetchTableRequest) */ {
 public:
  inline FetchTableRequest() : FetchTableRequest(nullptr) {}
  virtual ~FetchTableRequest();
  explicit constexpr FetchTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchTableRequest(const FetchTableRequest& from);
  FetchTableRequest(FetchTableRequest&& from) noexcept
    : FetchTableRequest() {
    *this = ::std::move(from);
  }

  inline FetchTableRequest& operator=(const FetchTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchTableRequest& operator=(FetchTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchTableRequest* internal_default_instance() {
    return reinterpret_cast<const FetchTableRequest*>(
               &_FetchTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FetchTableRequest& a, FetchTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchTableRequest* New() const final {
    return CreateMaybeMessage<FetchTableRequest>(nullptr);
  }

  FetchTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchTableRequest& from);
  void MergeFrom(const FetchTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.FetchTableRequest";
  }
  protected:
  explicit FetchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 3,
    kConsoleIdFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // string table_name = 3;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .arrow.flight.protocol.Wicket table_id = 2;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::arrow::flight::protocol::Wicket& table_id() const;
  ::arrow::flight::protocol::Wicket* release_table_id();
  ::arrow::flight::protocol::Wicket* mutable_table_id();
  void set_allocated_table_id(::arrow::flight::protocol::Wicket* table_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_table_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::arrow::flight::protocol::Wicket* table_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.FetchTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::arrow::flight::protocol::Wicket* table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class FetchPandasTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest) */ {
 public:
  inline FetchPandasTableRequest() : FetchPandasTableRequest(nullptr) {}
  virtual ~FetchPandasTableRequest();
  explicit constexpr FetchPandasTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchPandasTableRequest(const FetchPandasTableRequest& from);
  FetchPandasTableRequest(FetchPandasTableRequest&& from) noexcept
    : FetchPandasTableRequest() {
    *this = ::std::move(from);
  }

  inline FetchPandasTableRequest& operator=(const FetchPandasTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchPandasTableRequest& operator=(FetchPandasTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchPandasTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchPandasTableRequest* internal_default_instance() {
    return reinterpret_cast<const FetchPandasTableRequest*>(
               &_FetchPandasTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FetchPandasTableRequest& a, FetchPandasTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchPandasTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchPandasTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchPandasTableRequest* New() const final {
    return CreateMaybeMessage<FetchPandasTableRequest>(nullptr);
  }

  FetchPandasTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchPandasTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchPandasTableRequest& from);
  void MergeFrom(const FetchPandasTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchPandasTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest";
  }
  protected:
  explicit FetchPandasTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // .arrow.flight.protocol.Wicket table_id = 2;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::arrow::flight::protocol::Wicket& table_id() const;
  ::arrow::flight::protocol::Wicket* release_table_id();
  ::arrow::flight::protocol::Wicket* mutable_table_id();
  void set_allocated_table_id(::arrow::flight::protocol::Wicket* table_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_table_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::arrow::flight::protocol::Wicket* table_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  ::arrow::flight::protocol::Wicket* table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class FetchFigureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest) */ {
 public:
  inline FetchFigureRequest() : FetchFigureRequest(nullptr) {}
  virtual ~FetchFigureRequest();
  explicit constexpr FetchFigureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchFigureRequest(const FetchFigureRequest& from);
  FetchFigureRequest(FetchFigureRequest&& from) noexcept
    : FetchFigureRequest() {
    *this = ::std::move(from);
  }

  inline FetchFigureRequest& operator=(const FetchFigureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchFigureRequest& operator=(FetchFigureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchFigureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchFigureRequest* internal_default_instance() {
    return reinterpret_cast<const FetchFigureRequest*>(
               &_FetchFigureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FetchFigureRequest& a, FetchFigureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchFigureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchFigureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchFigureRequest* New() const final {
    return CreateMaybeMessage<FetchFigureRequest>(nullptr);
  }

  FetchFigureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchFigureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchFigureRequest& from);
  void MergeFrom(const FetchFigureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchFigureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.FetchFigureRequest";
  }
  protected:
  explicit FetchFigureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class FetchFigureResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse) */ {
 public:
  inline FetchFigureResponse() : FetchFigureResponse(nullptr) {}
  virtual ~FetchFigureResponse();
  explicit constexpr FetchFigureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchFigureResponse(const FetchFigureResponse& from);
  FetchFigureResponse(FetchFigureResponse&& from) noexcept
    : FetchFigureResponse() {
    *this = ::std::move(from);
  }

  inline FetchFigureResponse& operator=(const FetchFigureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchFigureResponse& operator=(FetchFigureResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchFigureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchFigureResponse* internal_default_instance() {
    return reinterpret_cast<const FetchFigureResponse*>(
               &_FetchFigureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FetchFigureResponse& a, FetchFigureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchFigureResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchFigureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchFigureResponse* New() const final {
    return CreateMaybeMessage<FetchFigureResponse>(nullptr);
  }

  FetchFigureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchFigureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchFigureResponse& from);
  void MergeFrom(const FetchFigureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchFigureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.FetchFigureResponse";
  }
  protected:
  explicit FetchFigureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class FetchTableMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest) */ {
 public:
  inline FetchTableMapRequest() : FetchTableMapRequest(nullptr) {}
  virtual ~FetchTableMapRequest();
  explicit constexpr FetchTableMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchTableMapRequest(const FetchTableMapRequest& from);
  FetchTableMapRequest(FetchTableMapRequest&& from) noexcept
    : FetchTableMapRequest() {
    *this = ::std::move(from);
  }

  inline FetchTableMapRequest& operator=(const FetchTableMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchTableMapRequest& operator=(FetchTableMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchTableMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchTableMapRequest* internal_default_instance() {
    return reinterpret_cast<const FetchTableMapRequest*>(
               &_FetchTableMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FetchTableMapRequest& a, FetchTableMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchTableMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchTableMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchTableMapRequest* New() const final {
    return CreateMaybeMessage<FetchTableMapRequest>(nullptr);
  }

  FetchTableMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchTableMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchTableMapRequest& from);
  void MergeFrom(const FetchTableMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchTableMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest";
  }
  protected:
  explicit FetchTableMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsoleIdFieldNumber = 1,
  };
  // .arrow.flight.protocol.Wicket console_id = 1;
  bool has_console_id() const;
  private:
  bool _internal_has_console_id() const;
  public:
  void clear_console_id();
  const ::arrow::flight::protocol::Wicket& console_id() const;
  ::arrow::flight::protocol::Wicket* release_console_id();
  ::arrow::flight::protocol::Wicket* mutable_console_id();
  void set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_console_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_console_id();
  public:
  void unsafe_arena_set_allocated_console_id(
      ::arrow::flight::protocol::Wicket* console_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_console_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* console_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// -------------------------------------------------------------------

class FetchTableMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse) */ {
 public:
  inline FetchTableMapResponse() : FetchTableMapResponse(nullptr) {}
  virtual ~FetchTableMapResponse();
  explicit constexpr FetchTableMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchTableMapResponse(const FetchTableMapResponse& from);
  FetchTableMapResponse(FetchTableMapResponse&& from) noexcept
    : FetchTableMapResponse() {
    *this = ::std::move(from);
  }

  inline FetchTableMapResponse& operator=(const FetchTableMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchTableMapResponse& operator=(FetchTableMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchTableMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchTableMapResponse* internal_default_instance() {
    return reinterpret_cast<const FetchTableMapResponse*>(
               &_FetchTableMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FetchTableMapResponse& a, FetchTableMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchTableMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchTableMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchTableMapResponse* New() const final {
    return CreateMaybeMessage<FetchTableMapResponse>(nullptr);
  }

  FetchTableMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchTableMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchTableMapResponse& from);
  void MergeFrom(const FetchTableMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchTableMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse";
  }
  protected:
  explicit FetchTableMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_console_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.script.grpc.FetchTableMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_console_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetConsoleTypesRequest

// -------------------------------------------------------------------

// GetConsoleTypesResponse

// repeated string console_types = 1;
inline int GetConsoleTypesResponse::_internal_console_types_size() const {
  return console_types_.size();
}
inline int GetConsoleTypesResponse::console_types_size() const {
  return _internal_console_types_size();
}
inline void GetConsoleTypesResponse::clear_console_types() {
  console_types_.Clear();
}
inline std::string* GetConsoleTypesResponse::add_console_types() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  return _internal_add_console_types();
}
inline const std::string& GetConsoleTypesResponse::_internal_console_types(int index) const {
  return console_types_.Get(index);
}
inline const std::string& GetConsoleTypesResponse::console_types(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  return _internal_console_types(index);
}
inline std::string* GetConsoleTypesResponse::mutable_console_types(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  return console_types_.Mutable(index);
}
inline void GetConsoleTypesResponse::set_console_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  console_types_.Mutable(index)->assign(value);
}
inline void GetConsoleTypesResponse::set_console_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  console_types_.Mutable(index)->assign(std::move(value));
}
inline void GetConsoleTypesResponse::set_console_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  console_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
}
inline void GetConsoleTypesResponse::set_console_types(int index, const char* value, size_t size) {
  console_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
}
inline std::string* GetConsoleTypesResponse::_internal_add_console_types() {
  return console_types_.Add();
}
inline void GetConsoleTypesResponse::add_console_types(const std::string& value) {
  console_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
}
inline void GetConsoleTypesResponse::add_console_types(std::string&& value) {
  console_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
}
inline void GetConsoleTypesResponse::add_console_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  console_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
}
inline void GetConsoleTypesResponse::add_console_types(const char* value, size_t size) {
  console_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetConsoleTypesResponse::console_types() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  return console_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetConsoleTypesResponse::mutable_console_types() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types)
  return &console_types_;
}

// -------------------------------------------------------------------

// StartConsoleRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool StartConsoleRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool StartConsoleRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& StartConsoleRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& StartConsoleRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.result_id)
  return _internal_result_id();
}
inline void StartConsoleRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* StartConsoleRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* StartConsoleRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* StartConsoleRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* StartConsoleRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.result_id)
  return _internal_mutable_result_id();
}
inline void StartConsoleRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.result_id)
}

// string session_type = 2;
inline void StartConsoleRequest::clear_session_type() {
  session_type_.ClearToEmpty();
}
inline const std::string& StartConsoleRequest::session_type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
  return _internal_session_type();
}
inline void StartConsoleRequest::set_session_type(const std::string& value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
}
inline std::string* StartConsoleRequest::mutable_session_type() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
  return _internal_mutable_session_type();
}
inline const std::string& StartConsoleRequest::_internal_session_type() const {
  return session_type_.Get();
}
inline void StartConsoleRequest::_internal_set_session_type(const std::string& value) {
  
  session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartConsoleRequest::set_session_type(std::string&& value) {
  
  session_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
}
inline void StartConsoleRequest::set_session_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
}
inline void StartConsoleRequest::set_session_type(const char* value,
    size_t size) {
  
  session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
}
inline std::string* StartConsoleRequest::_internal_mutable_session_type() {
  
  return session_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartConsoleRequest::release_session_type() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
  return session_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartConsoleRequest::set_allocated_session_type(std::string* session_type) {
  if (session_type != nullptr) {
    
  } else {
    
  }
  session_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type)
}

// -------------------------------------------------------------------

// StartConsoleResponse

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool StartConsoleResponse::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool StartConsoleResponse::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& StartConsoleResponse::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& StartConsoleResponse::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.result_id)
  return _internal_result_id();
}
inline void StartConsoleResponse::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.result_id)
}
inline ::arrow::flight::protocol::Wicket* StartConsoleResponse::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* StartConsoleResponse::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* StartConsoleResponse::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* StartConsoleResponse::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.result_id)
  return _internal_mutable_result_id();
}
inline void StartConsoleResponse::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.result_id)
}

// repeated string table_names = 2;
inline int StartConsoleResponse::_internal_table_names_size() const {
  return table_names_.size();
}
inline int StartConsoleResponse::table_names_size() const {
  return _internal_table_names_size();
}
inline void StartConsoleResponse::clear_table_names() {
  table_names_.Clear();
}
inline std::string* StartConsoleResponse::add_table_names() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  return _internal_add_table_names();
}
inline const std::string& StartConsoleResponse::_internal_table_names(int index) const {
  return table_names_.Get(index);
}
inline const std::string& StartConsoleResponse::table_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  return _internal_table_names(index);
}
inline std::string* StartConsoleResponse::mutable_table_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  return table_names_.Mutable(index);
}
inline void StartConsoleResponse::set_table_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  table_names_.Mutable(index)->assign(value);
}
inline void StartConsoleResponse::set_table_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  table_names_.Mutable(index)->assign(std::move(value));
}
inline void StartConsoleResponse::set_table_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
}
inline void StartConsoleResponse::set_table_names(int index, const char* value, size_t size) {
  table_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
}
inline std::string* StartConsoleResponse::_internal_add_table_names() {
  return table_names_.Add();
}
inline void StartConsoleResponse::add_table_names(const std::string& value) {
  table_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
}
inline void StartConsoleResponse::add_table_names(std::string&& value) {
  table_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
}
inline void StartConsoleResponse::add_table_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
}
inline void StartConsoleResponse::add_table_names(const char* value, size_t size) {
  table_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartConsoleResponse::table_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  return table_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartConsoleResponse::mutable_table_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.table_names)
  return &table_names_;
}

// repeated string widget_names = 3;
inline int StartConsoleResponse::_internal_widget_names_size() const {
  return widget_names_.size();
}
inline int StartConsoleResponse::widget_names_size() const {
  return _internal_widget_names_size();
}
inline void StartConsoleResponse::clear_widget_names() {
  widget_names_.Clear();
}
inline std::string* StartConsoleResponse::add_widget_names() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  return _internal_add_widget_names();
}
inline const std::string& StartConsoleResponse::_internal_widget_names(int index) const {
  return widget_names_.Get(index);
}
inline const std::string& StartConsoleResponse::widget_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  return _internal_widget_names(index);
}
inline std::string* StartConsoleResponse::mutable_widget_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  return widget_names_.Mutable(index);
}
inline void StartConsoleResponse::set_widget_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  widget_names_.Mutable(index)->assign(value);
}
inline void StartConsoleResponse::set_widget_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  widget_names_.Mutable(index)->assign(std::move(value));
}
inline void StartConsoleResponse::set_widget_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  widget_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
}
inline void StartConsoleResponse::set_widget_names(int index, const char* value, size_t size) {
  widget_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
}
inline std::string* StartConsoleResponse::_internal_add_widget_names() {
  return widget_names_.Add();
}
inline void StartConsoleResponse::add_widget_names(const std::string& value) {
  widget_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
}
inline void StartConsoleResponse::add_widget_names(std::string&& value) {
  widget_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
}
inline void StartConsoleResponse::add_widget_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  widget_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
}
inline void StartConsoleResponse::add_widget_names(const char* value, size_t size) {
  widget_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartConsoleResponse::widget_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  return widget_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartConsoleResponse::mutable_widget_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.widget_names)
  return &widget_names_;
}

// -------------------------------------------------------------------

// LogSubscriptionRequest

// int64 last_seen_log_timestamp = 1;
inline void LogSubscriptionRequest::clear_last_seen_log_timestamp() {
  last_seen_log_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogSubscriptionRequest::_internal_last_seen_log_timestamp() const {
  return last_seen_log_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogSubscriptionRequest::last_seen_log_timestamp() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.last_seen_log_timestamp)
  return _internal_last_seen_log_timestamp();
}
inline void LogSubscriptionRequest::_internal_set_last_seen_log_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_seen_log_timestamp_ = value;
}
inline void LogSubscriptionRequest::set_last_seen_log_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_seen_log_timestamp(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.last_seen_log_timestamp)
}

// repeated string levels = 2;
inline int LogSubscriptionRequest::_internal_levels_size() const {
  return levels_.size();
}
inline int LogSubscriptionRequest::levels_size() const {
  return _internal_levels_size();
}
inline void LogSubscriptionRequest::clear_levels() {
  levels_.Clear();
}
inline std::string* LogSubscriptionRequest::add_levels() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  return _internal_add_levels();
}
inline const std::string& LogSubscriptionRequest::_internal_levels(int index) const {
  return levels_.Get(index);
}
inline const std::string& LogSubscriptionRequest::levels(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  return _internal_levels(index);
}
inline std::string* LogSubscriptionRequest::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  return levels_.Mutable(index);
}
inline void LogSubscriptionRequest::set_levels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  levels_.Mutable(index)->assign(value);
}
inline void LogSubscriptionRequest::set_levels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  levels_.Mutable(index)->assign(std::move(value));
}
inline void LogSubscriptionRequest::set_levels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  levels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
}
inline void LogSubscriptionRequest::set_levels(int index, const char* value, size_t size) {
  levels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
}
inline std::string* LogSubscriptionRequest::_internal_add_levels() {
  return levels_.Add();
}
inline void LogSubscriptionRequest::add_levels(const std::string& value) {
  levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
}
inline void LogSubscriptionRequest::add_levels(std::string&& value) {
  levels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
}
inline void LogSubscriptionRequest::add_levels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
}
inline void LogSubscriptionRequest::add_levels(const char* value, size_t size) {
  levels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogSubscriptionRequest::levels() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  return levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogSubscriptionRequest::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels)
  return &levels_;
}

// -------------------------------------------------------------------

// LogSubscriptionData

// int64 micros = 1;
inline void LogSubscriptionData::clear_micros() {
  micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogSubscriptionData::_internal_micros() const {
  return micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogSubscriptionData::micros() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.micros)
  return _internal_micros();
}
inline void LogSubscriptionData::_internal_set_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  micros_ = value;
}
inline void LogSubscriptionData::set_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_micros(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.micros)
}

// string log_level = 2;
inline void LogSubscriptionData::clear_log_level() {
  log_level_.ClearToEmpty();
}
inline const std::string& LogSubscriptionData::log_level() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
  return _internal_log_level();
}
inline void LogSubscriptionData::set_log_level(const std::string& value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
}
inline std::string* LogSubscriptionData::mutable_log_level() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
  return _internal_mutable_log_level();
}
inline const std::string& LogSubscriptionData::_internal_log_level() const {
  return log_level_.Get();
}
inline void LogSubscriptionData::_internal_set_log_level(const std::string& value) {
  
  log_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogSubscriptionData::set_log_level(std::string&& value) {
  
  log_level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
}
inline void LogSubscriptionData::set_log_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
}
inline void LogSubscriptionData::set_log_level(const char* value,
    size_t size) {
  
  log_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
}
inline std::string* LogSubscriptionData::_internal_mutable_log_level() {
  
  return log_level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogSubscriptionData::release_log_level() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
  return log_level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogSubscriptionData::set_allocated_log_level(std::string* log_level) {
  if (log_level != nullptr) {
    
  } else {
    
  }
  log_level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level)
}

// string message = 3;
inline void LogSubscriptionData::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LogSubscriptionData::message() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
  return _internal_message();
}
inline void LogSubscriptionData::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
}
inline std::string* LogSubscriptionData::mutable_message() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
  return _internal_mutable_message();
}
inline const std::string& LogSubscriptionData::_internal_message() const {
  return message_.Get();
}
inline void LogSubscriptionData::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogSubscriptionData::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
}
inline void LogSubscriptionData::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
}
inline void LogSubscriptionData::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
}
inline std::string* LogSubscriptionData::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogSubscriptionData::release_message() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogSubscriptionData::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message)
}

// -------------------------------------------------------------------

// ExecuteCommandRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool ExecuteCommandRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool ExecuteCommandRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& ExecuteCommandRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& ExecuteCommandRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.console_id)
  return _internal_console_id();
}
inline void ExecuteCommandRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* ExecuteCommandRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ExecuteCommandRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ExecuteCommandRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* ExecuteCommandRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.console_id)
  return _internal_mutable_console_id();
}
inline void ExecuteCommandRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.console_id)
}

// string code = 3;
inline void ExecuteCommandRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& ExecuteCommandRequest::code() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
  return _internal_code();
}
inline void ExecuteCommandRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
}
inline std::string* ExecuteCommandRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
  return _internal_mutable_code();
}
inline const std::string& ExecuteCommandRequest::_internal_code() const {
  return code_.Get();
}
inline void ExecuteCommandRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteCommandRequest::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
}
inline void ExecuteCommandRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
}
inline void ExecuteCommandRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
}
inline std::string* ExecuteCommandRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteCommandRequest::release_code() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteCommandRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code)
}

// -------------------------------------------------------------------

// ExecuteCommandResponse

// string error_message = 1;
inline void ExecuteCommandResponse::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& ExecuteCommandResponse::error_message() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
  return _internal_error_message();
}
inline void ExecuteCommandResponse::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
}
inline std::string* ExecuteCommandResponse::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& ExecuteCommandResponse::_internal_error_message() const {
  return error_message_.Get();
}
inline void ExecuteCommandResponse::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteCommandResponse::set_error_message(std::string&& value) {
  
  error_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
}
inline void ExecuteCommandResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
}
inline void ExecuteCommandResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
}
inline std::string* ExecuteCommandResponse::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteCommandResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteCommandResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message)
}

// repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
inline int ExecuteCommandResponse::_internal_created_size() const {
  return created_.size();
}
inline int ExecuteCommandResponse::created_size() const {
  return _internal_created_size();
}
inline void ExecuteCommandResponse::clear_created() {
  created_.Clear();
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::mutable_created(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.created)
  return created_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >*
ExecuteCommandResponse::mutable_created() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.created)
  return &created_;
}
inline const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& ExecuteCommandResponse::_internal_created(int index) const {
  return created_.Get(index);
}
inline const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& ExecuteCommandResponse::created(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.created)
  return _internal_created(index);
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::_internal_add_created() {
  return created_.Add();
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::add_created() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.created)
  return _internal_add_created();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >&
ExecuteCommandResponse::created() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.created)
  return created_;
}

// repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
inline int ExecuteCommandResponse::_internal_updated_size() const {
  return updated_.size();
}
inline int ExecuteCommandResponse::updated_size() const {
  return _internal_updated_size();
}
inline void ExecuteCommandResponse::clear_updated() {
  updated_.Clear();
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::mutable_updated(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.updated)
  return updated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >*
ExecuteCommandResponse::mutable_updated() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.updated)
  return &updated_;
}
inline const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& ExecuteCommandResponse::_internal_updated(int index) const {
  return updated_.Get(index);
}
inline const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& ExecuteCommandResponse::updated(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.updated)
  return _internal_updated(index);
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::_internal_add_updated() {
  return updated_.Add();
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::add_updated() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.updated)
  return _internal_add_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >&
ExecuteCommandResponse::updated() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.updated)
  return updated_;
}

// repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
inline int ExecuteCommandResponse::_internal_removed_size() const {
  return removed_.size();
}
inline int ExecuteCommandResponse::removed_size() const {
  return _internal_removed_size();
}
inline void ExecuteCommandResponse::clear_removed() {
  removed_.Clear();
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::mutable_removed(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.removed)
  return removed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >*
ExecuteCommandResponse::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.removed)
  return &removed_;
}
inline const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& ExecuteCommandResponse::_internal_removed(int index) const {
  return removed_.Get(index);
}
inline const ::io::deephaven::proto::backplane::script::grpc::VariableDefinition& ExecuteCommandResponse::removed(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.removed)
  return _internal_removed(index);
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::_internal_add_removed() {
  return removed_.Add();
}
inline ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* ExecuteCommandResponse::add_removed() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.removed)
  return _internal_add_removed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >&
ExecuteCommandResponse::removed() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.removed)
  return removed_;
}

// -------------------------------------------------------------------

// VariableDefinition

// string name = 1;
inline void VariableDefinition::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VariableDefinition::name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
  return _internal_name();
}
inline void VariableDefinition::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
}
inline std::string* VariableDefinition::mutable_name() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
  return _internal_mutable_name();
}
inline const std::string& VariableDefinition::_internal_name() const {
  return name_.Get();
}
inline void VariableDefinition::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VariableDefinition::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
}
inline void VariableDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
}
inline void VariableDefinition::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
}
inline std::string* VariableDefinition::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VariableDefinition::release_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariableDefinition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.VariableDefinition.name)
}

// string type = 2;
inline void VariableDefinition::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& VariableDefinition::type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
  return _internal_type();
}
inline void VariableDefinition::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
}
inline std::string* VariableDefinition::mutable_type() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
  return _internal_mutable_type();
}
inline const std::string& VariableDefinition::_internal_type() const {
  return type_.Get();
}
inline void VariableDefinition::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VariableDefinition::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
}
inline void VariableDefinition::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
}
inline void VariableDefinition::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
}
inline std::string* VariableDefinition::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VariableDefinition::release_type() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariableDefinition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.VariableDefinition.type)
}

// -------------------------------------------------------------------

// BindTableToVariableRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool BindTableToVariableRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool BindTableToVariableRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& BindTableToVariableRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& BindTableToVariableRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.console_id)
  return _internal_console_id();
}
inline void BindTableToVariableRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.console_id)
  return _internal_mutable_console_id();
}
inline void BindTableToVariableRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.console_id)
}

// string variable_name = 3;
inline void BindTableToVariableRequest::clear_variable_name() {
  variable_name_.ClearToEmpty();
}
inline const std::string& BindTableToVariableRequest::variable_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
  return _internal_variable_name();
}
inline void BindTableToVariableRequest::set_variable_name(const std::string& value) {
  _internal_set_variable_name(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
}
inline std::string* BindTableToVariableRequest::mutable_variable_name() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
  return _internal_mutable_variable_name();
}
inline const std::string& BindTableToVariableRequest::_internal_variable_name() const {
  return variable_name_.Get();
}
inline void BindTableToVariableRequest::_internal_set_variable_name(const std::string& value) {
  
  variable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BindTableToVariableRequest::set_variable_name(std::string&& value) {
  
  variable_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
}
inline void BindTableToVariableRequest::set_variable_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
}
inline void BindTableToVariableRequest::set_variable_name(const char* value,
    size_t size) {
  
  variable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
}
inline std::string* BindTableToVariableRequest::_internal_mutable_variable_name() {
  
  return variable_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BindTableToVariableRequest::release_variable_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
  return variable_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BindTableToVariableRequest::set_allocated_variable_name(std::string* variable_name) {
  if (variable_name != nullptr) {
    
  } else {
    
  }
  variable_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name)
}

// .arrow.flight.protocol.Wicket table_id = 4;
inline bool BindTableToVariableRequest::_internal_has_table_id() const {
  return this != internal_default_instance() && table_id_ != nullptr;
}
inline bool BindTableToVariableRequest::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::arrow::flight::protocol::Wicket& BindTableToVariableRequest::_internal_table_id() const {
  const ::arrow::flight::protocol::Wicket* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& BindTableToVariableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.table_id)
  return _internal_table_id();
}
inline void BindTableToVariableRequest::unsafe_arena_set_allocated_table_id(
    ::arrow::flight::protocol::Wicket* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.table_id)
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::release_table_id() {
  
  ::arrow::flight::protocol::Wicket* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.table_id)
  
  ::arrow::flight::protocol::Wicket* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::_internal_mutable_table_id() {
  
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::arrow::flight::protocol::Wicket* BindTableToVariableRequest::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.table_id)
  return _internal_mutable_table_id();
}
inline void BindTableToVariableRequest::set_allocated_table_id(::arrow::flight::protocol::Wicket* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    
  } else {
    
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.table_id)
}

// -------------------------------------------------------------------

// BindTableToVariableResponse

// -------------------------------------------------------------------

// CancelCommandRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool CancelCommandRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool CancelCommandRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& CancelCommandRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& CancelCommandRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.console_id)
  return _internal_console_id();
}
inline void CancelCommandRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.console_id)
  return _internal_mutable_console_id();
}
inline void CancelCommandRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.console_id)
}

// .arrow.flight.protocol.Wicket command_id = 2;
inline bool CancelCommandRequest::_internal_has_command_id() const {
  return this != internal_default_instance() && command_id_ != nullptr;
}
inline bool CancelCommandRequest::has_command_id() const {
  return _internal_has_command_id();
}
inline const ::arrow::flight::protocol::Wicket& CancelCommandRequest::_internal_command_id() const {
  const ::arrow::flight::protocol::Wicket* p = command_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& CancelCommandRequest::command_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.command_id)
  return _internal_command_id();
}
inline void CancelCommandRequest::unsafe_arena_set_allocated_command_id(
    ::arrow::flight::protocol::Wicket* command_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_id_);
  }
  command_id_ = command_id;
  if (command_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.command_id)
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::release_command_id() {
  
  ::arrow::flight::protocol::Wicket* temp = command_id_;
  command_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::unsafe_arena_release_command_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.command_id)
  
  ::arrow::flight::protocol::Wicket* temp = command_id_;
  command_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::_internal_mutable_command_id() {
  
  if (command_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    command_id_ = p;
  }
  return command_id_;
}
inline ::arrow::flight::protocol::Wicket* CancelCommandRequest::mutable_command_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.command_id)
  return _internal_mutable_command_id();
}
inline void CancelCommandRequest::set_allocated_command_id(::arrow::flight::protocol::Wicket* command_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_id_);
  }
  if (command_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_id)->GetArena();
    if (message_arena != submessage_arena) {
      command_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_id, submessage_arena);
    }
    
  } else {
    
  }
  command_id_ = command_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.command_id)
}

// -------------------------------------------------------------------

// CancelCommandResponse

// -------------------------------------------------------------------

// OpenDocumentRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool OpenDocumentRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool OpenDocumentRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& OpenDocumentRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& OpenDocumentRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.console_id)
  return _internal_console_id();
}
inline void OpenDocumentRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* OpenDocumentRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* OpenDocumentRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* OpenDocumentRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* OpenDocumentRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.console_id)
  return _internal_mutable_console_id();
}
inline void OpenDocumentRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.console_id)
}

// .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
inline bool OpenDocumentRequest::_internal_has_text_document() const {
  return this != internal_default_instance() && text_document_ != nullptr;
}
inline bool OpenDocumentRequest::has_text_document() const {
  return _internal_has_text_document();
}
inline void OpenDocumentRequest::clear_text_document() {
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& OpenDocumentRequest::_internal_text_document() const {
  const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* p = text_document_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem&>(
      ::io::deephaven::proto::backplane::script::grpc::_TextDocumentItem_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& OpenDocumentRequest::text_document() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.text_document)
  return _internal_text_document();
}
inline void OpenDocumentRequest::unsafe_arena_set_allocated_text_document(
    ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* text_document) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_document_);
  }
  text_document_ = text_document;
  if (text_document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.text_document)
}
inline ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* OpenDocumentRequest::release_text_document() {
  
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* temp = text_document_;
  text_document_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* OpenDocumentRequest::unsafe_arena_release_text_document() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.text_document)
  
  ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* temp = text_document_;
  text_document_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* OpenDocumentRequest::_internal_mutable_text_document() {
  
  if (text_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::TextDocumentItem>(GetArena());
    text_document_ = p;
  }
  return text_document_;
}
inline ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* OpenDocumentRequest::mutable_text_document() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.text_document)
  return _internal_mutable_text_document();
}
inline void OpenDocumentRequest::set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* text_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_document_;
  }
  if (text_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_document);
    if (message_arena != submessage_arena) {
      text_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_document, submessage_arena);
    }
    
  } else {
    
  }
  text_document_ = text_document;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.text_document)
}

// -------------------------------------------------------------------

// TextDocumentItem

// string uri = 1;
inline void TextDocumentItem::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& TextDocumentItem::uri() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
  return _internal_uri();
}
inline void TextDocumentItem::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
}
inline std::string* TextDocumentItem::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
  return _internal_mutable_uri();
}
inline const std::string& TextDocumentItem::_internal_uri() const {
  return uri_.Get();
}
inline void TextDocumentItem::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextDocumentItem::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
}
inline void TextDocumentItem::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
}
inline void TextDocumentItem::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
}
inline std::string* TextDocumentItem::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextDocumentItem::release_uri() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextDocumentItem::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri)
}

// string language_id = 2;
inline void TextDocumentItem::clear_language_id() {
  language_id_.ClearToEmpty();
}
inline const std::string& TextDocumentItem::language_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
  return _internal_language_id();
}
inline void TextDocumentItem::set_language_id(const std::string& value) {
  _internal_set_language_id(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
}
inline std::string* TextDocumentItem::mutable_language_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
  return _internal_mutable_language_id();
}
inline const std::string& TextDocumentItem::_internal_language_id() const {
  return language_id_.Get();
}
inline void TextDocumentItem::_internal_set_language_id(const std::string& value) {
  
  language_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextDocumentItem::set_language_id(std::string&& value) {
  
  language_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
}
inline void TextDocumentItem::set_language_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
}
inline void TextDocumentItem::set_language_id(const char* value,
    size_t size) {
  
  language_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
}
inline std::string* TextDocumentItem::_internal_mutable_language_id() {
  
  return language_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextDocumentItem::release_language_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
  return language_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextDocumentItem::set_allocated_language_id(std::string* language_id) {
  if (language_id != nullptr) {
    
  } else {
    
  }
  language_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id)
}

// int32 version = 3;
inline void TextDocumentItem::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextDocumentItem::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextDocumentItem::version() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.version)
  return _internal_version();
}
inline void TextDocumentItem::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void TextDocumentItem::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.version)
}

// string text = 4;
inline void TextDocumentItem::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextDocumentItem::text() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
  return _internal_text();
}
inline void TextDocumentItem::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
}
inline std::string* TextDocumentItem::mutable_text() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
  return _internal_mutable_text();
}
inline const std::string& TextDocumentItem::_internal_text() const {
  return text_.Get();
}
inline void TextDocumentItem::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextDocumentItem::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
}
inline void TextDocumentItem::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
}
inline void TextDocumentItem::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
}
inline std::string* TextDocumentItem::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextDocumentItem::release_text() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextDocumentItem::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text)
}

// -------------------------------------------------------------------

// OpenDocumentResponse

// -------------------------------------------------------------------

// CloseDocumentRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool CloseDocumentRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool CloseDocumentRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& CloseDocumentRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& CloseDocumentRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.console_id)
  return _internal_console_id();
}
inline void CloseDocumentRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* CloseDocumentRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* CloseDocumentRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* CloseDocumentRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* CloseDocumentRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.console_id)
  return _internal_mutable_console_id();
}
inline void CloseDocumentRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.console_id)
}

// .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
inline bool CloseDocumentRequest::_internal_has_text_document() const {
  return this != internal_default_instance() && text_document_ != nullptr;
}
inline bool CloseDocumentRequest::has_text_document() const {
  return _internal_has_text_document();
}
inline void CloseDocumentRequest::clear_text_document() {
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& CloseDocumentRequest::_internal_text_document() const {
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* p = text_document_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&>(
      ::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& CloseDocumentRequest::text_document() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.text_document)
  return _internal_text_document();
}
inline void CloseDocumentRequest::unsafe_arena_set_allocated_text_document(
    ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_document_);
  }
  text_document_ = text_document;
  if (text_document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.text_document)
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* CloseDocumentRequest::release_text_document() {
  
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* temp = text_document_;
  text_document_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* CloseDocumentRequest::unsafe_arena_release_text_document() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.text_document)
  
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* temp = text_document_;
  text_document_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* CloseDocumentRequest::_internal_mutable_text_document() {
  
  if (text_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(GetArena());
    text_document_ = p;
  }
  return text_document_;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* CloseDocumentRequest::mutable_text_document() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.text_document)
  return _internal_mutable_text_document();
}
inline void CloseDocumentRequest::set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_document_;
  }
  if (text_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_document);
    if (message_arena != submessage_arena) {
      text_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_document, submessage_arena);
    }
    
  } else {
    
  }
  text_document_ = text_document;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.text_document)
}

// -------------------------------------------------------------------

// CloseDocumentResponse

// -------------------------------------------------------------------

// ChangeDocumentRequest_TextDocumentContentChangeEvent

// .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
inline bool ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool ChangeDocumentRequest_TextDocumentContentChangeEvent::has_range() const {
  return _internal_has_range();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::clear_range() {
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_range() const {
  const ::io::deephaven::proto::backplane::script::grpc::DocumentRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&>(
      ::io::deephaven::proto::backplane::script::grpc::_DocumentRange_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& ChangeDocumentRequest_TextDocumentContentChangeEvent::range() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range)
  return _internal_range();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::unsafe_arena_set_allocated_range(
    ::io::deephaven::proto::backplane::script::grpc::DocumentRange* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range)
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* ChangeDocumentRequest_TextDocumentContentChangeEvent::release_range() {
  
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* ChangeDocumentRequest_TextDocumentContentChangeEvent::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range)
  
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* ChangeDocumentRequest_TextDocumentContentChangeEvent::mutable_range() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range)
  return _internal_mutable_range();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_allocated_range(::io::deephaven::proto::backplane::script::grpc::DocumentRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range)
}

// int32 range_length = 2;
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::clear_range_length() {
  range_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_range_length() const {
  return range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeDocumentRequest_TextDocumentContentChangeEvent::range_length() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range_length)
  return _internal_range_length();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_set_range_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  range_length_ = value;
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_range_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range_length(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range_length)
}

// string text = 3;
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ChangeDocumentRequest_TextDocumentContentChangeEvent::text() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
  return _internal_text();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
}
inline std::string* ChangeDocumentRequest_TextDocumentContentChangeEvent::mutable_text() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
  return _internal_mutable_text();
}
inline const std::string& ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_text() const {
  return text_.Get();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
}
inline std::string* ChangeDocumentRequest_TextDocumentContentChangeEvent::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeDocumentRequest_TextDocumentContentChangeEvent::release_text() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text)
}

// -------------------------------------------------------------------

// ChangeDocumentRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool ChangeDocumentRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool ChangeDocumentRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& ChangeDocumentRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& ChangeDocumentRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.console_id)
  return _internal_console_id();
}
inline void ChangeDocumentRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* ChangeDocumentRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ChangeDocumentRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ChangeDocumentRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* ChangeDocumentRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.console_id)
  return _internal_mutable_console_id();
}
inline void ChangeDocumentRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.console_id)
}

// .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
inline bool ChangeDocumentRequest::_internal_has_text_document() const {
  return this != internal_default_instance() && text_document_ != nullptr;
}
inline bool ChangeDocumentRequest::has_text_document() const {
  return _internal_has_text_document();
}
inline void ChangeDocumentRequest::clear_text_document() {
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& ChangeDocumentRequest::_internal_text_document() const {
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* p = text_document_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&>(
      ::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& ChangeDocumentRequest::text_document() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.text_document)
  return _internal_text_document();
}
inline void ChangeDocumentRequest::unsafe_arena_set_allocated_text_document(
    ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_document_);
  }
  text_document_ = text_document;
  if (text_document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.text_document)
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* ChangeDocumentRequest::release_text_document() {
  
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* temp = text_document_;
  text_document_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* ChangeDocumentRequest::unsafe_arena_release_text_document() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.text_document)
  
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* temp = text_document_;
  text_document_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* ChangeDocumentRequest::_internal_mutable_text_document() {
  
  if (text_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(GetArena());
    text_document_ = p;
  }
  return text_document_;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* ChangeDocumentRequest::mutable_text_document() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.text_document)
  return _internal_mutable_text_document();
}
inline void ChangeDocumentRequest::set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_document_;
  }
  if (text_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_document);
    if (message_arena != submessage_arena) {
      text_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_document, submessage_arena);
    }
    
  } else {
    
  }
  text_document_ = text_document;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.text_document)
}

// repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
inline int ChangeDocumentRequest::_internal_content_changes_size() const {
  return content_changes_.size();
}
inline int ChangeDocumentRequest::content_changes_size() const {
  return _internal_content_changes_size();
}
inline void ChangeDocumentRequest::clear_content_changes() {
  content_changes_.Clear();
}
inline ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* ChangeDocumentRequest::mutable_content_changes(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.content_changes)
  return content_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >*
ChangeDocumentRequest::mutable_content_changes() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.content_changes)
  return &content_changes_;
}
inline const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent& ChangeDocumentRequest::_internal_content_changes(int index) const {
  return content_changes_.Get(index);
}
inline const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent& ChangeDocumentRequest::content_changes(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.content_changes)
  return _internal_content_changes(index);
}
inline ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* ChangeDocumentRequest::_internal_add_content_changes() {
  return content_changes_.Add();
}
inline ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* ChangeDocumentRequest::add_content_changes() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.content_changes)
  return _internal_add_content_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >&
ChangeDocumentRequest::content_changes() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.content_changes)
  return content_changes_;
}

// -------------------------------------------------------------------

// DocumentRange

// .io.deephaven.proto.backplane.script.grpc.Position start = 1;
inline bool DocumentRange::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool DocumentRange::has_start() const {
  return _internal_has_start();
}
inline void DocumentRange::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::Position& DocumentRange::_internal_start() const {
  const ::io::deephaven::proto::backplane::script::grpc::Position* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::Position&>(
      ::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::Position& DocumentRange::start() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.DocumentRange.start)
  return _internal_start();
}
inline void DocumentRange::unsafe_arena_set_allocated_start(
    ::io::deephaven::proto::backplane::script::grpc::Position* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.DocumentRange.start)
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::release_start() {
  
  ::io::deephaven::proto::backplane::script::grpc::Position* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.DocumentRange.start)
  
  ::io::deephaven::proto::backplane::script::grpc::Position* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::mutable_start() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.DocumentRange.start)
  return _internal_mutable_start();
}
inline void DocumentRange::set_allocated_start(::io::deephaven::proto::backplane::script::grpc::Position* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.DocumentRange.start)
}

// .io.deephaven.proto.backplane.script.grpc.Position end = 2;
inline bool DocumentRange::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool DocumentRange::has_end() const {
  return _internal_has_end();
}
inline void DocumentRange::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::Position& DocumentRange::_internal_end() const {
  const ::io::deephaven::proto::backplane::script::grpc::Position* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::Position&>(
      ::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::Position& DocumentRange::end() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.DocumentRange.end)
  return _internal_end();
}
inline void DocumentRange::unsafe_arena_set_allocated_end(
    ::io::deephaven::proto::backplane::script::grpc::Position* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.DocumentRange.end)
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::release_end() {
  
  ::io::deephaven::proto::backplane::script::grpc::Position* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.DocumentRange.end)
  
  ::io::deephaven::proto::backplane::script::grpc::Position* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* DocumentRange::mutable_end() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.DocumentRange.end)
  return _internal_mutable_end();
}
inline void DocumentRange::set_allocated_end(::io::deephaven::proto::backplane::script::grpc::Position* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.DocumentRange.end)
}

// -------------------------------------------------------------------

// VersionedTextDocumentIdentifier

// string uri = 1;
inline void VersionedTextDocumentIdentifier::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& VersionedTextDocumentIdentifier::uri() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
  return _internal_uri();
}
inline void VersionedTextDocumentIdentifier::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
}
inline std::string* VersionedTextDocumentIdentifier::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
  return _internal_mutable_uri();
}
inline const std::string& VersionedTextDocumentIdentifier::_internal_uri() const {
  return uri_.Get();
}
inline void VersionedTextDocumentIdentifier::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VersionedTextDocumentIdentifier::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
}
inline void VersionedTextDocumentIdentifier::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
}
inline void VersionedTextDocumentIdentifier::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
}
inline std::string* VersionedTextDocumentIdentifier::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VersionedTextDocumentIdentifier::release_uri() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionedTextDocumentIdentifier::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri)
}

// int32 version = 2;
inline void VersionedTextDocumentIdentifier::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VersionedTextDocumentIdentifier::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VersionedTextDocumentIdentifier::version() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.version)
  return _internal_version();
}
inline void VersionedTextDocumentIdentifier::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void VersionedTextDocumentIdentifier::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.version)
}

// -------------------------------------------------------------------

// Position

// int32 line = 1;
inline void Position::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::line() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.Position.line)
  return _internal_line();
}
inline void Position::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void Position::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.Position.line)
}

// int32 character = 2;
inline void Position::clear_character() {
  character_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::character() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.Position.character)
  return _internal_character();
}
inline void Position::_internal_set_character(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  character_ = value;
}
inline void Position::set_character(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.Position.character)
}

// -------------------------------------------------------------------

// ChangeDocumentResponse

// -------------------------------------------------------------------

// GetCompletionItemsRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool GetCompletionItemsRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool GetCompletionItemsRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& GetCompletionItemsRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& GetCompletionItemsRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.console_id)
  return _internal_console_id();
}
inline void GetCompletionItemsRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* GetCompletionItemsRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* GetCompletionItemsRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* GetCompletionItemsRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* GetCompletionItemsRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.console_id)
  return _internal_mutable_console_id();
}
inline void GetCompletionItemsRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.console_id)
}

// .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
inline bool GetCompletionItemsRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool GetCompletionItemsRequest::has_context() const {
  return _internal_has_context();
}
inline void GetCompletionItemsRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& GetCompletionItemsRequest::_internal_context() const {
  const ::io::deephaven::proto::backplane::script::grpc::CompletionContext* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::CompletionContext&>(
      ::io::deephaven::proto::backplane::script::grpc::_CompletionContext_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& GetCompletionItemsRequest::context() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.context)
  return _internal_context();
}
inline void GetCompletionItemsRequest::unsafe_arena_set_allocated_context(
    ::io::deephaven::proto::backplane::script::grpc::CompletionContext* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.context)
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionContext* GetCompletionItemsRequest::release_context() {
  
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionContext* GetCompletionItemsRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.context)
  
  ::io::deephaven::proto::backplane::script::grpc::CompletionContext* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionContext* GetCompletionItemsRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CompletionContext>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionContext* GetCompletionItemsRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.context)
  return _internal_mutable_context();
}
inline void GetCompletionItemsRequest::set_allocated_context(::io::deephaven::proto::backplane::script::grpc::CompletionContext* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.context)
}

// .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
inline bool GetCompletionItemsRequest::_internal_has_text_document() const {
  return this != internal_default_instance() && text_document_ != nullptr;
}
inline bool GetCompletionItemsRequest::has_text_document() const {
  return _internal_has_text_document();
}
inline void GetCompletionItemsRequest::clear_text_document() {
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& GetCompletionItemsRequest::_internal_text_document() const {
  const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* p = text_document_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&>(
      ::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& GetCompletionItemsRequest::text_document() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.text_document)
  return _internal_text_document();
}
inline void GetCompletionItemsRequest::unsafe_arena_set_allocated_text_document(
    ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_document_);
  }
  text_document_ = text_document;
  if (text_document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.text_document)
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* GetCompletionItemsRequest::release_text_document() {
  
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* temp = text_document_;
  text_document_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* GetCompletionItemsRequest::unsafe_arena_release_text_document() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.text_document)
  
  ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* temp = text_document_;
  text_document_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* GetCompletionItemsRequest::_internal_mutable_text_document() {
  
  if (text_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(GetArena());
    text_document_ = p;
  }
  return text_document_;
}
inline ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* GetCompletionItemsRequest::mutable_text_document() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.text_document)
  return _internal_mutable_text_document();
}
inline void GetCompletionItemsRequest::set_allocated_text_document(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* text_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_document_;
  }
  if (text_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_document);
    if (message_arena != submessage_arena) {
      text_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_document, submessage_arena);
    }
    
  } else {
    
  }
  text_document_ = text_document;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.text_document)
}

// .io.deephaven.proto.backplane.script.grpc.Position position = 4;
inline bool GetCompletionItemsRequest::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GetCompletionItemsRequest::has_position() const {
  return _internal_has_position();
}
inline void GetCompletionItemsRequest::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::Position& GetCompletionItemsRequest::_internal_position() const {
  const ::io::deephaven::proto::backplane::script::grpc::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::Position&>(
      ::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::Position& GetCompletionItemsRequest::position() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.position)
  return _internal_position();
}
inline void GetCompletionItemsRequest::unsafe_arena_set_allocated_position(
    ::io::deephaven::proto::backplane::script::grpc::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.position)
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* GetCompletionItemsRequest::release_position() {
  
  ::io::deephaven::proto::backplane::script::grpc::Position* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* GetCompletionItemsRequest::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.position)
  
  ::io::deephaven::proto::backplane::script::grpc::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* GetCompletionItemsRequest::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::io::deephaven::proto::backplane::script::grpc::Position* GetCompletionItemsRequest::mutable_position() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.position)
  return _internal_mutable_position();
}
inline void GetCompletionItemsRequest::set_allocated_position(::io::deephaven::proto::backplane::script::grpc::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.position)
}

// -------------------------------------------------------------------

// CompletionContext

// int32 trigger_kind = 1;
inline void CompletionContext::clear_trigger_kind() {
  trigger_kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionContext::_internal_trigger_kind() const {
  return trigger_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionContext::trigger_kind() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_kind)
  return _internal_trigger_kind();
}
inline void CompletionContext::_internal_set_trigger_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trigger_kind_ = value;
}
inline void CompletionContext::set_trigger_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trigger_kind(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_kind)
}

// string trigger_character = 2;
inline void CompletionContext::clear_trigger_character() {
  trigger_character_.ClearToEmpty();
}
inline const std::string& CompletionContext::trigger_character() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
  return _internal_trigger_character();
}
inline void CompletionContext::set_trigger_character(const std::string& value) {
  _internal_set_trigger_character(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
}
inline std::string* CompletionContext::mutable_trigger_character() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
  return _internal_mutable_trigger_character();
}
inline const std::string& CompletionContext::_internal_trigger_character() const {
  return trigger_character_.Get();
}
inline void CompletionContext::_internal_set_trigger_character(const std::string& value) {
  
  trigger_character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompletionContext::set_trigger_character(std::string&& value) {
  
  trigger_character_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
}
inline void CompletionContext::set_trigger_character(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trigger_character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
}
inline void CompletionContext::set_trigger_character(const char* value,
    size_t size) {
  
  trigger_character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
}
inline std::string* CompletionContext::_internal_mutable_trigger_character() {
  
  return trigger_character_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionContext::release_trigger_character() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
  return trigger_character_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionContext::set_allocated_trigger_character(std::string* trigger_character) {
  if (trigger_character != nullptr) {
    
  } else {
    
  }
  trigger_character_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trigger_character,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character)
}

// -------------------------------------------------------------------

// GetCompletionItemsResponse

// repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
inline int GetCompletionItemsResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetCompletionItemsResponse::items_size() const {
  return _internal_items_size();
}
inline void GetCompletionItemsResponse::clear_items() {
  items_.Clear();
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionItem* GetCompletionItemsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >*
GetCompletionItemsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse.items)
  return &items_;
}
inline const ::io::deephaven::proto::backplane::script::grpc::CompletionItem& GetCompletionItemsResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::io::deephaven::proto::backplane::script::grpc::CompletionItem& GetCompletionItemsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse.items)
  return _internal_items(index);
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionItem* GetCompletionItemsResponse::_internal_add_items() {
  return items_.Add();
}
inline ::io::deephaven::proto::backplane::script::grpc::CompletionItem* GetCompletionItemsResponse::add_items() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >&
GetCompletionItemsResponse::items() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// CompletionItem

// int32 start = 1;
inline void CompletionItem::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::start() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.start)
  return _internal_start();
}
inline void CompletionItem::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void CompletionItem::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.start)
}

// int32 length = 2;
inline void CompletionItem::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::length() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.length)
  return _internal_length();
}
inline void CompletionItem::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void CompletionItem::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.length)
}

// string label = 3;
inline void CompletionItem::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& CompletionItem::label() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
  return _internal_label();
}
inline void CompletionItem::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
}
inline std::string* CompletionItem::mutable_label() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
  return _internal_mutable_label();
}
inline const std::string& CompletionItem::_internal_label() const {
  return label_.Get();
}
inline void CompletionItem::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompletionItem::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
}
inline void CompletionItem::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
}
inline void CompletionItem::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
}
inline std::string* CompletionItem::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionItem::release_label() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionItem::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.label)
}

// int32 kind = 4;
inline void CompletionItem::clear_kind() {
  kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::kind() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.kind)
  return _internal_kind();
}
inline void CompletionItem::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kind_ = value;
}
inline void CompletionItem::set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.kind)
}

// string detail = 5;
inline void CompletionItem::clear_detail() {
  detail_.ClearToEmpty();
}
inline const std::string& CompletionItem::detail() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
  return _internal_detail();
}
inline void CompletionItem::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
}
inline std::string* CompletionItem::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
  return _internal_mutable_detail();
}
inline const std::string& CompletionItem::_internal_detail() const {
  return detail_.Get();
}
inline void CompletionItem::_internal_set_detail(const std::string& value) {
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompletionItem::set_detail(std::string&& value) {
  
  detail_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
}
inline void CompletionItem::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
}
inline void CompletionItem::set_detail(const char* value,
    size_t size) {
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
}
inline std::string* CompletionItem::_internal_mutable_detail() {
  
  return detail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionItem::release_detail() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
  return detail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionItem::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.detail)
}

// string documentation = 6;
inline void CompletionItem::clear_documentation() {
  documentation_.ClearToEmpty();
}
inline const std::string& CompletionItem::documentation() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
  return _internal_documentation();
}
inline void CompletionItem::set_documentation(const std::string& value) {
  _internal_set_documentation(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
}
inline std::string* CompletionItem::mutable_documentation() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
  return _internal_mutable_documentation();
}
inline const std::string& CompletionItem::_internal_documentation() const {
  return documentation_.Get();
}
inline void CompletionItem::_internal_set_documentation(const std::string& value) {
  
  documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompletionItem::set_documentation(std::string&& value) {
  
  documentation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
}
inline void CompletionItem::set_documentation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
}
inline void CompletionItem::set_documentation(const char* value,
    size_t size) {
  
  documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
}
inline std::string* CompletionItem::_internal_mutable_documentation() {
  
  return documentation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionItem::release_documentation() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
  return documentation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionItem::set_allocated_documentation(std::string* documentation) {
  if (documentation != nullptr) {
    
  } else {
    
  }
  documentation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), documentation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation)
}

// bool deprecated = 7;
inline void CompletionItem::clear_deprecated() {
  deprecated_ = false;
}
inline bool CompletionItem::_internal_deprecated() const {
  return deprecated_;
}
inline bool CompletionItem::deprecated() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.deprecated)
  return _internal_deprecated();
}
inline void CompletionItem::_internal_set_deprecated(bool value) {
  
  deprecated_ = value;
}
inline void CompletionItem::set_deprecated(bool value) {
  _internal_set_deprecated(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.deprecated)
}

// bool preselect = 8;
inline void CompletionItem::clear_preselect() {
  preselect_ = false;
}
inline bool CompletionItem::_internal_preselect() const {
  return preselect_;
}
inline bool CompletionItem::preselect() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.preselect)
  return _internal_preselect();
}
inline void CompletionItem::_internal_set_preselect(bool value) {
  
  preselect_ = value;
}
inline void CompletionItem::set_preselect(bool value) {
  _internal_set_preselect(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.preselect)
}

// .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
inline bool CompletionItem::_internal_has_text_edit() const {
  return this != internal_default_instance() && text_edit_ != nullptr;
}
inline bool CompletionItem::has_text_edit() const {
  return _internal_has_text_edit();
}
inline void CompletionItem::clear_text_edit() {
  if (GetArena() == nullptr && text_edit_ != nullptr) {
    delete text_edit_;
  }
  text_edit_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::TextEdit& CompletionItem::_internal_text_edit() const {
  const ::io::deephaven::proto::backplane::script::grpc::TextEdit* p = text_edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::TextEdit&>(
      ::io::deephaven::proto::backplane::script::grpc::_TextEdit_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::TextEdit& CompletionItem::text_edit() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.text_edit)
  return _internal_text_edit();
}
inline void CompletionItem::unsafe_arena_set_allocated_text_edit(
    ::io::deephaven::proto::backplane::script::grpc::TextEdit* text_edit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_edit_);
  }
  text_edit_ = text_edit;
  if (text_edit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.text_edit)
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::release_text_edit() {
  
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* temp = text_edit_;
  text_edit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::unsafe_arena_release_text_edit() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionItem.text_edit)
  
  ::io::deephaven::proto::backplane::script::grpc::TextEdit* temp = text_edit_;
  text_edit_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::_internal_mutable_text_edit() {
  
  if (text_edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::TextEdit>(GetArena());
    text_edit_ = p;
  }
  return text_edit_;
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::mutable_text_edit() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.text_edit)
  return _internal_mutable_text_edit();
}
inline void CompletionItem::set_allocated_text_edit(::io::deephaven::proto::backplane::script::grpc::TextEdit* text_edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_edit_;
  }
  if (text_edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_edit);
    if (message_arena != submessage_arena) {
      text_edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_edit, submessage_arena);
    }
    
  } else {
    
  }
  text_edit_ = text_edit;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.text_edit)
}

// string sort_text = 10;
inline void CompletionItem::clear_sort_text() {
  sort_text_.ClearToEmpty();
}
inline const std::string& CompletionItem::sort_text() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
  return _internal_sort_text();
}
inline void CompletionItem::set_sort_text(const std::string& value) {
  _internal_set_sort_text(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
}
inline std::string* CompletionItem::mutable_sort_text() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
  return _internal_mutable_sort_text();
}
inline const std::string& CompletionItem::_internal_sort_text() const {
  return sort_text_.Get();
}
inline void CompletionItem::_internal_set_sort_text(const std::string& value) {
  
  sort_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompletionItem::set_sort_text(std::string&& value) {
  
  sort_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
}
inline void CompletionItem::set_sort_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sort_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
}
inline void CompletionItem::set_sort_text(const char* value,
    size_t size) {
  
  sort_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
}
inline std::string* CompletionItem::_internal_mutable_sort_text() {
  
  return sort_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionItem::release_sort_text() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
  return sort_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionItem::set_allocated_sort_text(std::string* sort_text) {
  if (sort_text != nullptr) {
    
  } else {
    
  }
  sort_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sort_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text)
}

// string filter_text = 11;
inline void CompletionItem::clear_filter_text() {
  filter_text_.ClearToEmpty();
}
inline const std::string& CompletionItem::filter_text() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
  return _internal_filter_text();
}
inline void CompletionItem::set_filter_text(const std::string& value) {
  _internal_set_filter_text(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
}
inline std::string* CompletionItem::mutable_filter_text() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
  return _internal_mutable_filter_text();
}
inline const std::string& CompletionItem::_internal_filter_text() const {
  return filter_text_.Get();
}
inline void CompletionItem::_internal_set_filter_text(const std::string& value) {
  
  filter_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompletionItem::set_filter_text(std::string&& value) {
  
  filter_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
}
inline void CompletionItem::set_filter_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
}
inline void CompletionItem::set_filter_text(const char* value,
    size_t size) {
  
  filter_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
}
inline std::string* CompletionItem::_internal_mutable_filter_text() {
  
  return filter_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionItem::release_filter_text() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
  return filter_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionItem::set_allocated_filter_text(std::string* filter_text) {
  if (filter_text != nullptr) {
    
  } else {
    
  }
  filter_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text)
}

// int32 insert_text_format = 12;
inline void CompletionItem::clear_insert_text_format() {
  insert_text_format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::_internal_insert_text_format() const {
  return insert_text_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompletionItem::insert_text_format() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.insert_text_format)
  return _internal_insert_text_format();
}
inline void CompletionItem::_internal_set_insert_text_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  insert_text_format_ = value;
}
inline void CompletionItem::set_insert_text_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_insert_text_format(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.insert_text_format)
}

// repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
inline int CompletionItem::_internal_additional_text_edits_size() const {
  return additional_text_edits_.size();
}
inline int CompletionItem::additional_text_edits_size() const {
  return _internal_additional_text_edits_size();
}
inline void CompletionItem::clear_additional_text_edits() {
  additional_text_edits_.Clear();
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::mutable_additional_text_edits(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.additional_text_edits)
  return additional_text_edits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::TextEdit >*
CompletionItem::mutable_additional_text_edits() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.CompletionItem.additional_text_edits)
  return &additional_text_edits_;
}
inline const ::io::deephaven::proto::backplane::script::grpc::TextEdit& CompletionItem::_internal_additional_text_edits(int index) const {
  return additional_text_edits_.Get(index);
}
inline const ::io::deephaven::proto::backplane::script::grpc::TextEdit& CompletionItem::additional_text_edits(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.additional_text_edits)
  return _internal_additional_text_edits(index);
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::_internal_add_additional_text_edits() {
  return additional_text_edits_.Add();
}
inline ::io::deephaven::proto::backplane::script::grpc::TextEdit* CompletionItem::add_additional_text_edits() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.CompletionItem.additional_text_edits)
  return _internal_add_additional_text_edits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::script::grpc::TextEdit >&
CompletionItem::additional_text_edits() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.CompletionItem.additional_text_edits)
  return additional_text_edits_;
}

// repeated string commit_characters = 14;
inline int CompletionItem::_internal_commit_characters_size() const {
  return commit_characters_.size();
}
inline int CompletionItem::commit_characters_size() const {
  return _internal_commit_characters_size();
}
inline void CompletionItem::clear_commit_characters() {
  commit_characters_.Clear();
}
inline std::string* CompletionItem::add_commit_characters() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  return _internal_add_commit_characters();
}
inline const std::string& CompletionItem::_internal_commit_characters(int index) const {
  return commit_characters_.Get(index);
}
inline const std::string& CompletionItem::commit_characters(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  return _internal_commit_characters(index);
}
inline std::string* CompletionItem::mutable_commit_characters(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  return commit_characters_.Mutable(index);
}
inline void CompletionItem::set_commit_characters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  commit_characters_.Mutable(index)->assign(value);
}
inline void CompletionItem::set_commit_characters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  commit_characters_.Mutable(index)->assign(std::move(value));
}
inline void CompletionItem::set_commit_characters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commit_characters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
}
inline void CompletionItem::set_commit_characters(int index, const char* value, size_t size) {
  commit_characters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
}
inline std::string* CompletionItem::_internal_add_commit_characters() {
  return commit_characters_.Add();
}
inline void CompletionItem::add_commit_characters(const std::string& value) {
  commit_characters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
}
inline void CompletionItem::add_commit_characters(std::string&& value) {
  commit_characters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
}
inline void CompletionItem::add_commit_characters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commit_characters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
}
inline void CompletionItem::add_commit_characters(const char* value, size_t size) {
  commit_characters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompletionItem::commit_characters() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  return commit_characters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompletionItem::mutable_commit_characters() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters)
  return &commit_characters_;
}

// -------------------------------------------------------------------

// TextEdit

// .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
inline bool TextEdit::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool TextEdit::has_range() const {
  return _internal_has_range();
}
inline void TextEdit::clear_range() {
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& TextEdit::_internal_range() const {
  const ::io::deephaven::proto::backplane::script::grpc::DocumentRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&>(
      ::io::deephaven::proto::backplane::script::grpc::_DocumentRange_default_instance_);
}
inline const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& TextEdit::range() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.TextEdit.range)
  return _internal_range();
}
inline void TextEdit::unsafe_arena_set_allocated_range(
    ::io::deephaven::proto::backplane::script::grpc::DocumentRange* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.TextEdit.range)
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* TextEdit::release_range() {
  
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* TextEdit::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.TextEdit.range)
  
  ::io::deephaven::proto::backplane::script::grpc::DocumentRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* TextEdit::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::io::deephaven::proto::backplane::script::grpc::DocumentRange* TextEdit::mutable_range() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.TextEdit.range)
  return _internal_mutable_range();
}
inline void TextEdit::set_allocated_range(::io::deephaven::proto::backplane::script::grpc::DocumentRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.TextEdit.range)
}

// string text = 2;
inline void TextEdit::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextEdit::text() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
  return _internal_text();
}
inline void TextEdit::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
}
inline std::string* TextEdit::mutable_text() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
  return _internal_mutable_text();
}
inline const std::string& TextEdit::_internal_text() const {
  return text_.Get();
}
inline void TextEdit::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextEdit::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
}
inline void TextEdit::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
}
inline void TextEdit::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
}
inline std::string* TextEdit::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextEdit::release_text() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextEdit::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.TextEdit.text)
}

// -------------------------------------------------------------------

// FetchTableRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool FetchTableRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool FetchTableRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& FetchTableRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FetchTableRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.console_id)
  return _internal_console_id();
}
inline void FetchTableRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.console_id)
  return _internal_mutable_console_id();
}
inline void FetchTableRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.console_id)
}

// .arrow.flight.protocol.Wicket table_id = 2;
inline bool FetchTableRequest::_internal_has_table_id() const {
  return this != internal_default_instance() && table_id_ != nullptr;
}
inline bool FetchTableRequest::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::arrow::flight::protocol::Wicket& FetchTableRequest::_internal_table_id() const {
  const ::arrow::flight::protocol::Wicket* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FetchTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_id)
  return _internal_table_id();
}
inline void FetchTableRequest::unsafe_arena_set_allocated_table_id(
    ::arrow::flight::protocol::Wicket* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_id)
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::release_table_id() {
  
  ::arrow::flight::protocol::Wicket* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_id)
  
  ::arrow::flight::protocol::Wicket* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::_internal_mutable_table_id() {
  
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::arrow::flight::protocol::Wicket* FetchTableRequest::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_id)
  return _internal_mutable_table_id();
}
inline void FetchTableRequest::set_allocated_table_id(::arrow::flight::protocol::Wicket* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    
  } else {
    
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_id)
}

// string table_name = 3;
inline void FetchTableRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& FetchTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
  return _internal_table_name();
}
inline void FetchTableRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
}
inline std::string* FetchTableRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& FetchTableRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void FetchTableRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchTableRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
}
inline void FetchTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
}
inline void FetchTableRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
}
inline std::string* FetchTableRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchTableRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableRequest.table_name)
}

// -------------------------------------------------------------------

// FetchPandasTableRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool FetchPandasTableRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool FetchPandasTableRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& FetchPandasTableRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FetchPandasTableRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.console_id)
  return _internal_console_id();
}
inline void FetchPandasTableRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.console_id)
  return _internal_mutable_console_id();
}
inline void FetchPandasTableRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.console_id)
}

// .arrow.flight.protocol.Wicket table_id = 2;
inline bool FetchPandasTableRequest::_internal_has_table_id() const {
  return this != internal_default_instance() && table_id_ != nullptr;
}
inline bool FetchPandasTableRequest::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::arrow::flight::protocol::Wicket& FetchPandasTableRequest::_internal_table_id() const {
  const ::arrow::flight::protocol::Wicket* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FetchPandasTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.table_id)
  return _internal_table_id();
}
inline void FetchPandasTableRequest::unsafe_arena_set_allocated_table_id(
    ::arrow::flight::protocol::Wicket* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.table_id)
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::release_table_id() {
  
  ::arrow::flight::protocol::Wicket* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.table_id)
  
  ::arrow::flight::protocol::Wicket* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::_internal_mutable_table_id() {
  
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::arrow::flight::protocol::Wicket* FetchPandasTableRequest::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.table_id)
  return _internal_mutable_table_id();
}
inline void FetchPandasTableRequest::set_allocated_table_id(::arrow::flight::protocol::Wicket* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    
  } else {
    
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchPandasTableRequest.table_id)
}

// -------------------------------------------------------------------

// FetchFigureRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool FetchFigureRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool FetchFigureRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& FetchFigureRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FetchFigureRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest.console_id)
  return _internal_console_id();
}
inline void FetchFigureRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* FetchFigureRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchFigureRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchFigureRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* FetchFigureRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest.console_id)
  return _internal_mutable_console_id();
}
inline void FetchFigureRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest.console_id)
}

// -------------------------------------------------------------------

// FetchFigureResponse

// -------------------------------------------------------------------

// FetchTableMapRequest

// .arrow.flight.protocol.Wicket console_id = 1;
inline bool FetchTableMapRequest::_internal_has_console_id() const {
  return this != internal_default_instance() && console_id_ != nullptr;
}
inline bool FetchTableMapRequest::has_console_id() const {
  return _internal_has_console_id();
}
inline const ::arrow::flight::protocol::Wicket& FetchTableMapRequest::_internal_console_id() const {
  const ::arrow::flight::protocol::Wicket* p = console_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FetchTableMapRequest::console_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest.console_id)
  return _internal_console_id();
}
inline void FetchTableMapRequest::unsafe_arena_set_allocated_console_id(
    ::arrow::flight::protocol::Wicket* console_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  console_id_ = console_id;
  if (console_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest.console_id)
}
inline ::arrow::flight::protocol::Wicket* FetchTableMapRequest::release_console_id() {
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchTableMapRequest::unsafe_arena_release_console_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest.console_id)
  
  ::arrow::flight::protocol::Wicket* temp = console_id_;
  console_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FetchTableMapRequest::_internal_mutable_console_id() {
  
  if (console_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    console_id_ = p;
  }
  return console_id_;
}
inline ::arrow::flight::protocol::Wicket* FetchTableMapRequest::mutable_console_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest.console_id)
  return _internal_mutable_console_id();
}
inline void FetchTableMapRequest::set_allocated_console_id(::arrow::flight::protocol::Wicket* console_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id_);
  }
  if (console_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console_id)->GetArena();
    if (message_arena != submessage_arena) {
      console_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console_id, submessage_arena);
    }
    
  } else {
    
  }
  console_id_ = console_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.FetchTableMapRequest.console_id)
}

// -------------------------------------------------------------------

// FetchTableMapResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_console_2eproto
