// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_table_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_table_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flight.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_table_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_table_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_table_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_table_2eproto_metadata_getter(int index);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class BatchTableRequest;
struct BatchTableRequestDefaultTypeInternal;
extern BatchTableRequestDefaultTypeInternal _BatchTableRequest_default_instance_;
class BatchTableRequest_Operation;
struct BatchTableRequest_OperationDefaultTypeInternal;
extern BatchTableRequest_OperationDefaultTypeInternal _BatchTableRequest_Operation_default_instance_;
class ComboAggregateRequest;
struct ComboAggregateRequestDefaultTypeInternal;
extern ComboAggregateRequestDefaultTypeInternal _ComboAggregateRequest_default_instance_;
class ComboAggregateRequest_Aggregate;
struct ComboAggregateRequest_AggregateDefaultTypeInternal;
extern ComboAggregateRequest_AggregateDefaultTypeInternal _ComboAggregateRequest_Aggregate_default_instance_;
class DropColumnsRequest;
struct DropColumnsRequestDefaultTypeInternal;
extern DropColumnsRequestDefaultTypeInternal _DropColumnsRequest_default_instance_;
class EmptyTableRequest;
struct EmptyTableRequestDefaultTypeInternal;
extern EmptyTableRequestDefaultTypeInternal _EmptyTableRequest_default_instance_;
class ExportedTableCreationResponse;
struct ExportedTableCreationResponseDefaultTypeInternal;
extern ExportedTableCreationResponseDefaultTypeInternal _ExportedTableCreationResponse_default_instance_;
class ExportedTableUpdateBatchMessage;
struct ExportedTableUpdateBatchMessageDefaultTypeInternal;
extern ExportedTableUpdateBatchMessageDefaultTypeInternal _ExportedTableUpdateBatchMessage_default_instance_;
class ExportedTableUpdateMessage;
struct ExportedTableUpdateMessageDefaultTypeInternal;
extern ExportedTableUpdateMessageDefaultTypeInternal _ExportedTableUpdateMessage_default_instance_;
class ExportedTableUpdatesRequest;
struct ExportedTableUpdatesRequestDefaultTypeInternal;
extern ExportedTableUpdatesRequestDefaultTypeInternal _ExportedTableUpdatesRequest_default_instance_;
class FilterDescription;
struct FilterDescriptionDefaultTypeInternal;
extern FilterDescriptionDefaultTypeInternal _FilterDescription_default_instance_;
class FilterTableRequest;
struct FilterTableRequestDefaultTypeInternal;
extern FilterTableRequestDefaultTypeInternal _FilterTableRequest_default_instance_;
class FlattenRequest;
struct FlattenRequestDefaultTypeInternal;
extern FlattenRequestDefaultTypeInternal _FlattenRequest_default_instance_;
class HeadOrTailByRequest;
struct HeadOrTailByRequestDefaultTypeInternal;
extern HeadOrTailByRequestDefaultTypeInternal _HeadOrTailByRequest_default_instance_;
class HeadOrTailRequest;
struct HeadOrTailRequestDefaultTypeInternal;
extern HeadOrTailRequestDefaultTypeInternal _HeadOrTailRequest_default_instance_;
class JoinTablesRequest;
struct JoinTablesRequestDefaultTypeInternal;
extern JoinTablesRequestDefaultTypeInternal _JoinTablesRequest_default_instance_;
class MergeTablesRequest;
struct MergeTablesRequestDefaultTypeInternal;
extern MergeTablesRequestDefaultTypeInternal _MergeTablesRequest_default_instance_;
class SelectDistinctRequest;
struct SelectDistinctRequestDefaultTypeInternal;
extern SelectDistinctRequestDefaultTypeInternal _SelectDistinctRequest_default_instance_;
class SelectOrUpdateRequest;
struct SelectOrUpdateRequestDefaultTypeInternal;
extern SelectOrUpdateRequestDefaultTypeInternal _SelectOrUpdateRequest_default_instance_;
class SnapshotTableRequest;
struct SnapshotTableRequestDefaultTypeInternal;
extern SnapshotTableRequestDefaultTypeInternal _SnapshotTableRequest_default_instance_;
class SortDescriptor;
struct SortDescriptorDefaultTypeInternal;
extern SortDescriptorDefaultTypeInternal _SortDescriptor_default_instance_;
class SortTableRequest;
struct SortTableRequestDefaultTypeInternal;
extern SortTableRequestDefaultTypeInternal _SortTableRequest_default_instance_;
class TableReference;
struct TableReferenceDefaultTypeInternal;
extern TableReferenceDefaultTypeInternal _TableReference_default_instance_;
class TimeTableRequest;
struct TimeTableRequestDefaultTypeInternal;
extern TimeTableRequestDefaultTypeInternal _TimeTableRequest_default_instance_;
class UngroupRequest;
struct UngroupRequestDefaultTypeInternal;
extern UngroupRequestDefaultTypeInternal _UngroupRequest_default_instance_;
class UnstructuredFilterTableRequest;
struct UnstructuredFilterTableRequestDefaultTypeInternal;
extern UnstructuredFilterTableRequestDefaultTypeInternal _UnstructuredFilterTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::BatchTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::BatchTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::DropColumnsRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::EmptyTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportedTableUpdateBatchMessage>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FilterDescription* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FilterDescription>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FilterTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FilterTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FlattenRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FlattenRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::JoinTablesRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::MergeTablesRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::SelectDistinctRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::SnapshotTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::SortDescriptor* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::SortDescriptor>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::SortTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::SortTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TableReference* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TimeTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TimeTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::UngroupRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::UngroupRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

enum JoinTablesRequest_Type : int {
  JoinTablesRequest_Type_CROSS_JOIN = 0,
  JoinTablesRequest_Type_NATURAL_JOIN = 1,
  JoinTablesRequest_Type_AS_OF_JOIN = 2,
  JoinTablesRequest_Type_REVERSE_AS_OF_JOIN = 3,
  JoinTablesRequest_Type_EXACT_JOIN = 4,
  JoinTablesRequest_Type_LEFT_JOIN = 5,
  JoinTablesRequest_Type_JoinTablesRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JoinTablesRequest_Type_JoinTablesRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JoinTablesRequest_Type_IsValid(int value);
constexpr JoinTablesRequest_Type JoinTablesRequest_Type_Type_MIN = JoinTablesRequest_Type_CROSS_JOIN;
constexpr JoinTablesRequest_Type JoinTablesRequest_Type_Type_MAX = JoinTablesRequest_Type_LEFT_JOIN;
constexpr int JoinTablesRequest_Type_Type_ARRAYSIZE = JoinTablesRequest_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinTablesRequest_Type_descriptor();
template<typename T>
inline const std::string& JoinTablesRequest_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinTablesRequest_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinTablesRequest_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinTablesRequest_Type_descriptor(), enum_t_value);
}
inline bool JoinTablesRequest_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinTablesRequest_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinTablesRequest_Type>(
    JoinTablesRequest_Type_descriptor(), name, value);
}
enum ComboAggregateRequest_AggType : int {
  ComboAggregateRequest_AggType_SUM = 0,
  ComboAggregateRequest_AggType_ABS_SUM = 1,
  ComboAggregateRequest_AggType_ARRAY = 2,
  ComboAggregateRequest_AggType_AVG = 3,
  ComboAggregateRequest_AggType_COUNT = 4,
  ComboAggregateRequest_AggType_FIRST = 5,
  ComboAggregateRequest_AggType_LAST = 6,
  ComboAggregateRequest_AggType_MIN = 7,
  ComboAggregateRequest_AggType_MAX = 8,
  ComboAggregateRequest_AggType_MEDIAN = 9,
  ComboAggregateRequest_AggType_PERCENTILE = 10,
  ComboAggregateRequest_AggType_STD = 11,
  ComboAggregateRequest_AggType_VAR = 12,
  ComboAggregateRequest_AggType_WEIGHTED_AVG = 13,
  ComboAggregateRequest_AggType_ComboAggregateRequest_AggType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComboAggregateRequest_AggType_ComboAggregateRequest_AggType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComboAggregateRequest_AggType_IsValid(int value);
constexpr ComboAggregateRequest_AggType ComboAggregateRequest_AggType_AggType_MIN = ComboAggregateRequest_AggType_SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest_AggType_AggType_MAX = ComboAggregateRequest_AggType_WEIGHTED_AVG;
constexpr int ComboAggregateRequest_AggType_AggType_ARRAYSIZE = ComboAggregateRequest_AggType_AggType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComboAggregateRequest_AggType_descriptor();
template<typename T>
inline const std::string& ComboAggregateRequest_AggType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComboAggregateRequest_AggType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComboAggregateRequest_AggType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComboAggregateRequest_AggType_descriptor(), enum_t_value);
}
inline bool ComboAggregateRequest_AggType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComboAggregateRequest_AggType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComboAggregateRequest_AggType>(
    ComboAggregateRequest_AggType_descriptor(), name, value);
}
enum SortDescriptor_SortDirection : int {
  SortDescriptor_SortDirection_UNKNOWN = 0,
  SortDescriptor_SortDirection_DESCENDING = -1,
  SortDescriptor_SortDirection_ASCENDING = 1,
  SortDescriptor_SortDirection_REVERSE = 2,
  SortDescriptor_SortDirection_SortDescriptor_SortDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SortDescriptor_SortDirection_SortDescriptor_SortDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SortDescriptor_SortDirection_IsValid(int value);
constexpr SortDescriptor_SortDirection SortDescriptor_SortDirection_SortDirection_MIN = SortDescriptor_SortDirection_DESCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor_SortDirection_SortDirection_MAX = SortDescriptor_SortDirection_REVERSE;
constexpr int SortDescriptor_SortDirection_SortDirection_ARRAYSIZE = SortDescriptor_SortDirection_SortDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDescriptor_SortDirection_descriptor();
template<typename T>
inline const std::string& SortDescriptor_SortDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SortDescriptor_SortDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SortDescriptor_SortDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SortDescriptor_SortDirection_descriptor(), enum_t_value);
}
inline bool SortDescriptor_SortDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SortDescriptor_SortDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SortDescriptor_SortDirection>(
    SortDescriptor_SortDirection_descriptor(), name, value);
}
enum FilterDescription_Operation : int {
  FilterDescription_Operation_UNKNOWN = 0,
  FilterDescription_Operation_AND = 1,
  FilterDescription_Operation_OR = 2,
  FilterDescription_Operation_NOT = 3,
  FilterDescription_Operation_LT = 4,
  FilterDescription_Operation_GT = 5,
  FilterDescription_Operation_LTE = 6,
  FilterDescription_Operation_GTE = 7,
  FilterDescription_Operation_EQ = 8,
  FilterDescription_Operation_EQ_ICASE = 9,
  FilterDescription_Operation_NEQ = 10,
  FilterDescription_Operation_NEQ_ICASE = 11,
  FilterDescription_Operation_IN = 12,
  FilterDescription_Operation_IN_ICASE = 13,
  FilterDescription_Operation_NOT_IN = 14,
  FilterDescription_Operation_NOT_IN_ICASE = 15,
  FilterDescription_Operation_IS_NULL = 16,
  FilterDescription_Operation_INVOKE = 17,
  FilterDescription_Operation_LITERAL = 18,
  FilterDescription_Operation_REFERENCE = 19,
  FilterDescription_Operation_CONTAINS = 20,
  FilterDescription_Operation_CONTAINS_ICASE = 21,
  FilterDescription_Operation_MATCHES = 22,
  FilterDescription_Operation_MATCHES_ICASE = 23,
  FilterDescription_Operation_SEARCH = 24,
  FilterDescription_Operation_FilterDescription_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FilterDescription_Operation_FilterDescription_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FilterDescription_Operation_IsValid(int value);
constexpr FilterDescription_Operation FilterDescription_Operation_Operation_MIN = FilterDescription_Operation_UNKNOWN;
constexpr FilterDescription_Operation FilterDescription_Operation_Operation_MAX = FilterDescription_Operation_SEARCH;
constexpr int FilterDescription_Operation_Operation_ARRAYSIZE = FilterDescription_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterDescription_Operation_descriptor();
template<typename T>
inline const std::string& FilterDescription_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterDescription_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterDescription_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FilterDescription_Operation_descriptor(), enum_t_value);
}
inline bool FilterDescription_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterDescription_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FilterDescription_Operation>(
    FilterDescription_Operation_descriptor(), name, value);
}
// ===================================================================

class TableReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TableReference) */ {
 public:
  inline TableReference() : TableReference(nullptr) {}
  virtual ~TableReference();
  explicit constexpr TableReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableReference(const TableReference& from);
  TableReference(TableReference&& from) noexcept
    : TableReference() {
    *this = ::std::move(from);
  }

  inline TableReference& operator=(const TableReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableReference& operator=(TableReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableReference& default_instance() {
    return *internal_default_instance();
  }
  enum RefCase {
    kTicket = 1,
    kBatchOffset = 2,
    REF_NOT_SET = 0,
  };

  static inline const TableReference* internal_default_instance() {
    return reinterpret_cast<const TableReference*>(
               &_TableReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TableReference& a, TableReference& b) {
    a.Swap(&b);
  }
  inline void Swap(TableReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableReference* New() const final {
    return CreateMaybeMessage<TableReference>(nullptr);
  }

  TableReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableReference& from);
  void MergeFrom(const TableReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TableReference";
  }
  protected:
  explicit TableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kBatchOffsetFieldNumber = 2,
  };
  // .arrow.flight.protocol.Wicket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::arrow::flight::protocol::Wicket& ticket() const;
  ::arrow::flight::protocol::Wicket* release_ticket();
  ::arrow::flight::protocol::Wicket* mutable_ticket();
  void set_allocated_ticket(::arrow::flight::protocol::Wicket* ticket);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_ticket() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_ticket();
  public:
  void unsafe_arena_set_allocated_ticket(
      ::arrow::flight::protocol::Wicket* ticket);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_ticket();

  // sint32 batch_offset = 2;
  bool has_batch_offset() const;
  private:
  bool _internal_has_batch_offset() const;
  public:
  void clear_batch_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_offset() const;
  void set_batch_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_offset() const;
  void _internal_set_batch_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_ref();
  RefCase ref_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TableReference)
 private:
  class _Internal;
  void set_has_ticket();
  void set_has_batch_offset();

  inline bool has_ref() const;
  inline void clear_has_ref();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RefUnion {
    constexpr RefUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::arrow::flight::protocol::Wicket* ticket_;
    ::PROTOBUF_NAMESPACE_ID::int32 batch_offset_;
  } ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class ExportedTableCreationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse) */ {
 public:
  inline ExportedTableCreationResponse() : ExportedTableCreationResponse(nullptr) {}
  virtual ~ExportedTableCreationResponse();
  explicit constexpr ExportedTableCreationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportedTableCreationResponse(const ExportedTableCreationResponse& from);
  ExportedTableCreationResponse(ExportedTableCreationResponse&& from) noexcept
    : ExportedTableCreationResponse() {
    *this = ::std::move(from);
  }

  inline ExportedTableCreationResponse& operator=(const ExportedTableCreationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportedTableCreationResponse& operator=(ExportedTableCreationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportedTableCreationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportedTableCreationResponse* internal_default_instance() {
    return reinterpret_cast<const ExportedTableCreationResponse*>(
               &_ExportedTableCreationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExportedTableCreationResponse& a, ExportedTableCreationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportedTableCreationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportedTableCreationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportedTableCreationResponse* New() const final {
    return CreateMaybeMessage<ExportedTableCreationResponse>(nullptr);
  }

  ExportedTableCreationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportedTableCreationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportedTableCreationResponse& from);
  void MergeFrom(const ExportedTableCreationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportedTableCreationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse";
  }
  protected:
  explicit ExportedTableCreationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 3,
    kSchemaHeaderFieldNumber = 4,
    kResultIdFieldNumber = 1,
    kSizeFieldNumber = 6,
    kSuccessFieldNumber = 2,
    kIsStaticFieldNumber = 5,
  };
  // string error_info = 3;
  void clear_error_info();
  const std::string& error_info() const;
  void set_error_info(const std::string& value);
  void set_error_info(std::string&& value);
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  std::string* mutable_error_info();
  std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bytes schema_header = 4;
  void clear_schema_header();
  const std::string& schema_header() const;
  void set_schema_header(const std::string& value);
  void set_schema_header(std::string&& value);
  void set_schema_header(const char* value);
  void set_schema_header(const void* value, size_t size);
  std::string* mutable_schema_header();
  std::string* release_schema_header();
  void set_allocated_schema_header(std::string* schema_header);
  private:
  const std::string& _internal_schema_header() const;
  void _internal_set_schema_header(const std::string& value);
  std::string* _internal_mutable_schema_header();
  public:

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& result_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_result_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::TableReference* result_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* result_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_result_id();

  // sint64 size = 6 [jstype = JS_STRING];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool is_static = 5;
  void clear_is_static();
  bool is_static() const;
  void set_is_static(bool value);
  private:
  bool _internal_is_static() const;
  void _internal_set_is_static(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_header_;
  ::io::deephaven::proto::backplane::grpc::TableReference* result_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  bool success_;
  bool is_static_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class ExportedTableUpdatesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest) */ {
 public:
  inline ExportedTableUpdatesRequest() : ExportedTableUpdatesRequest(nullptr) {}
  virtual ~ExportedTableUpdatesRequest();
  explicit constexpr ExportedTableUpdatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportedTableUpdatesRequest(const ExportedTableUpdatesRequest& from);
  ExportedTableUpdatesRequest(ExportedTableUpdatesRequest&& from) noexcept
    : ExportedTableUpdatesRequest() {
    *this = ::std::move(from);
  }

  inline ExportedTableUpdatesRequest& operator=(const ExportedTableUpdatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportedTableUpdatesRequest& operator=(ExportedTableUpdatesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportedTableUpdatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportedTableUpdatesRequest* internal_default_instance() {
    return reinterpret_cast<const ExportedTableUpdatesRequest*>(
               &_ExportedTableUpdatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExportedTableUpdatesRequest& a, ExportedTableUpdatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportedTableUpdatesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportedTableUpdatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportedTableUpdatesRequest* New() const final {
    return CreateMaybeMessage<ExportedTableUpdatesRequest>(nullptr);
  }

  ExportedTableUpdatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportedTableUpdatesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportedTableUpdatesRequest& from);
  void MergeFrom(const ExportedTableUpdatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportedTableUpdatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest";
  }
  protected:
  explicit ExportedTableUpdatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class ExportedTableUpdateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage) */ {
 public:
  inline ExportedTableUpdateMessage() : ExportedTableUpdateMessage(nullptr) {}
  virtual ~ExportedTableUpdateMessage();
  explicit constexpr ExportedTableUpdateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportedTableUpdateMessage(const ExportedTableUpdateMessage& from);
  ExportedTableUpdateMessage(ExportedTableUpdateMessage&& from) noexcept
    : ExportedTableUpdateMessage() {
    *this = ::std::move(from);
  }

  inline ExportedTableUpdateMessage& operator=(const ExportedTableUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportedTableUpdateMessage& operator=(ExportedTableUpdateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportedTableUpdateMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportedTableUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const ExportedTableUpdateMessage*>(
               &_ExportedTableUpdateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExportedTableUpdateMessage& a, ExportedTableUpdateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportedTableUpdateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportedTableUpdateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportedTableUpdateMessage* New() const final {
    return CreateMaybeMessage<ExportedTableUpdateMessage>(nullptr);
  }

  ExportedTableUpdateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportedTableUpdateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportedTableUpdateMessage& from);
  void MergeFrom(const ExportedTableUpdateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportedTableUpdateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage";
  }
  protected:
  explicit ExportedTableUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFailureMessageFieldNumber = 3,
    kExportIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string update_failure_message = 3;
  void clear_update_failure_message();
  const std::string& update_failure_message() const;
  void set_update_failure_message(const std::string& value);
  void set_update_failure_message(std::string&& value);
  void set_update_failure_message(const char* value);
  void set_update_failure_message(const char* value, size_t size);
  std::string* mutable_update_failure_message();
  std::string* release_update_failure_message();
  void set_allocated_update_failure_message(std::string* update_failure_message);
  private:
  const std::string& _internal_update_failure_message() const;
  void _internal_set_update_failure_message(const std::string& value);
  std::string* _internal_mutable_update_failure_message();
  public:

  // .arrow.flight.protocol.Wicket export_id = 1;
  bool has_export_id() const;
  private:
  bool _internal_has_export_id() const;
  public:
  void clear_export_id();
  const ::arrow::flight::protocol::Wicket& export_id() const;
  ::arrow::flight::protocol::Wicket* release_export_id();
  ::arrow::flight::protocol::Wicket* mutable_export_id();
  void set_allocated_export_id(::arrow::flight::protocol::Wicket* export_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_export_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_export_id();
  public:
  void unsafe_arena_set_allocated_export_id(
      ::arrow::flight::protocol::Wicket* export_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_export_id();

  // sint64 size = 2 [jstype = JS_STRING];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_failure_message_;
  ::arrow::flight::protocol::Wicket* export_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class ExportedTableUpdateBatchMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage) */ {
 public:
  inline ExportedTableUpdateBatchMessage() : ExportedTableUpdateBatchMessage(nullptr) {}
  virtual ~ExportedTableUpdateBatchMessage();
  explicit constexpr ExportedTableUpdateBatchMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportedTableUpdateBatchMessage(const ExportedTableUpdateBatchMessage& from);
  ExportedTableUpdateBatchMessage(ExportedTableUpdateBatchMessage&& from) noexcept
    : ExportedTableUpdateBatchMessage() {
    *this = ::std::move(from);
  }

  inline ExportedTableUpdateBatchMessage& operator=(const ExportedTableUpdateBatchMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportedTableUpdateBatchMessage& operator=(ExportedTableUpdateBatchMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportedTableUpdateBatchMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportedTableUpdateBatchMessage* internal_default_instance() {
    return reinterpret_cast<const ExportedTableUpdateBatchMessage*>(
               &_ExportedTableUpdateBatchMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExportedTableUpdateBatchMessage& a, ExportedTableUpdateBatchMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportedTableUpdateBatchMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportedTableUpdateBatchMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportedTableUpdateBatchMessage* New() const final {
    return CreateMaybeMessage<ExportedTableUpdateBatchMessage>(nullptr);
  }

  ExportedTableUpdateBatchMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportedTableUpdateBatchMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportedTableUpdateBatchMessage& from);
  void MergeFrom(const ExportedTableUpdateBatchMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportedTableUpdateBatchMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage";
  }
  protected:
  explicit ExportedTableUpdateBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >*
      mutable_updates();
  private:
  const ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage& _internal_updates(int index) const;
  ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* _internal_add_updates();
  public:
  const ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage& updates(int index) const;
  ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >&
      updates() const;

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class EmptyTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.EmptyTableRequest) */ {
 public:
  inline EmptyTableRequest() : EmptyTableRequest(nullptr) {}
  virtual ~EmptyTableRequest();
  explicit constexpr EmptyTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyTableRequest(const EmptyTableRequest& from);
  EmptyTableRequest(EmptyTableRequest&& from) noexcept
    : EmptyTableRequest() {
    *this = ::std::move(from);
  }

  inline EmptyTableRequest& operator=(const EmptyTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyTableRequest& operator=(EmptyTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyTableRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyTableRequest*>(
               &_EmptyTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EmptyTableRequest& a, EmptyTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyTableRequest* New() const final {
    return CreateMaybeMessage<EmptyTableRequest>(nullptr);
  }

  EmptyTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyTableRequest& from);
  void MergeFrom(const EmptyTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.EmptyTableRequest";
  }
  protected:
  explicit EmptyTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNamesFieldNumber = 3,
    kColumnTypesFieldNumber = 4,
    kResultIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated string column_names = 3;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;
  public:
  void clear_column_names();
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  void set_column_names(int index, const std::string& value);
  void set_column_names(int index, std::string&& value);
  void set_column_names(int index, const char* value);
  void set_column_names(int index, const char* value, size_t size);
  std::string* add_column_names();
  void add_column_names(const std::string& value);
  void add_column_names(std::string&& value);
  void add_column_names(const char* value);
  void add_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_names();
  private:
  const std::string& _internal_column_names(int index) const;
  std::string* _internal_add_column_names();
  public:

  // repeated string column_types = 4;
  int column_types_size() const;
  private:
  int _internal_column_types_size() const;
  public:
  void clear_column_types();
  const std::string& column_types(int index) const;
  std::string* mutable_column_types(int index);
  void set_column_types(int index, const std::string& value);
  void set_column_types(int index, std::string&& value);
  void set_column_types(int index, const char* value);
  void set_column_types(int index, const char* value, size_t size);
  std::string* add_column_types();
  void add_column_types(const std::string& value);
  void add_column_types(std::string&& value);
  void add_column_types(const char* value);
  void add_column_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_types();
  private:
  const std::string& _internal_column_types(int index) const;
  std::string* _internal_add_column_types();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // sint64 size = 2 [jstype = JS_STRING];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_types_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class TimeTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TimeTableRequest) */ {
 public:
  inline TimeTableRequest() : TimeTableRequest(nullptr) {}
  virtual ~TimeTableRequest();
  explicit constexpr TimeTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeTableRequest(const TimeTableRequest& from);
  TimeTableRequest(TimeTableRequest&& from) noexcept
    : TimeTableRequest() {
    *this = ::std::move(from);
  }

  inline TimeTableRequest& operator=(const TimeTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeTableRequest& operator=(TimeTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeTableRequest* internal_default_instance() {
    return reinterpret_cast<const TimeTableRequest*>(
               &_TimeTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TimeTableRequest& a, TimeTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeTableRequest* New() const final {
    return CreateMaybeMessage<TimeTableRequest>(nullptr);
  }

  TimeTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeTableRequest& from);
  void MergeFrom(const TimeTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TimeTableRequest";
  }
  protected:
  explicit TimeTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultIdFieldNumber = 1,
    kStartTimeNanosFieldNumber = 2,
    kPeriodNanosFieldNumber = 3,
  };
  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // sint64 start_time_nanos = 2 [jstype = JS_STRING];
  void clear_start_time_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_nanos() const;
  void set_start_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time_nanos() const;
  void _internal_set_start_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 period_nanos = 3 [jstype = JS_STRING];
  void clear_period_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 period_nanos() const;
  void set_period_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_period_nanos() const;
  void _internal_set_period_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TimeTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_nanos_;
  ::PROTOBUF_NAMESPACE_ID::int64 period_nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class SelectOrUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest) */ {
 public:
  inline SelectOrUpdateRequest() : SelectOrUpdateRequest(nullptr) {}
  virtual ~SelectOrUpdateRequest();
  explicit constexpr SelectOrUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectOrUpdateRequest(const SelectOrUpdateRequest& from);
  SelectOrUpdateRequest(SelectOrUpdateRequest&& from) noexcept
    : SelectOrUpdateRequest() {
    *this = ::std::move(from);
  }

  inline SelectOrUpdateRequest& operator=(const SelectOrUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectOrUpdateRequest& operator=(SelectOrUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectOrUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectOrUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const SelectOrUpdateRequest*>(
               &_SelectOrUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SelectOrUpdateRequest& a, SelectOrUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectOrUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectOrUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectOrUpdateRequest* New() const final {
    return CreateMaybeMessage<SelectOrUpdateRequest>(nullptr);
  }

  SelectOrUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectOrUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectOrUpdateRequest& from);
  void MergeFrom(const SelectOrUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectOrUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest";
  }
  protected:
  explicit SelectOrUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnSpecsFieldNumber = 3,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // repeated string column_specs = 3;
  int column_specs_size() const;
  private:
  int _internal_column_specs_size() const;
  public:
  void clear_column_specs();
  const std::string& column_specs(int index) const;
  std::string* mutable_column_specs(int index);
  void set_column_specs(int index, const std::string& value);
  void set_column_specs(int index, std::string&& value);
  void set_column_specs(int index, const char* value);
  void set_column_specs(int index, const char* value, size_t size);
  std::string* add_column_specs();
  void add_column_specs(const std::string& value);
  void add_column_specs(std::string&& value);
  void add_column_specs(const char* value);
  void add_column_specs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_specs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_specs();
  private:
  const std::string& _internal_column_specs(int index) const;
  std::string* _internal_add_column_specs();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_specs_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class SelectDistinctRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.SelectDistinctRequest) */ {
 public:
  inline SelectDistinctRequest() : SelectDistinctRequest(nullptr) {}
  virtual ~SelectDistinctRequest();
  explicit constexpr SelectDistinctRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectDistinctRequest(const SelectDistinctRequest& from);
  SelectDistinctRequest(SelectDistinctRequest&& from) noexcept
    : SelectDistinctRequest() {
    *this = ::std::move(from);
  }

  inline SelectDistinctRequest& operator=(const SelectDistinctRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectDistinctRequest& operator=(SelectDistinctRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectDistinctRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectDistinctRequest* internal_default_instance() {
    return reinterpret_cast<const SelectDistinctRequest*>(
               &_SelectDistinctRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SelectDistinctRequest& a, SelectDistinctRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectDistinctRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectDistinctRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectDistinctRequest* New() const final {
    return CreateMaybeMessage<SelectDistinctRequest>(nullptr);
  }

  SelectDistinctRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectDistinctRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectDistinctRequest& from);
  void MergeFrom(const SelectDistinctRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectDistinctRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.SelectDistinctRequest";
  }
  protected:
  explicit SelectDistinctRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNamesFieldNumber = 3,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // repeated string column_names = 3;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;
  public:
  void clear_column_names();
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  void set_column_names(int index, const std::string& value);
  void set_column_names(int index, std::string&& value);
  void set_column_names(int index, const char* value);
  void set_column_names(int index, const char* value, size_t size);
  std::string* add_column_names();
  void add_column_names(const std::string& value);
  void add_column_names(std::string&& value);
  void add_column_names(const char* value);
  void add_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_names();
  private:
  const std::string& _internal_column_names(int index) const;
  std::string* _internal_add_column_names();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_names_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class DropColumnsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.DropColumnsRequest) */ {
 public:
  inline DropColumnsRequest() : DropColumnsRequest(nullptr) {}
  virtual ~DropColumnsRequest();
  explicit constexpr DropColumnsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropColumnsRequest(const DropColumnsRequest& from);
  DropColumnsRequest(DropColumnsRequest&& from) noexcept
    : DropColumnsRequest() {
    *this = ::std::move(from);
  }

  inline DropColumnsRequest& operator=(const DropColumnsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropColumnsRequest& operator=(DropColumnsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropColumnsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropColumnsRequest* internal_default_instance() {
    return reinterpret_cast<const DropColumnsRequest*>(
               &_DropColumnsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DropColumnsRequest& a, DropColumnsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropColumnsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropColumnsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropColumnsRequest* New() const final {
    return CreateMaybeMessage<DropColumnsRequest>(nullptr);
  }

  DropColumnsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropColumnsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropColumnsRequest& from);
  void MergeFrom(const DropColumnsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropColumnsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.DropColumnsRequest";
  }
  protected:
  explicit DropColumnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNamesFieldNumber = 3,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // repeated string column_names = 3;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;
  public:
  void clear_column_names();
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  void set_column_names(int index, const std::string& value);
  void set_column_names(int index, std::string&& value);
  void set_column_names(int index, const char* value);
  void set_column_names(int index, const char* value, size_t size);
  std::string* add_column_names();
  void add_column_names(const std::string& value);
  void add_column_names(std::string&& value);
  void add_column_names(const char* value);
  void add_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_names();
  private:
  const std::string& _internal_column_names(int index) const;
  std::string* _internal_add_column_names();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_names_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class UnstructuredFilterTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest) */ {
 public:
  inline UnstructuredFilterTableRequest() : UnstructuredFilterTableRequest(nullptr) {}
  virtual ~UnstructuredFilterTableRequest();
  explicit constexpr UnstructuredFilterTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnstructuredFilterTableRequest(const UnstructuredFilterTableRequest& from);
  UnstructuredFilterTableRequest(UnstructuredFilterTableRequest&& from) noexcept
    : UnstructuredFilterTableRequest() {
    *this = ::std::move(from);
  }

  inline UnstructuredFilterTableRequest& operator=(const UnstructuredFilterTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnstructuredFilterTableRequest& operator=(UnstructuredFilterTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnstructuredFilterTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnstructuredFilterTableRequest* internal_default_instance() {
    return reinterpret_cast<const UnstructuredFilterTableRequest*>(
               &_UnstructuredFilterTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UnstructuredFilterTableRequest& a, UnstructuredFilterTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnstructuredFilterTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnstructuredFilterTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnstructuredFilterTableRequest* New() const final {
    return CreateMaybeMessage<UnstructuredFilterTableRequest>(nullptr);
  }

  UnstructuredFilterTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnstructuredFilterTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnstructuredFilterTableRequest& from);
  void MergeFrom(const UnstructuredFilterTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnstructuredFilterTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest";
  }
  protected:
  explicit UnstructuredFilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 3,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // repeated string filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  const std::string& filters(int index) const;
  std::string* mutable_filters(int index);
  void set_filters(int index, const std::string& value);
  void set_filters(int index, std::string&& value);
  void set_filters(int index, const char* value);
  void set_filters(int index, const char* value, size_t size);
  std::string* add_filters();
  void add_filters(const std::string& value);
  void add_filters(std::string&& value);
  void add_filters(const char* value);
  void add_filters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filters();
  private:
  const std::string& _internal_filters(int index) const;
  std::string* _internal_add_filters();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filters_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class HeadOrTailRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HeadOrTailRequest) */ {
 public:
  inline HeadOrTailRequest() : HeadOrTailRequest(nullptr) {}
  virtual ~HeadOrTailRequest();
  explicit constexpr HeadOrTailRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeadOrTailRequest(const HeadOrTailRequest& from);
  HeadOrTailRequest(HeadOrTailRequest&& from) noexcept
    : HeadOrTailRequest() {
    *this = ::std::move(from);
  }

  inline HeadOrTailRequest& operator=(const HeadOrTailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeadOrTailRequest& operator=(HeadOrTailRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeadOrTailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeadOrTailRequest* internal_default_instance() {
    return reinterpret_cast<const HeadOrTailRequest*>(
               &_HeadOrTailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HeadOrTailRequest& a, HeadOrTailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeadOrTailRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeadOrTailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeadOrTailRequest* New() const final {
    return CreateMaybeMessage<HeadOrTailRequest>(nullptr);
  }

  HeadOrTailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeadOrTailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeadOrTailRequest& from);
  void MergeFrom(const HeadOrTailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeadOrTailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HeadOrTailRequest";
  }
  protected:
  explicit HeadOrTailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kNumRowsFieldNumber = 3,
  };
  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // sint64 num_rows = 3 [jstype = JS_STRING];
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class HeadOrTailByRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest) */ {
 public:
  inline HeadOrTailByRequest() : HeadOrTailByRequest(nullptr) {}
  virtual ~HeadOrTailByRequest();
  explicit constexpr HeadOrTailByRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeadOrTailByRequest(const HeadOrTailByRequest& from);
  HeadOrTailByRequest(HeadOrTailByRequest&& from) noexcept
    : HeadOrTailByRequest() {
    *this = ::std::move(from);
  }

  inline HeadOrTailByRequest& operator=(const HeadOrTailByRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeadOrTailByRequest& operator=(HeadOrTailByRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeadOrTailByRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeadOrTailByRequest* internal_default_instance() {
    return reinterpret_cast<const HeadOrTailByRequest*>(
               &_HeadOrTailByRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HeadOrTailByRequest& a, HeadOrTailByRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeadOrTailByRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeadOrTailByRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeadOrTailByRequest* New() const final {
    return CreateMaybeMessage<HeadOrTailByRequest>(nullptr);
  }

  HeadOrTailByRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeadOrTailByRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeadOrTailByRequest& from);
  void MergeFrom(const HeadOrTailByRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeadOrTailByRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest";
  }
  protected:
  explicit HeadOrTailByRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupByColumnSpecsFieldNumber = 4,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kNumRowsFieldNumber = 3,
  };
  // repeated string group_by_column_specs = 4;
  int group_by_column_specs_size() const;
  private:
  int _internal_group_by_column_specs_size() const;
  public:
  void clear_group_by_column_specs();
  const std::string& group_by_column_specs(int index) const;
  std::string* mutable_group_by_column_specs(int index);
  void set_group_by_column_specs(int index, const std::string& value);
  void set_group_by_column_specs(int index, std::string&& value);
  void set_group_by_column_specs(int index, const char* value);
  void set_group_by_column_specs(int index, const char* value, size_t size);
  std::string* add_group_by_column_specs();
  void add_group_by_column_specs(const std::string& value);
  void add_group_by_column_specs(std::string&& value);
  void add_group_by_column_specs(const char* value);
  void add_group_by_column_specs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by_column_specs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by_column_specs();
  private:
  const std::string& _internal_group_by_column_specs(int index) const;
  std::string* _internal_add_group_by_column_specs();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // sint64 num_rows = 3 [jstype = JS_STRING];
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_column_specs_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class UngroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.UngroupRequest) */ {
 public:
  inline UngroupRequest() : UngroupRequest(nullptr) {}
  virtual ~UngroupRequest();
  explicit constexpr UngroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UngroupRequest(const UngroupRequest& from);
  UngroupRequest(UngroupRequest&& from) noexcept
    : UngroupRequest() {
    *this = ::std::move(from);
  }

  inline UngroupRequest& operator=(const UngroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UngroupRequest& operator=(UngroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UngroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UngroupRequest* internal_default_instance() {
    return reinterpret_cast<const UngroupRequest*>(
               &_UngroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UngroupRequest& a, UngroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UngroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UngroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UngroupRequest* New() const final {
    return CreateMaybeMessage<UngroupRequest>(nullptr);
  }

  UngroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UngroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UngroupRequest& from);
  void MergeFrom(const UngroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UngroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.UngroupRequest";
  }
  protected:
  explicit UngroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsToUngroupFieldNumber = 4,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kNullFillFieldNumber = 3,
  };
  // repeated string columns_to_ungroup = 4;
  int columns_to_ungroup_size() const;
  private:
  int _internal_columns_to_ungroup_size() const;
  public:
  void clear_columns_to_ungroup();
  const std::string& columns_to_ungroup(int index) const;
  std::string* mutable_columns_to_ungroup(int index);
  void set_columns_to_ungroup(int index, const std::string& value);
  void set_columns_to_ungroup(int index, std::string&& value);
  void set_columns_to_ungroup(int index, const char* value);
  void set_columns_to_ungroup(int index, const char* value, size_t size);
  std::string* add_columns_to_ungroup();
  void add_columns_to_ungroup(const std::string& value);
  void add_columns_to_ungroup(std::string&& value);
  void add_columns_to_ungroup(const char* value);
  void add_columns_to_ungroup(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns_to_ungroup() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns_to_ungroup();
  private:
  const std::string& _internal_columns_to_ungroup(int index) const;
  std::string* _internal_add_columns_to_ungroup();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // bool null_fill = 3;
  void clear_null_fill();
  bool null_fill() const;
  void set_null_fill(bool value);
  private:
  bool _internal_null_fill() const;
  void _internal_set_null_fill(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.UngroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_to_ungroup_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  bool null_fill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class MergeTablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.MergeTablesRequest) */ {
 public:
  inline MergeTablesRequest() : MergeTablesRequest(nullptr) {}
  virtual ~MergeTablesRequest();
  explicit constexpr MergeTablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeTablesRequest(const MergeTablesRequest& from);
  MergeTablesRequest(MergeTablesRequest&& from) noexcept
    : MergeTablesRequest() {
    *this = ::std::move(from);
  }

  inline MergeTablesRequest& operator=(const MergeTablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeTablesRequest& operator=(MergeTablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeTablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeTablesRequest* internal_default_instance() {
    return reinterpret_cast<const MergeTablesRequest*>(
               &_MergeTablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MergeTablesRequest& a, MergeTablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeTablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeTablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeTablesRequest* New() const final {
    return CreateMaybeMessage<MergeTablesRequest>(nullptr);
  }

  MergeTablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeTablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeTablesRequest& from);
  void MergeFrom(const MergeTablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeTablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.MergeTablesRequest";
  }
  protected:
  explicit MergeTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdsFieldNumber = 2,
    kKeyColumnFieldNumber = 3,
    kResultIdFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  int source_ids_size() const;
  private:
  int _internal_source_ids_size() const;
  public:
  void clear_source_ids();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TableReference >*
      mutable_source_ids();
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_ids(int index) const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_add_source_ids();
  public:
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_ids(int index) const;
  ::io::deephaven::proto::backplane::grpc::TableReference* add_source_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TableReference >&
      source_ids() const;

  // string key_column = 3;
  void clear_key_column();
  const std::string& key_column() const;
  void set_key_column(const std::string& value);
  void set_key_column(std::string&& value);
  void set_key_column(const char* value);
  void set_key_column(const char* value, size_t size);
  std::string* mutable_key_column();
  std::string* release_key_column();
  void set_allocated_key_column(std::string* key_column);
  private:
  const std::string& _internal_key_column() const;
  void _internal_set_key_column(const std::string& value);
  std::string* _internal_mutable_key_column();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TableReference > source_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_column_;
  ::arrow::flight::protocol::Wicket* result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class SnapshotTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.SnapshotTableRequest) */ {
 public:
  inline SnapshotTableRequest() : SnapshotTableRequest(nullptr) {}
  virtual ~SnapshotTableRequest();
  explicit constexpr SnapshotTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotTableRequest(const SnapshotTableRequest& from);
  SnapshotTableRequest(SnapshotTableRequest&& from) noexcept
    : SnapshotTableRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotTableRequest& operator=(const SnapshotTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotTableRequest& operator=(SnapshotTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotTableRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotTableRequest*>(
               &_SnapshotTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SnapshotTableRequest& a, SnapshotTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotTableRequest* New() const final {
    return CreateMaybeMessage<SnapshotTableRequest>(nullptr);
  }

  SnapshotTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotTableRequest& from);
  void MergeFrom(const SnapshotTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.SnapshotTableRequest";
  }
  protected:
  explicit SnapshotTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStampColumnsFieldNumber = 5,
    kResultIdFieldNumber = 1,
    kLeftIdFieldNumber = 2,
    kRightIdFieldNumber = 3,
    kDoInitialSnapshotFieldNumber = 4,
  };
  // repeated string stamp_columns = 5;
  int stamp_columns_size() const;
  private:
  int _internal_stamp_columns_size() const;
  public:
  void clear_stamp_columns();
  const std::string& stamp_columns(int index) const;
  std::string* mutable_stamp_columns(int index);
  void set_stamp_columns(int index, const std::string& value);
  void set_stamp_columns(int index, std::string&& value);
  void set_stamp_columns(int index, const char* value);
  void set_stamp_columns(int index, const char* value, size_t size);
  std::string* add_stamp_columns();
  void add_stamp_columns(const std::string& value);
  void add_stamp_columns(std::string&& value);
  void add_stamp_columns(const char* value);
  void add_stamp_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stamp_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stamp_columns();
  private:
  const std::string& _internal_stamp_columns(int index) const;
  std::string* _internal_add_stamp_columns();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  bool has_left_id() const;
  private:
  bool _internal_has_left_id() const;
  public:
  void clear_left_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& left_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_left_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_left_id();
  void set_allocated_left_id(::io::deephaven::proto::backplane::grpc::TableReference* left_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_left_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_left_id();
  public:
  void unsafe_arena_set_allocated_left_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* left_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_left_id();

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  bool has_right_id() const;
  private:
  bool _internal_has_right_id() const;
  public:
  void clear_right_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& right_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_right_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_right_id();
  void set_allocated_right_id(::io::deephaven::proto::backplane::grpc::TableReference* right_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_right_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_right_id();
  public:
  void unsafe_arena_set_allocated_right_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* right_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_right_id();

  // bool do_initial_snapshot = 4;
  void clear_do_initial_snapshot();
  bool do_initial_snapshot() const;
  void set_do_initial_snapshot(bool value);
  private:
  bool _internal_do_initial_snapshot() const;
  void _internal_set_do_initial_snapshot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stamp_columns_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* left_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* right_id_;
  bool do_initial_snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class JoinTablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.JoinTablesRequest) */ {
 public:
  inline JoinTablesRequest() : JoinTablesRequest(nullptr) {}
  virtual ~JoinTablesRequest();
  explicit constexpr JoinTablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinTablesRequest(const JoinTablesRequest& from);
  JoinTablesRequest(JoinTablesRequest&& from) noexcept
    : JoinTablesRequest() {
    *this = ::std::move(from);
  }

  inline JoinTablesRequest& operator=(const JoinTablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinTablesRequest& operator=(JoinTablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinTablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinTablesRequest* internal_default_instance() {
    return reinterpret_cast<const JoinTablesRequest*>(
               &_JoinTablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(JoinTablesRequest& a, JoinTablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinTablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinTablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinTablesRequest* New() const final {
    return CreateMaybeMessage<JoinTablesRequest>(nullptr);
  }

  JoinTablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinTablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinTablesRequest& from);
  void MergeFrom(const JoinTablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinTablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.JoinTablesRequest";
  }
  protected:
  explicit JoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef JoinTablesRequest_Type Type;
  static constexpr Type CROSS_JOIN =
    JoinTablesRequest_Type_CROSS_JOIN;
  static constexpr Type NATURAL_JOIN =
    JoinTablesRequest_Type_NATURAL_JOIN;
  static constexpr Type AS_OF_JOIN =
    JoinTablesRequest_Type_AS_OF_JOIN;
  static constexpr Type REVERSE_AS_OF_JOIN =
    JoinTablesRequest_Type_REVERSE_AS_OF_JOIN;
  static constexpr Type EXACT_JOIN =
    JoinTablesRequest_Type_EXACT_JOIN;
  static constexpr Type LEFT_JOIN =
    JoinTablesRequest_Type_LEFT_JOIN;
  static inline bool Type_IsValid(int value) {
    return JoinTablesRequest_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    JoinTablesRequest_Type_Type_MIN;
  static constexpr Type Type_MAX =
    JoinTablesRequest_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    JoinTablesRequest_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return JoinTablesRequest_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return JoinTablesRequest_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return JoinTablesRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsToMatchFieldNumber = 4,
    kColumnsToAddFieldNumber = 5,
    kResultIdFieldNumber = 1,
    kLeftIdFieldNumber = 2,
    kRightIdFieldNumber = 3,
    kJoinTypeFieldNumber = 6,
  };
  // repeated string columns_to_match = 4;
  int columns_to_match_size() const;
  private:
  int _internal_columns_to_match_size() const;
  public:
  void clear_columns_to_match();
  const std::string& columns_to_match(int index) const;
  std::string* mutable_columns_to_match(int index);
  void set_columns_to_match(int index, const std::string& value);
  void set_columns_to_match(int index, std::string&& value);
  void set_columns_to_match(int index, const char* value);
  void set_columns_to_match(int index, const char* value, size_t size);
  std::string* add_columns_to_match();
  void add_columns_to_match(const std::string& value);
  void add_columns_to_match(std::string&& value);
  void add_columns_to_match(const char* value);
  void add_columns_to_match(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns_to_match() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns_to_match();
  private:
  const std::string& _internal_columns_to_match(int index) const;
  std::string* _internal_add_columns_to_match();
  public:

  // repeated string columns_to_add = 5;
  int columns_to_add_size() const;
  private:
  int _internal_columns_to_add_size() const;
  public:
  void clear_columns_to_add();
  const std::string& columns_to_add(int index) const;
  std::string* mutable_columns_to_add(int index);
  void set_columns_to_add(int index, const std::string& value);
  void set_columns_to_add(int index, std::string&& value);
  void set_columns_to_add(int index, const char* value);
  void set_columns_to_add(int index, const char* value, size_t size);
  std::string* add_columns_to_add();
  void add_columns_to_add(const std::string& value);
  void add_columns_to_add(std::string&& value);
  void add_columns_to_add(const char* value);
  void add_columns_to_add(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns_to_add() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns_to_add();
  private:
  const std::string& _internal_columns_to_add(int index) const;
  std::string* _internal_add_columns_to_add();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  bool has_left_id() const;
  private:
  bool _internal_has_left_id() const;
  public:
  void clear_left_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& left_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_left_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_left_id();
  void set_allocated_left_id(::io::deephaven::proto::backplane::grpc::TableReference* left_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_left_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_left_id();
  public:
  void unsafe_arena_set_allocated_left_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* left_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_left_id();

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  bool has_right_id() const;
  private:
  bool _internal_has_right_id() const;
  public:
  void clear_right_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& right_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_right_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_right_id();
  void set_allocated_right_id(::io::deephaven::proto::backplane::grpc::TableReference* right_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_right_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_right_id();
  public:
  void unsafe_arena_set_allocated_right_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* right_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_right_id();

  // .io.deephaven.proto.backplane.grpc.JoinTablesRequest.Type join_type = 6;
  void clear_join_type();
  ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type join_type() const;
  void set_join_type(::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type value);
  private:
  ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type _internal_join_type() const;
  void _internal_set_join_type(::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.JoinTablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_to_match_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_to_add_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* left_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* right_id_;
  int join_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class ComboAggregateRequest_Aggregate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate) */ {
 public:
  inline ComboAggregateRequest_Aggregate() : ComboAggregateRequest_Aggregate(nullptr) {}
  virtual ~ComboAggregateRequest_Aggregate();
  explicit constexpr ComboAggregateRequest_Aggregate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComboAggregateRequest_Aggregate(const ComboAggregateRequest_Aggregate& from);
  ComboAggregateRequest_Aggregate(ComboAggregateRequest_Aggregate&& from) noexcept
    : ComboAggregateRequest_Aggregate() {
    *this = ::std::move(from);
  }

  inline ComboAggregateRequest_Aggregate& operator=(const ComboAggregateRequest_Aggregate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboAggregateRequest_Aggregate& operator=(ComboAggregateRequest_Aggregate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComboAggregateRequest_Aggregate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComboAggregateRequest_Aggregate* internal_default_instance() {
    return reinterpret_cast<const ComboAggregateRequest_Aggregate*>(
               &_ComboAggregateRequest_Aggregate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ComboAggregateRequest_Aggregate& a, ComboAggregateRequest_Aggregate& b) {
    a.Swap(&b);
  }
  inline void Swap(ComboAggregateRequest_Aggregate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComboAggregateRequest_Aggregate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComboAggregateRequest_Aggregate* New() const final {
    return CreateMaybeMessage<ComboAggregateRequest_Aggregate>(nullptr);
  }

  ComboAggregateRequest_Aggregate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboAggregateRequest_Aggregate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComboAggregateRequest_Aggregate& from);
  void MergeFrom(const ComboAggregateRequest_Aggregate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboAggregateRequest_Aggregate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate";
  }
  protected:
  explicit ComboAggregateRequest_Aggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchPairsFieldNumber = 2,
    kColumnNameFieldNumber = 3,
    kTypeFieldNumber = 1,
    kAvgMedianFieldNumber = 5,
    kPercentileFieldNumber = 4,
  };
  // repeated string match_pairs = 2;
  int match_pairs_size() const;
  private:
  int _internal_match_pairs_size() const;
  public:
  void clear_match_pairs();
  const std::string& match_pairs(int index) const;
  std::string* mutable_match_pairs(int index);
  void set_match_pairs(int index, const std::string& value);
  void set_match_pairs(int index, std::string&& value);
  void set_match_pairs(int index, const char* value);
  void set_match_pairs(int index, const char* value, size_t size);
  std::string* add_match_pairs();
  void add_match_pairs(const std::string& value);
  void add_match_pairs(std::string&& value);
  void add_match_pairs(const char* value);
  void add_match_pairs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& match_pairs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_match_pairs();
  private:
  const std::string& _internal_match_pairs(int index) const;
  std::string* _internal_add_match_pairs();
  public:

  // string column_name = 3;
  void clear_column_name();
  const std::string& column_name() const;
  void set_column_name(const std::string& value);
  void set_column_name(std::string&& value);
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  std::string* mutable_column_name();
  std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  void clear_type();
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType type() const;
  void set_type(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType value);
  private:
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType _internal_type() const;
  void _internal_set_type(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType value);
  public:

  // bool avg_median = 5;
  void clear_avg_median();
  bool avg_median() const;
  void set_avg_median(bool value);
  private:
  bool _internal_avg_median() const;
  void _internal_set_avg_median(bool value);
  public:

  // double percentile = 4;
  void clear_percentile();
  double percentile() const;
  void set_percentile(double value);
  private:
  double _internal_percentile() const;
  void _internal_set_percentile(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> match_pairs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
  int type_;
  bool avg_median_;
  double percentile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class ComboAggregateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ComboAggregateRequest) */ {
 public:
  inline ComboAggregateRequest() : ComboAggregateRequest(nullptr) {}
  virtual ~ComboAggregateRequest();
  explicit constexpr ComboAggregateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComboAggregateRequest(const ComboAggregateRequest& from);
  ComboAggregateRequest(ComboAggregateRequest&& from) noexcept
    : ComboAggregateRequest() {
    *this = ::std::move(from);
  }

  inline ComboAggregateRequest& operator=(const ComboAggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboAggregateRequest& operator=(ComboAggregateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComboAggregateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComboAggregateRequest* internal_default_instance() {
    return reinterpret_cast<const ComboAggregateRequest*>(
               &_ComboAggregateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ComboAggregateRequest& a, ComboAggregateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComboAggregateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComboAggregateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComboAggregateRequest* New() const final {
    return CreateMaybeMessage<ComboAggregateRequest>(nullptr);
  }

  ComboAggregateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboAggregateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComboAggregateRequest& from);
  void MergeFrom(const ComboAggregateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboAggregateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ComboAggregateRequest";
  }
  protected:
  explicit ComboAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComboAggregateRequest_Aggregate Aggregate;

  typedef ComboAggregateRequest_AggType AggType;
  static constexpr AggType SUM =
    ComboAggregateRequest_AggType_SUM;
  static constexpr AggType ABS_SUM =
    ComboAggregateRequest_AggType_ABS_SUM;
  static constexpr AggType ARRAY =
    ComboAggregateRequest_AggType_ARRAY;
  static constexpr AggType AVG =
    ComboAggregateRequest_AggType_AVG;
  static constexpr AggType COUNT =
    ComboAggregateRequest_AggType_COUNT;
  static constexpr AggType FIRST =
    ComboAggregateRequest_AggType_FIRST;
  static constexpr AggType LAST =
    ComboAggregateRequest_AggType_LAST;
  static constexpr AggType MIN =
    ComboAggregateRequest_AggType_MIN;
  static constexpr AggType MAX =
    ComboAggregateRequest_AggType_MAX;
  static constexpr AggType MEDIAN =
    ComboAggregateRequest_AggType_MEDIAN;
  static constexpr AggType PERCENTILE =
    ComboAggregateRequest_AggType_PERCENTILE;
  static constexpr AggType STD =
    ComboAggregateRequest_AggType_STD;
  static constexpr AggType VAR =
    ComboAggregateRequest_AggType_VAR;
  static constexpr AggType WEIGHTED_AVG =
    ComboAggregateRequest_AggType_WEIGHTED_AVG;
  static inline bool AggType_IsValid(int value) {
    return ComboAggregateRequest_AggType_IsValid(value);
  }
  static constexpr AggType AggType_MIN =
    ComboAggregateRequest_AggType_AggType_MIN;
  static constexpr AggType AggType_MAX =
    ComboAggregateRequest_AggType_AggType_MAX;
  static constexpr int AggType_ARRAYSIZE =
    ComboAggregateRequest_AggType_AggType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AggType_descriptor() {
    return ComboAggregateRequest_AggType_descriptor();
  }
  template<typename T>
  static inline const std::string& AggType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AggType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AggType_Name.");
    return ComboAggregateRequest_AggType_Name(enum_t_value);
  }
  static inline bool AggType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AggType* value) {
    return ComboAggregateRequest_AggType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAggregatesFieldNumber = 3,
    kGroupByColumnsFieldNumber = 4,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kForceComboFieldNumber = 5,
  };
  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  int aggregates_size() const;
  private:
  int _internal_aggregates_size() const;
  public:
  void clear_aggregates();
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* mutable_aggregates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >*
      mutable_aggregates();
  private:
  const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate& _internal_aggregates(int index) const;
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* _internal_add_aggregates();
  public:
  const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate& aggregates(int index) const;
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* add_aggregates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >&
      aggregates() const;

  // repeated string group_by_columns = 4;
  int group_by_columns_size() const;
  private:
  int _internal_group_by_columns_size() const;
  public:
  void clear_group_by_columns();
  const std::string& group_by_columns(int index) const;
  std::string* mutable_group_by_columns(int index);
  void set_group_by_columns(int index, const std::string& value);
  void set_group_by_columns(int index, std::string&& value);
  void set_group_by_columns(int index, const char* value);
  void set_group_by_columns(int index, const char* value, size_t size);
  std::string* add_group_by_columns();
  void add_group_by_columns(const std::string& value);
  void add_group_by_columns(std::string&& value);
  void add_group_by_columns(const char* value);
  void add_group_by_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by_columns();
  private:
  const std::string& _internal_group_by_columns(int index) const;
  std::string* _internal_add_group_by_columns();
  public:

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // bool force_combo = 5;
  void clear_force_combo();
  bool force_combo() const;
  void set_force_combo(bool value);
  private:
  bool _internal_force_combo() const;
  void _internal_set_force_combo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate > aggregates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_columns_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  bool force_combo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class SortDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.SortDescriptor) */ {
 public:
  inline SortDescriptor() : SortDescriptor(nullptr) {}
  virtual ~SortDescriptor();
  explicit constexpr SortDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortDescriptor(const SortDescriptor& from);
  SortDescriptor(SortDescriptor&& from) noexcept
    : SortDescriptor() {
    *this = ::std::move(from);
  }

  inline SortDescriptor& operator=(const SortDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortDescriptor& operator=(SortDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SortDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortDescriptor* internal_default_instance() {
    return reinterpret_cast<const SortDescriptor*>(
               &_SortDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SortDescriptor& a, SortDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SortDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortDescriptor* New() const final {
    return CreateMaybeMessage<SortDescriptor>(nullptr);
  }

  SortDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortDescriptor& from);
  void MergeFrom(const SortDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.SortDescriptor";
  }
  protected:
  explicit SortDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SortDescriptor_SortDirection SortDirection;
  static constexpr SortDirection UNKNOWN =
    SortDescriptor_SortDirection_UNKNOWN;
  static constexpr SortDirection DESCENDING =
    SortDescriptor_SortDirection_DESCENDING;
  static constexpr SortDirection ASCENDING =
    SortDescriptor_SortDirection_ASCENDING;
  static constexpr SortDirection REVERSE =
    SortDescriptor_SortDirection_REVERSE;
  static inline bool SortDirection_IsValid(int value) {
    return SortDescriptor_SortDirection_IsValid(value);
  }
  static constexpr SortDirection SortDirection_MIN =
    SortDescriptor_SortDirection_SortDirection_MIN;
  static constexpr SortDirection SortDirection_MAX =
    SortDescriptor_SortDirection_SortDirection_MAX;
  static constexpr int SortDirection_ARRAYSIZE =
    SortDescriptor_SortDirection_SortDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortDirection_descriptor() {
    return SortDescriptor_SortDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& SortDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortDirection_Name.");
    return SortDescriptor_SortDirection_Name(enum_t_value);
  }
  static inline bool SortDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SortDirection* value) {
    return SortDescriptor_SortDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNameFieldNumber = 1,
    kIsAbsoluteFieldNumber = 2,
    kDirectionFieldNumber = 3,
  };
  // string column_name = 1;
  void clear_column_name();
  const std::string& column_name() const;
  void set_column_name(const std::string& value);
  void set_column_name(std::string&& value);
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  std::string* mutable_column_name();
  std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  // bool is_absolute = 2;
  void clear_is_absolute();
  bool is_absolute() const;
  void set_is_absolute(bool value);
  private:
  bool _internal_is_absolute() const;
  void _internal_set_is_absolute(bool value);
  public:

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  void clear_direction();
  ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection direction() const;
  void set_direction(::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection value);
  private:
  ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection _internal_direction() const;
  void _internal_set_direction(::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.SortDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
  bool is_absolute_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class SortTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.SortTableRequest) */ {
 public:
  inline SortTableRequest() : SortTableRequest(nullptr) {}
  virtual ~SortTableRequest();
  explicit constexpr SortTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortTableRequest(const SortTableRequest& from);
  SortTableRequest(SortTableRequest&& from) noexcept
    : SortTableRequest() {
    *this = ::std::move(from);
  }

  inline SortTableRequest& operator=(const SortTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortTableRequest& operator=(SortTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SortTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortTableRequest* internal_default_instance() {
    return reinterpret_cast<const SortTableRequest*>(
               &_SortTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SortTableRequest& a, SortTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SortTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortTableRequest* New() const final {
    return CreateMaybeMessage<SortTableRequest>(nullptr);
  }

  SortTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortTableRequest& from);
  void MergeFrom(const SortTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.SortTableRequest";
  }
  protected:
  explicit SortTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortsFieldNumber = 3,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >*
      mutable_sorts();
  private:
  const ::io::deephaven::proto::backplane::grpc::SortDescriptor& _internal_sorts(int index) const;
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* _internal_add_sorts();
  public:
  const ::io::deephaven::proto::backplane::grpc::SortDescriptor& sorts(int index) const;
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >&
      sorts() const;

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.SortTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor > sorts_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class FilterTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FilterTableRequest) */ {
 public:
  inline FilterTableRequest() : FilterTableRequest(nullptr) {}
  virtual ~FilterTableRequest();
  explicit constexpr FilterTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterTableRequest(const FilterTableRequest& from);
  FilterTableRequest(FilterTableRequest&& from) noexcept
    : FilterTableRequest() {
    *this = ::std::move(from);
  }

  inline FilterTableRequest& operator=(const FilterTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterTableRequest& operator=(FilterTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterTableRequest* internal_default_instance() {
    return reinterpret_cast<const FilterTableRequest*>(
               &_FilterTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FilterTableRequest& a, FilterTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterTableRequest* New() const final {
    return CreateMaybeMessage<FilterTableRequest>(nullptr);
  }

  FilterTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterTableRequest& from);
  void MergeFrom(const FilterTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FilterTableRequest";
  }
  protected:
  explicit FilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 3,
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // repeated .io.deephaven.proto.backplane.grpc.FilterDescription filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::io::deephaven::proto::backplane::grpc::FilterDescription* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >*
      mutable_filters();
  private:
  const ::io::deephaven::proto::backplane::grpc::FilterDescription& _internal_filters(int index) const;
  ::io::deephaven::proto::backplane::grpc::FilterDescription* _internal_add_filters();
  public:
  const ::io::deephaven::proto::backplane::grpc::FilterDescription& filters(int index) const;
  ::io::deephaven::proto::backplane::grpc::FilterDescription* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >&
      filters() const;

  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FilterTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription > filters_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class FilterDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FilterDescription) */ {
 public:
  inline FilterDescription() : FilterDescription(nullptr) {}
  virtual ~FilterDescription();
  explicit constexpr FilterDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterDescription(const FilterDescription& from);
  FilterDescription(FilterDescription&& from) noexcept
    : FilterDescription() {
    *this = ::std::move(from);
  }

  inline FilterDescription& operator=(const FilterDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterDescription& operator=(FilterDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterDescription& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 3,
    kDoubleValue = 4,
    kBoolValue = 5,
    kLongValue = 6,
    kNanoTimeValue = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const FilterDescription* internal_default_instance() {
    return reinterpret_cast<const FilterDescription*>(
               &_FilterDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FilterDescription& a, FilterDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterDescription* New() const final {
    return CreateMaybeMessage<FilterDescription>(nullptr);
  }

  FilterDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterDescription& from);
  void MergeFrom(const FilterDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FilterDescription";
  }
  protected:
  explicit FilterDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef FilterDescription_Operation Operation;
  static constexpr Operation UNKNOWN =
    FilterDescription_Operation_UNKNOWN;
  static constexpr Operation AND =
    FilterDescription_Operation_AND;
  static constexpr Operation OR =
    FilterDescription_Operation_OR;
  static constexpr Operation NOT =
    FilterDescription_Operation_NOT;
  static constexpr Operation LT =
    FilterDescription_Operation_LT;
  static constexpr Operation GT =
    FilterDescription_Operation_GT;
  static constexpr Operation LTE =
    FilterDescription_Operation_LTE;
  static constexpr Operation GTE =
    FilterDescription_Operation_GTE;
  static constexpr Operation EQ =
    FilterDescription_Operation_EQ;
  static constexpr Operation EQ_ICASE =
    FilterDescription_Operation_EQ_ICASE;
  static constexpr Operation NEQ =
    FilterDescription_Operation_NEQ;
  static constexpr Operation NEQ_ICASE =
    FilterDescription_Operation_NEQ_ICASE;
  static constexpr Operation IN =
    FilterDescription_Operation_IN;
  static constexpr Operation IN_ICASE =
    FilterDescription_Operation_IN_ICASE;
  static constexpr Operation NOT_IN =
    FilterDescription_Operation_NOT_IN;
  static constexpr Operation NOT_IN_ICASE =
    FilterDescription_Operation_NOT_IN_ICASE;
  static constexpr Operation IS_NULL =
    FilterDescription_Operation_IS_NULL;
  static constexpr Operation INVOKE =
    FilterDescription_Operation_INVOKE;
  static constexpr Operation LITERAL =
    FilterDescription_Operation_LITERAL;
  static constexpr Operation REFERENCE =
    FilterDescription_Operation_REFERENCE;
  static constexpr Operation CONTAINS =
    FilterDescription_Operation_CONTAINS;
  static constexpr Operation CONTAINS_ICASE =
    FilterDescription_Operation_CONTAINS_ICASE;
  static constexpr Operation MATCHES =
    FilterDescription_Operation_MATCHES;
  static constexpr Operation MATCHES_ICASE =
    FilterDescription_Operation_MATCHES_ICASE;
  static constexpr Operation SEARCH =
    FilterDescription_Operation_SEARCH;
  static inline bool Operation_IsValid(int value) {
    return FilterDescription_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    FilterDescription_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    FilterDescription_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    FilterDescription_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return FilterDescription_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return FilterDescription_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return FilterDescription_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kFilterOpFieldNumber = 1,
    kStringValueFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kLongValueFieldNumber = 6,
    kNanoTimeValueFieldNumber = 7,
  };
  // repeated .io.deephaven.proto.backplane.grpc.FilterDescription children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::io::deephaven::proto::backplane::grpc::FilterDescription* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >*
      mutable_children();
  private:
  const ::io::deephaven::proto::backplane::grpc::FilterDescription& _internal_children(int index) const;
  ::io::deephaven::proto::backplane::grpc::FilterDescription* _internal_add_children();
  public:
  const ::io::deephaven::proto::backplane::grpc::FilterDescription& children(int index) const;
  ::io::deephaven::proto::backplane::grpc::FilterDescription* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >&
      children() const;

  // .io.deephaven.proto.backplane.grpc.FilterDescription.Operation filter_op = 1;
  void clear_filter_op();
  ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation filter_op() const;
  void set_filter_op(::io::deephaven::proto::backplane::grpc::FilterDescription_Operation value);
  private:
  ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation _internal_filter_op() const;
  void _internal_set_filter_op(::io::deephaven::proto::backplane::grpc::FilterDescription_Operation value);
  public:

  // string string_value = 3;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // double double_value = 4;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // bool bool_value = 5;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // sint64 long_value = 6;
  bool has_long_value() const;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::int64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 nano_time_value = 7;
  bool has_nano_time_value() const;
  private:
  bool _internal_has_nano_time_value() const;
  public:
  void clear_nano_time_value();
  ::PROTOBUF_NAMESPACE_ID::int64 nano_time_value() const;
  void set_nano_time_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nano_time_value() const;
  void _internal_set_nano_time_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FilterDescription)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_double_value();
  void set_has_bool_value();
  void set_has_long_value();
  void set_has_nano_time_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription > children_;
  int filter_op_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    double double_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 long_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 nano_time_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class FlattenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FlattenRequest) */ {
 public:
  inline FlattenRequest() : FlattenRequest(nullptr) {}
  virtual ~FlattenRequest();
  explicit constexpr FlattenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlattenRequest(const FlattenRequest& from);
  FlattenRequest(FlattenRequest&& from) noexcept
    : FlattenRequest() {
    *this = ::std::move(from);
  }

  inline FlattenRequest& operator=(const FlattenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlattenRequest& operator=(FlattenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlattenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlattenRequest* internal_default_instance() {
    return reinterpret_cast<const FlattenRequest*>(
               &_FlattenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FlattenRequest& a, FlattenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlattenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlattenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlattenRequest* New() const final {
    return CreateMaybeMessage<FlattenRequest>(nullptr);
  }

  FlattenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlattenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlattenRequest& from);
  void MergeFrom(const FlattenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlattenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FlattenRequest";
  }
  protected:
  explicit FlattenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // .arrow.flight.protocol.Wicket result_id = 1;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::arrow::flight::protocol::Wicket& result_id() const;
  ::arrow::flight::protocol::Wicket* release_result_id();
  ::arrow::flight::protocol::Wicket* mutable_result_id();
  void set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id);
  private:
  const ::arrow::flight::protocol::Wicket& _internal_result_id() const;
  ::arrow::flight::protocol::Wicket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::arrow::flight::protocol::Wicket* result_id);
  ::arrow::flight::protocol::Wicket* unsafe_arena_release_result_id();

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::TableReference& source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TableReference* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableReference& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TableReference* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::TableReference* source_id);
  ::io::deephaven::proto::backplane::grpc::TableReference* unsafe_arena_release_source_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FlattenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::arrow::flight::protocol::Wicket* result_id_;
  ::io::deephaven::proto::backplane::grpc::TableReference* source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class BatchTableRequest_Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation) */ {
 public:
  inline BatchTableRequest_Operation() : BatchTableRequest_Operation(nullptr) {}
  virtual ~BatchTableRequest_Operation();
  explicit constexpr BatchTableRequest_Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchTableRequest_Operation(const BatchTableRequest_Operation& from);
  BatchTableRequest_Operation(BatchTableRequest_Operation&& from) noexcept
    : BatchTableRequest_Operation() {
    *this = ::std::move(from);
  }

  inline BatchTableRequest_Operation& operator=(const BatchTableRequest_Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchTableRequest_Operation& operator=(BatchTableRequest_Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchTableRequest_Operation& default_instance() {
    return *internal_default_instance();
  }
  enum OpCase {
    kEmptyTable = 1,
    kTimeTable = 2,
    kDropColumns = 3,
    kUpdate = 4,
    kLazyUpdate = 5,
    kView = 6,
    kUpdateView = 7,
    kSelect = 8,
    kSelectDistinct = 9,
    kFilter = 10,
    kUnstructuredFilter = 11,
    kSort = 12,
    kHead = 13,
    kTail = 14,
    kHeadBy = 15,
    kTailBy = 16,
    kUngroup = 17,
    kMerge = 18,
    kJoin = 19,
    kComboAggregate = 20,
    kSnapshot = 21,
    kFlatten = 22,
    OP_NOT_SET = 0,
  };

  static inline const BatchTableRequest_Operation* internal_default_instance() {
    return reinterpret_cast<const BatchTableRequest_Operation*>(
               &_BatchTableRequest_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BatchTableRequest_Operation& a, BatchTableRequest_Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchTableRequest_Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchTableRequest_Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchTableRequest_Operation* New() const final {
    return CreateMaybeMessage<BatchTableRequest_Operation>(nullptr);
  }

  BatchTableRequest_Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchTableRequest_Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchTableRequest_Operation& from);
  void MergeFrom(const BatchTableRequest_Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchTableRequest_Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation";
  }
  protected:
  explicit BatchTableRequest_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyTableFieldNumber = 1,
    kTimeTableFieldNumber = 2,
    kDropColumnsFieldNumber = 3,
    kUpdateFieldNumber = 4,
    kLazyUpdateFieldNumber = 5,
    kViewFieldNumber = 6,
    kUpdateViewFieldNumber = 7,
    kSelectFieldNumber = 8,
    kSelectDistinctFieldNumber = 9,
    kFilterFieldNumber = 10,
    kUnstructuredFilterFieldNumber = 11,
    kSortFieldNumber = 12,
    kHeadFieldNumber = 13,
    kTailFieldNumber = 14,
    kHeadByFieldNumber = 15,
    kTailByFieldNumber = 16,
    kUngroupFieldNumber = 17,
    kMergeFieldNumber = 18,
    kJoinFieldNumber = 19,
    kComboAggregateFieldNumber = 20,
    kSnapshotFieldNumber = 21,
    kFlattenFieldNumber = 22,
  };
  // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
  bool has_empty_table() const;
  private:
  bool _internal_has_empty_table() const;
  public:
  void clear_empty_table();
  const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& empty_table() const;
  ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* release_empty_table();
  ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* mutable_empty_table();
  void set_allocated_empty_table(::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table);
  private:
  const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& _internal_empty_table() const;
  ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* _internal_mutable_empty_table();
  public:
  void unsafe_arena_set_allocated_empty_table(
      ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table);
  ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* unsafe_arena_release_empty_table();

  // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
  bool has_time_table() const;
  private:
  bool _internal_has_time_table() const;
  public:
  void clear_time_table();
  const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& time_table() const;
  ::io::deephaven::proto::backplane::grpc::TimeTableRequest* release_time_table();
  ::io::deephaven::proto::backplane::grpc::TimeTableRequest* mutable_time_table();
  void set_allocated_time_table(::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table);
  private:
  const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& _internal_time_table() const;
  ::io::deephaven::proto::backplane::grpc::TimeTableRequest* _internal_mutable_time_table();
  public:
  void unsafe_arena_set_allocated_time_table(
      ::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table);
  ::io::deephaven::proto::backplane::grpc::TimeTableRequest* unsafe_arena_release_time_table();

  // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
  bool has_drop_columns() const;
  private:
  bool _internal_has_drop_columns() const;
  public:
  void clear_drop_columns();
  const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& drop_columns() const;
  ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* release_drop_columns();
  ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* mutable_drop_columns();
  void set_allocated_drop_columns(::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns);
  private:
  const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& _internal_drop_columns() const;
  ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* _internal_mutable_drop_columns();
  public:
  void unsafe_arena_set_allocated_drop_columns(
      ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns);
  ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* unsafe_arena_release_drop_columns();

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* release_update();
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* mutable_update();
  void set_allocated_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update);
  private:
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& _internal_update() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update);
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* unsafe_arena_release_update();

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
  bool has_lazy_update() const;
  private:
  bool _internal_has_lazy_update() const;
  public:
  void clear_lazy_update();
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& lazy_update() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* release_lazy_update();
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* mutable_lazy_update();
  void set_allocated_lazy_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update);
  private:
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& _internal_lazy_update() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* _internal_mutable_lazy_update();
  public:
  void unsafe_arena_set_allocated_lazy_update(
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update);
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* unsafe_arena_release_lazy_update();

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& view() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* release_view();
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* mutable_view();
  void set_allocated_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view);
  private:
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& _internal_view() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* _internal_mutable_view();
  public:
  void unsafe_arena_set_allocated_view(
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view);
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* unsafe_arena_release_view();

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
  bool has_update_view() const;
  private:
  bool _internal_has_update_view() const;
  public:
  void clear_update_view();
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update_view() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* release_update_view();
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* mutable_update_view();
  void set_allocated_update_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view);
  private:
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& _internal_update_view() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* _internal_mutable_update_view();
  public:
  void unsafe_arena_set_allocated_update_view(
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view);
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* unsafe_arena_release_update_view();

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
  bool has_select() const;
  private:
  bool _internal_has_select() const;
  public:
  void clear_select();
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& select() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* release_select();
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* mutable_select();
  void set_allocated_select(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select);
  private:
  const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& _internal_select() const;
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* _internal_mutable_select();
  public:
  void unsafe_arena_set_allocated_select(
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select);
  ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* unsafe_arena_release_select();

  // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
  bool has_select_distinct() const;
  private:
  bool _internal_has_select_distinct() const;
  public:
  void clear_select_distinct();
  const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& select_distinct() const;
  ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* release_select_distinct();
  ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* mutable_select_distinct();
  void set_allocated_select_distinct(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct);
  private:
  const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& _internal_select_distinct() const;
  ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* _internal_mutable_select_distinct();
  public:
  void unsafe_arena_set_allocated_select_distinct(
      ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct);
  ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* unsafe_arena_release_select_distinct();

  // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& filter() const;
  ::io::deephaven::proto::backplane::grpc::FilterTableRequest* release_filter();
  ::io::deephaven::proto::backplane::grpc::FilterTableRequest* mutable_filter();
  void set_allocated_filter(::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter);
  private:
  const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& _internal_filter() const;
  ::io::deephaven::proto::backplane::grpc::FilterTableRequest* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter);
  ::io::deephaven::proto::backplane::grpc::FilterTableRequest* unsafe_arena_release_filter();

  // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
  bool has_unstructured_filter() const;
  private:
  bool _internal_has_unstructured_filter() const;
  public:
  void clear_unstructured_filter();
  const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& unstructured_filter() const;
  ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* release_unstructured_filter();
  ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* mutable_unstructured_filter();
  void set_allocated_unstructured_filter(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter);
  private:
  const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& _internal_unstructured_filter() const;
  ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* _internal_mutable_unstructured_filter();
  public:
  void unsafe_arena_set_allocated_unstructured_filter(
      ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter);
  ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unsafe_arena_release_unstructured_filter();

  // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
  bool has_sort() const;
  private:
  bool _internal_has_sort() const;
  public:
  void clear_sort();
  const ::io::deephaven::proto::backplane::grpc::SortTableRequest& sort() const;
  ::io::deephaven::proto::backplane::grpc::SortTableRequest* release_sort();
  ::io::deephaven::proto::backplane::grpc::SortTableRequest* mutable_sort();
  void set_allocated_sort(::io::deephaven::proto::backplane::grpc::SortTableRequest* sort);
  private:
  const ::io::deephaven::proto::backplane::grpc::SortTableRequest& _internal_sort() const;
  ::io::deephaven::proto::backplane::grpc::SortTableRequest* _internal_mutable_sort();
  public:
  void unsafe_arena_set_allocated_sort(
      ::io::deephaven::proto::backplane::grpc::SortTableRequest* sort);
  ::io::deephaven::proto::backplane::grpc::SortTableRequest* unsafe_arena_release_sort();

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& head() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* release_head();
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* mutable_head();
  void set_allocated_head(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head);
  private:
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& _internal_head() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head);
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* unsafe_arena_release_head();

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
  bool has_tail() const;
  private:
  bool _internal_has_tail() const;
  public:
  void clear_tail();
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& tail() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* release_tail();
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* mutable_tail();
  void set_allocated_tail(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail);
  private:
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& _internal_tail() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* _internal_mutable_tail();
  public:
  void unsafe_arena_set_allocated_tail(
      ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail);
  ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* unsafe_arena_release_tail();

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
  bool has_head_by() const;
  private:
  bool _internal_has_head_by() const;
  public:
  void clear_head_by();
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& head_by() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* release_head_by();
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* mutable_head_by();
  void set_allocated_head_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by);
  private:
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& _internal_head_by() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* _internal_mutable_head_by();
  public:
  void unsafe_arena_set_allocated_head_by(
      ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by);
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* unsafe_arena_release_head_by();

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
  bool has_tail_by() const;
  private:
  bool _internal_has_tail_by() const;
  public:
  void clear_tail_by();
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& tail_by() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* release_tail_by();
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* mutable_tail_by();
  void set_allocated_tail_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by);
  private:
  const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& _internal_tail_by() const;
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* _internal_mutable_tail_by();
  public:
  void unsafe_arena_set_allocated_tail_by(
      ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by);
  ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* unsafe_arena_release_tail_by();

  // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
  bool has_ungroup() const;
  private:
  bool _internal_has_ungroup() const;
  public:
  void clear_ungroup();
  const ::io::deephaven::proto::backplane::grpc::UngroupRequest& ungroup() const;
  ::io::deephaven::proto::backplane::grpc::UngroupRequest* release_ungroup();
  ::io::deephaven::proto::backplane::grpc::UngroupRequest* mutable_ungroup();
  void set_allocated_ungroup(::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup);
  private:
  const ::io::deephaven::proto::backplane::grpc::UngroupRequest& _internal_ungroup() const;
  ::io::deephaven::proto::backplane::grpc::UngroupRequest* _internal_mutable_ungroup();
  public:
  void unsafe_arena_set_allocated_ungroup(
      ::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup);
  ::io::deephaven::proto::backplane::grpc::UngroupRequest* unsafe_arena_release_ungroup();

  // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
  bool has_merge() const;
  private:
  bool _internal_has_merge() const;
  public:
  void clear_merge();
  const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& merge() const;
  ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* release_merge();
  ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* mutable_merge();
  void set_allocated_merge(::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge);
  private:
  const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& _internal_merge() const;
  ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* _internal_mutable_merge();
  public:
  void unsafe_arena_set_allocated_merge(
      ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge);
  ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* unsafe_arena_release_merge();

  // .io.deephaven.proto.backplane.grpc.JoinTablesRequest join = 19;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::io::deephaven::proto::backplane::grpc::JoinTablesRequest& join() const;
  ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* release_join();
  ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* mutable_join();
  void set_allocated_join(::io::deephaven::proto::backplane::grpc::JoinTablesRequest* join);
  private:
  const ::io::deephaven::proto::backplane::grpc::JoinTablesRequest& _internal_join() const;
  ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* join);
  ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* unsafe_arena_release_join();

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 20;
  bool has_combo_aggregate() const;
  private:
  bool _internal_has_combo_aggregate() const;
  public:
  void clear_combo_aggregate();
  const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& combo_aggregate() const;
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* release_combo_aggregate();
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* mutable_combo_aggregate();
  void set_allocated_combo_aggregate(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate);
  private:
  const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& _internal_combo_aggregate() const;
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* _internal_mutable_combo_aggregate();
  public:
  void unsafe_arena_set_allocated_combo_aggregate(
      ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate);
  ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* unsafe_arena_release_combo_aggregate();

  // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 21;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& snapshot() const;
  ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* release_snapshot();
  ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* mutable_snapshot();
  void set_allocated_snapshot(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot);
  private:
  const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& _internal_snapshot() const;
  ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot);
  ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* unsafe_arena_release_snapshot();

  // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 22;
  bool has_flatten() const;
  private:
  bool _internal_has_flatten() const;
  public:
  void clear_flatten();
  const ::io::deephaven::proto::backplane::grpc::FlattenRequest& flatten() const;
  ::io::deephaven::proto::backplane::grpc::FlattenRequest* release_flatten();
  ::io::deephaven::proto::backplane::grpc::FlattenRequest* mutable_flatten();
  void set_allocated_flatten(::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten);
  private:
  const ::io::deephaven::proto::backplane::grpc::FlattenRequest& _internal_flatten() const;
  ::io::deephaven::proto::backplane::grpc::FlattenRequest* _internal_mutable_flatten();
  public:
  void unsafe_arena_set_allocated_flatten(
      ::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten);
  ::io::deephaven::proto::backplane::grpc::FlattenRequest* unsafe_arena_release_flatten();

  void clear_op();
  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
 private:
  class _Internal;
  void set_has_empty_table();
  void set_has_time_table();
  void set_has_drop_columns();
  void set_has_update();
  void set_has_lazy_update();
  void set_has_view();
  void set_has_update_view();
  void set_has_select();
  void set_has_select_distinct();
  void set_has_filter();
  void set_has_unstructured_filter();
  void set_has_sort();
  void set_has_head();
  void set_has_tail();
  void set_has_head_by();
  void set_has_tail_by();
  void set_has_ungroup();
  void set_has_merge();
  void set_has_join();
  void set_has_combo_aggregate();
  void set_has_snapshot();
  void set_has_flatten();

  inline bool has_op() const;
  inline void clear_has_op();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OpUnion {
    constexpr OpUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table_;
    ::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table_;
    ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns_;
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_;
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update_;
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view_;
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view_;
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select_;
    ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct_;
    ::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter_;
    ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter_;
    ::io::deephaven::proto::backplane::grpc::SortTableRequest* sort_;
    ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head_;
    ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail_;
    ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by_;
    ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by_;
    ::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup_;
    ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge_;
    ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* join_;
    ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate_;
    ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot_;
    ::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten_;
  } op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_table_2eproto;
};
// -------------------------------------------------------------------

class BatchTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.BatchTableRequest) */ {
 public:
  inline BatchTableRequest() : BatchTableRequest(nullptr) {}
  virtual ~BatchTableRequest();
  explicit constexpr BatchTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchTableRequest(const BatchTableRequest& from);
  BatchTableRequest(BatchTableRequest&& from) noexcept
    : BatchTableRequest() {
    *this = ::std::move(from);
  }

  inline BatchTableRequest& operator=(const BatchTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchTableRequest& operator=(BatchTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchTableRequest* internal_default_instance() {
    return reinterpret_cast<const BatchTableRequest*>(
               &_BatchTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BatchTableRequest& a, BatchTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchTableRequest* New() const final {
    return CreateMaybeMessage<BatchTableRequest>(nullptr);
  }

  BatchTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchTableRequest& from);
  void MergeFrom(const BatchTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.BatchTableRequest";
  }
  protected:
  explicit BatchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_table_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchTableRequest_Operation Operation;

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >*
      mutable_ops();
  private:
  const ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation& _internal_ops(int index) const;
  ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* _internal_add_ops();
  public:
  const ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation& ops(int index) const;
  ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >&
      ops() const;

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.BatchTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation > ops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_table_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableReference

// .arrow.flight.protocol.Wicket ticket = 1;
inline bool TableReference::_internal_has_ticket() const {
  return ref_case() == kTicket;
}
inline bool TableReference::has_ticket() const {
  return _internal_has_ticket();
}
inline void TableReference::set_has_ticket() {
  _oneof_case_[0] = kTicket;
}
inline ::arrow::flight::protocol::Wicket* TableReference::release_ticket() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TableReference.ticket)
  if (_internal_has_ticket()) {
    clear_has_ref();
      ::arrow::flight::protocol::Wicket* temp = ref_.ticket_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ref_.ticket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arrow::flight::protocol::Wicket& TableReference::_internal_ticket() const {
  return _internal_has_ticket()
      ? *ref_.ticket_
      : reinterpret_cast< ::arrow::flight::protocol::Wicket&>(::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& TableReference::ticket() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TableReference.ticket)
  return _internal_ticket();
}
inline ::arrow::flight::protocol::Wicket* TableReference::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.TableReference.ticket)
  if (_internal_has_ticket()) {
    clear_has_ref();
    ::arrow::flight::protocol::Wicket* temp = ref_.ticket_;
    ref_.ticket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableReference::unsafe_arena_set_allocated_ticket(::arrow::flight::protocol::Wicket* ticket) {
  clear_ref();
  if (ticket) {
    set_has_ticket();
    ref_.ticket_ = ticket;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.TableReference.ticket)
}
inline ::arrow::flight::protocol::Wicket* TableReference::_internal_mutable_ticket() {
  if (!_internal_has_ticket()) {
    clear_ref();
    set_has_ticket();
    ref_.ticket_ = CreateMaybeMessage< ::arrow::flight::protocol::Wicket >(GetArena());
  }
  return ref_.ticket_;
}
inline ::arrow::flight::protocol::Wicket* TableReference::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TableReference.ticket)
  return _internal_mutable_ticket();
}

// sint32 batch_offset = 2;
inline bool TableReference::_internal_has_batch_offset() const {
  return ref_case() == kBatchOffset;
}
inline bool TableReference::has_batch_offset() const {
  return _internal_has_batch_offset();
}
inline void TableReference::set_has_batch_offset() {
  _oneof_case_[0] = kBatchOffset;
}
inline void TableReference::clear_batch_offset() {
  if (_internal_has_batch_offset()) {
    ref_.batch_offset_ = 0;
    clear_has_ref();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableReference::_internal_batch_offset() const {
  if (_internal_has_batch_offset()) {
    return ref_.batch_offset_;
  }
  return 0;
}
inline void TableReference::_internal_set_batch_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_batch_offset()) {
    clear_ref();
    set_has_batch_offset();
  }
  ref_.batch_offset_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableReference::batch_offset() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TableReference.batch_offset)
  return _internal_batch_offset();
}
inline void TableReference::set_batch_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_offset(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TableReference.batch_offset)
}

inline bool TableReference::has_ref() const {
  return ref_case() != REF_NOT_SET;
}
inline void TableReference::clear_has_ref() {
  _oneof_case_[0] = REF_NOT_SET;
}
inline TableReference::RefCase TableReference::ref_case() const {
  return TableReference::RefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExportedTableCreationResponse

// .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
inline bool ExportedTableCreationResponse::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool ExportedTableCreationResponse::has_result_id() const {
  return _internal_has_result_id();
}
inline void ExportedTableCreationResponse::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& ExportedTableCreationResponse::_internal_result_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& ExportedTableCreationResponse::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.result_id)
  return _internal_result_id();
}
inline void ExportedTableCreationResponse::unsafe_arena_set_allocated_result_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ExportedTableCreationResponse::release_result_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ExportedTableCreationResponse::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.result_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ExportedTableCreationResponse::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ExportedTableCreationResponse::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.result_id)
  return _internal_mutable_result_id();
}
inline void ExportedTableCreationResponse::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::TableReference* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_id_;
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_id);
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.result_id)
}

// bool success = 2;
inline void ExportedTableCreationResponse::clear_success() {
  success_ = false;
}
inline bool ExportedTableCreationResponse::_internal_success() const {
  return success_;
}
inline bool ExportedTableCreationResponse::success() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.success)
  return _internal_success();
}
inline void ExportedTableCreationResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ExportedTableCreationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.success)
}

// string error_info = 3;
inline void ExportedTableCreationResponse::clear_error_info() {
  error_info_.ClearToEmpty();
}
inline const std::string& ExportedTableCreationResponse::error_info() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
  return _internal_error_info();
}
inline void ExportedTableCreationResponse::set_error_info(const std::string& value) {
  _internal_set_error_info(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
}
inline std::string* ExportedTableCreationResponse::mutable_error_info() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
  return _internal_mutable_error_info();
}
inline const std::string& ExportedTableCreationResponse::_internal_error_info() const {
  return error_info_.Get();
}
inline void ExportedTableCreationResponse::_internal_set_error_info(const std::string& value) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExportedTableCreationResponse::set_error_info(std::string&& value) {
  
  error_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
}
inline void ExportedTableCreationResponse::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
}
inline void ExportedTableCreationResponse::set_error_info(const char* value,
    size_t size) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
}
inline std::string* ExportedTableCreationResponse::_internal_mutable_error_info() {
  
  return error_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExportedTableCreationResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
  return error_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedTableCreationResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info)
}

// bytes schema_header = 4;
inline void ExportedTableCreationResponse::clear_schema_header() {
  schema_header_.ClearToEmpty();
}
inline const std::string& ExportedTableCreationResponse::schema_header() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
  return _internal_schema_header();
}
inline void ExportedTableCreationResponse::set_schema_header(const std::string& value) {
  _internal_set_schema_header(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
}
inline std::string* ExportedTableCreationResponse::mutable_schema_header() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
  return _internal_mutable_schema_header();
}
inline const std::string& ExportedTableCreationResponse::_internal_schema_header() const {
  return schema_header_.Get();
}
inline void ExportedTableCreationResponse::_internal_set_schema_header(const std::string& value) {
  
  schema_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExportedTableCreationResponse::set_schema_header(std::string&& value) {
  
  schema_header_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
}
inline void ExportedTableCreationResponse::set_schema_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
}
inline void ExportedTableCreationResponse::set_schema_header(const void* value,
    size_t size) {
  
  schema_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
}
inline std::string* ExportedTableCreationResponse::_internal_mutable_schema_header() {
  
  return schema_header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExportedTableCreationResponse::release_schema_header() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
  return schema_header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedTableCreationResponse::set_allocated_schema_header(std::string* schema_header) {
  if (schema_header != nullptr) {
    
  } else {
    
  }
  schema_header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.schema_header)
}

// bool is_static = 5;
inline void ExportedTableCreationResponse::clear_is_static() {
  is_static_ = false;
}
inline bool ExportedTableCreationResponse::_internal_is_static() const {
  return is_static_;
}
inline bool ExportedTableCreationResponse::is_static() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.is_static)
  return _internal_is_static();
}
inline void ExportedTableCreationResponse::_internal_set_is_static(bool value) {
  
  is_static_ = value;
}
inline void ExportedTableCreationResponse::set_is_static(bool value) {
  _internal_set_is_static(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.is_static)
}

// sint64 size = 6 [jstype = JS_STRING];
inline void ExportedTableCreationResponse::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportedTableCreationResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportedTableCreationResponse::size() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.size)
  return _internal_size();
}
inline void ExportedTableCreationResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ExportedTableCreationResponse::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.size)
}

// -------------------------------------------------------------------

// ExportedTableUpdatesRequest

// -------------------------------------------------------------------

// ExportedTableUpdateMessage

// .arrow.flight.protocol.Wicket export_id = 1;
inline bool ExportedTableUpdateMessage::_internal_has_export_id() const {
  return this != internal_default_instance() && export_id_ != nullptr;
}
inline bool ExportedTableUpdateMessage::has_export_id() const {
  return _internal_has_export_id();
}
inline const ::arrow::flight::protocol::Wicket& ExportedTableUpdateMessage::_internal_export_id() const {
  const ::arrow::flight::protocol::Wicket* p = export_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& ExportedTableUpdateMessage::export_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.export_id)
  return _internal_export_id();
}
inline void ExportedTableUpdateMessage::unsafe_arena_set_allocated_export_id(
    ::arrow::flight::protocol::Wicket* export_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_id_);
  }
  export_id_ = export_id;
  if (export_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.export_id)
}
inline ::arrow::flight::protocol::Wicket* ExportedTableUpdateMessage::release_export_id() {
  
  ::arrow::flight::protocol::Wicket* temp = export_id_;
  export_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ExportedTableUpdateMessage::unsafe_arena_release_export_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.export_id)
  
  ::arrow::flight::protocol::Wicket* temp = export_id_;
  export_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ExportedTableUpdateMessage::_internal_mutable_export_id() {
  
  if (export_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    export_id_ = p;
  }
  return export_id_;
}
inline ::arrow::flight::protocol::Wicket* ExportedTableUpdateMessage::mutable_export_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.export_id)
  return _internal_mutable_export_id();
}
inline void ExportedTableUpdateMessage::set_allocated_export_id(::arrow::flight::protocol::Wicket* export_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_id_);
  }
  if (export_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_id)->GetArena();
    if (message_arena != submessage_arena) {
      export_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, export_id, submessage_arena);
    }
    
  } else {
    
  }
  export_id_ = export_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.export_id)
}

// sint64 size = 2 [jstype = JS_STRING];
inline void ExportedTableUpdateMessage::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportedTableUpdateMessage::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportedTableUpdateMessage::size() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.size)
  return _internal_size();
}
inline void ExportedTableUpdateMessage::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ExportedTableUpdateMessage::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.size)
}

// string update_failure_message = 3;
inline void ExportedTableUpdateMessage::clear_update_failure_message() {
  update_failure_message_.ClearToEmpty();
}
inline const std::string& ExportedTableUpdateMessage::update_failure_message() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
  return _internal_update_failure_message();
}
inline void ExportedTableUpdateMessage::set_update_failure_message(const std::string& value) {
  _internal_set_update_failure_message(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
}
inline std::string* ExportedTableUpdateMessage::mutable_update_failure_message() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
  return _internal_mutable_update_failure_message();
}
inline const std::string& ExportedTableUpdateMessage::_internal_update_failure_message() const {
  return update_failure_message_.Get();
}
inline void ExportedTableUpdateMessage::_internal_set_update_failure_message(const std::string& value) {
  
  update_failure_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExportedTableUpdateMessage::set_update_failure_message(std::string&& value) {
  
  update_failure_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
}
inline void ExportedTableUpdateMessage::set_update_failure_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_failure_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
}
inline void ExportedTableUpdateMessage::set_update_failure_message(const char* value,
    size_t size) {
  
  update_failure_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
}
inline std::string* ExportedTableUpdateMessage::_internal_mutable_update_failure_message() {
  
  return update_failure_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExportedTableUpdateMessage::release_update_failure_message() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
  return update_failure_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedTableUpdateMessage::set_allocated_update_failure_message(std::string* update_failure_message) {
  if (update_failure_message != nullptr) {
    
  } else {
    
  }
  update_failure_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_failure_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message)
}

// -------------------------------------------------------------------

// ExportedTableUpdateBatchMessage

// repeated .io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage updates = 1;
inline int ExportedTableUpdateBatchMessage::_internal_updates_size() const {
  return updates_.size();
}
inline int ExportedTableUpdateBatchMessage::updates_size() const {
  return _internal_updates_size();
}
inline void ExportedTableUpdateBatchMessage::clear_updates() {
  updates_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* ExportedTableUpdateBatchMessage::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >*
ExportedTableUpdateBatchMessage::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage.updates)
  return &updates_;
}
inline const ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage& ExportedTableUpdateBatchMessage::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage& ExportedTableUpdateBatchMessage::updates(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage.updates)
  return _internal_updates(index);
}
inline ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* ExportedTableUpdateBatchMessage::_internal_add_updates() {
  return updates_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* ExportedTableUpdateBatchMessage::add_updates() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >&
ExportedTableUpdateBatchMessage::updates() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.ExportedTableUpdateBatchMessage.updates)
  return updates_;
}

// -------------------------------------------------------------------

// EmptyTableRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool EmptyTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool EmptyTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& EmptyTableRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& EmptyTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.EmptyTableRequest.result_id)
  return _internal_result_id();
}
inline void EmptyTableRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.EmptyTableRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* EmptyTableRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* EmptyTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.EmptyTableRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* EmptyTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* EmptyTableRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.EmptyTableRequest.result_id)
  return _internal_mutable_result_id();
}
inline void EmptyTableRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.EmptyTableRequest.result_id)
}

// sint64 size = 2 [jstype = JS_STRING];
inline void EmptyTableRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmptyTableRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmptyTableRequest::size() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.EmptyTableRequest.size)
  return _internal_size();
}
inline void EmptyTableRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void EmptyTableRequest::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.EmptyTableRequest.size)
}

// repeated string column_names = 3;
inline int EmptyTableRequest::_internal_column_names_size() const {
  return column_names_.size();
}
inline int EmptyTableRequest::column_names_size() const {
  return _internal_column_names_size();
}
inline void EmptyTableRequest::clear_column_names() {
  column_names_.Clear();
}
inline std::string* EmptyTableRequest::add_column_names() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  return _internal_add_column_names();
}
inline const std::string& EmptyTableRequest::_internal_column_names(int index) const {
  return column_names_.Get(index);
}
inline const std::string& EmptyTableRequest::column_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  return _internal_column_names(index);
}
inline std::string* EmptyTableRequest::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  return column_names_.Mutable(index);
}
inline void EmptyTableRequest::set_column_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  column_names_.Mutable(index)->assign(value);
}
inline void EmptyTableRequest::set_column_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  column_names_.Mutable(index)->assign(std::move(value));
}
inline void EmptyTableRequest::set_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
}
inline void EmptyTableRequest::set_column_names(int index, const char* value, size_t size) {
  column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
}
inline std::string* EmptyTableRequest::_internal_add_column_names() {
  return column_names_.Add();
}
inline void EmptyTableRequest::add_column_names(const std::string& value) {
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
}
inline void EmptyTableRequest::add_column_names(std::string&& value) {
  column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
}
inline void EmptyTableRequest::add_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
}
inline void EmptyTableRequest::add_column_names(const char* value, size_t size) {
  column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EmptyTableRequest::column_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  return column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EmptyTableRequest::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_names)
  return &column_names_;
}

// repeated string column_types = 4;
inline int EmptyTableRequest::_internal_column_types_size() const {
  return column_types_.size();
}
inline int EmptyTableRequest::column_types_size() const {
  return _internal_column_types_size();
}
inline void EmptyTableRequest::clear_column_types() {
  column_types_.Clear();
}
inline std::string* EmptyTableRequest::add_column_types() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  return _internal_add_column_types();
}
inline const std::string& EmptyTableRequest::_internal_column_types(int index) const {
  return column_types_.Get(index);
}
inline const std::string& EmptyTableRequest::column_types(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  return _internal_column_types(index);
}
inline std::string* EmptyTableRequest::mutable_column_types(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  return column_types_.Mutable(index);
}
inline void EmptyTableRequest::set_column_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  column_types_.Mutable(index)->assign(value);
}
inline void EmptyTableRequest::set_column_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  column_types_.Mutable(index)->assign(std::move(value));
}
inline void EmptyTableRequest::set_column_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
}
inline void EmptyTableRequest::set_column_types(int index, const char* value, size_t size) {
  column_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
}
inline std::string* EmptyTableRequest::_internal_add_column_types() {
  return column_types_.Add();
}
inline void EmptyTableRequest::add_column_types(const std::string& value) {
  column_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
}
inline void EmptyTableRequest::add_column_types(std::string&& value) {
  column_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
}
inline void EmptyTableRequest::add_column_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
}
inline void EmptyTableRequest::add_column_types(const char* value, size_t size) {
  column_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EmptyTableRequest::column_types() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  return column_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EmptyTableRequest::mutable_column_types() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.EmptyTableRequest.column_types)
  return &column_types_;
}

// -------------------------------------------------------------------

// TimeTableRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool TimeTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool TimeTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& TimeTableRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& TimeTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TimeTableRequest.result_id)
  return _internal_result_id();
}
inline void TimeTableRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.TimeTableRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* TimeTableRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* TimeTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TimeTableRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* TimeTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* TimeTableRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TimeTableRequest.result_id)
  return _internal_mutable_result_id();
}
inline void TimeTableRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TimeTableRequest.result_id)
}

// sint64 start_time_nanos = 2 [jstype = JS_STRING];
inline void TimeTableRequest::clear_start_time_nanos() {
  start_time_nanos_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeTableRequest::_internal_start_time_nanos() const {
  return start_time_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeTableRequest::start_time_nanos() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TimeTableRequest.start_time_nanos)
  return _internal_start_time_nanos();
}
inline void TimeTableRequest::_internal_set_start_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_nanos_ = value;
}
inline void TimeTableRequest::set_start_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time_nanos(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TimeTableRequest.start_time_nanos)
}

// sint64 period_nanos = 3 [jstype = JS_STRING];
inline void TimeTableRequest::clear_period_nanos() {
  period_nanos_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeTableRequest::_internal_period_nanos() const {
  return period_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeTableRequest::period_nanos() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TimeTableRequest.period_nanos)
  return _internal_period_nanos();
}
inline void TimeTableRequest::_internal_set_period_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  period_nanos_ = value;
}
inline void TimeTableRequest::set_period_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_period_nanos(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TimeTableRequest.period_nanos)
}

// -------------------------------------------------------------------

// SelectOrUpdateRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool SelectOrUpdateRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool SelectOrUpdateRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& SelectOrUpdateRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& SelectOrUpdateRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.result_id)
  return _internal_result_id();
}
inline void SelectOrUpdateRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* SelectOrUpdateRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SelectOrUpdateRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SelectOrUpdateRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* SelectOrUpdateRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.result_id)
  return _internal_mutable_result_id();
}
inline void SelectOrUpdateRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool SelectOrUpdateRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SelectOrUpdateRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void SelectOrUpdateRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SelectOrUpdateRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SelectOrUpdateRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.source_id)
  return _internal_source_id();
}
inline void SelectOrUpdateRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectOrUpdateRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectOrUpdateRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectOrUpdateRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectOrUpdateRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.source_id)
  return _internal_mutable_source_id();
}
inline void SelectOrUpdateRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.source_id)
}

// repeated string column_specs = 3;
inline int SelectOrUpdateRequest::_internal_column_specs_size() const {
  return column_specs_.size();
}
inline int SelectOrUpdateRequest::column_specs_size() const {
  return _internal_column_specs_size();
}
inline void SelectOrUpdateRequest::clear_column_specs() {
  column_specs_.Clear();
}
inline std::string* SelectOrUpdateRequest::add_column_specs() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  return _internal_add_column_specs();
}
inline const std::string& SelectOrUpdateRequest::_internal_column_specs(int index) const {
  return column_specs_.Get(index);
}
inline const std::string& SelectOrUpdateRequest::column_specs(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  return _internal_column_specs(index);
}
inline std::string* SelectOrUpdateRequest::mutable_column_specs(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  return column_specs_.Mutable(index);
}
inline void SelectOrUpdateRequest::set_column_specs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  column_specs_.Mutable(index)->assign(value);
}
inline void SelectOrUpdateRequest::set_column_specs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  column_specs_.Mutable(index)->assign(std::move(value));
}
inline void SelectOrUpdateRequest::set_column_specs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_specs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
}
inline void SelectOrUpdateRequest::set_column_specs(int index, const char* value, size_t size) {
  column_specs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
}
inline std::string* SelectOrUpdateRequest::_internal_add_column_specs() {
  return column_specs_.Add();
}
inline void SelectOrUpdateRequest::add_column_specs(const std::string& value) {
  column_specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
}
inline void SelectOrUpdateRequest::add_column_specs(std::string&& value) {
  column_specs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
}
inline void SelectOrUpdateRequest::add_column_specs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
}
inline void SelectOrUpdateRequest::add_column_specs(const char* value, size_t size) {
  column_specs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SelectOrUpdateRequest::column_specs() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  return column_specs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SelectOrUpdateRequest::mutable_column_specs() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs)
  return &column_specs_;
}

// -------------------------------------------------------------------

// SelectDistinctRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool SelectDistinctRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool SelectDistinctRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& SelectDistinctRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& SelectDistinctRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.result_id)
  return _internal_result_id();
}
inline void SelectDistinctRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* SelectDistinctRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SelectDistinctRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SelectDistinctRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* SelectDistinctRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.result_id)
  return _internal_mutable_result_id();
}
inline void SelectDistinctRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool SelectDistinctRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SelectDistinctRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void SelectDistinctRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SelectDistinctRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SelectDistinctRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.source_id)
  return _internal_source_id();
}
inline void SelectDistinctRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectDistinctRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectDistinctRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectDistinctRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SelectDistinctRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.source_id)
  return _internal_mutable_source_id();
}
inline void SelectDistinctRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.source_id)
}

// repeated string column_names = 3;
inline int SelectDistinctRequest::_internal_column_names_size() const {
  return column_names_.size();
}
inline int SelectDistinctRequest::column_names_size() const {
  return _internal_column_names_size();
}
inline void SelectDistinctRequest::clear_column_names() {
  column_names_.Clear();
}
inline std::string* SelectDistinctRequest::add_column_names() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  return _internal_add_column_names();
}
inline const std::string& SelectDistinctRequest::_internal_column_names(int index) const {
  return column_names_.Get(index);
}
inline const std::string& SelectDistinctRequest::column_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  return _internal_column_names(index);
}
inline std::string* SelectDistinctRequest::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  return column_names_.Mutable(index);
}
inline void SelectDistinctRequest::set_column_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  column_names_.Mutable(index)->assign(value);
}
inline void SelectDistinctRequest::set_column_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  column_names_.Mutable(index)->assign(std::move(value));
}
inline void SelectDistinctRequest::set_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
}
inline void SelectDistinctRequest::set_column_names(int index, const char* value, size_t size) {
  column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
}
inline std::string* SelectDistinctRequest::_internal_add_column_names() {
  return column_names_.Add();
}
inline void SelectDistinctRequest::add_column_names(const std::string& value) {
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
}
inline void SelectDistinctRequest::add_column_names(std::string&& value) {
  column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
}
inline void SelectDistinctRequest::add_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
}
inline void SelectDistinctRequest::add_column_names(const char* value, size_t size) {
  column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SelectDistinctRequest::column_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  return column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SelectDistinctRequest::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names)
  return &column_names_;
}

// -------------------------------------------------------------------

// DropColumnsRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool DropColumnsRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool DropColumnsRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& DropColumnsRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& DropColumnsRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.DropColumnsRequest.result_id)
  return _internal_result_id();
}
inline void DropColumnsRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.DropColumnsRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* DropColumnsRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* DropColumnsRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.DropColumnsRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* DropColumnsRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* DropColumnsRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.DropColumnsRequest.result_id)
  return _internal_mutable_result_id();
}
inline void DropColumnsRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.DropColumnsRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool DropColumnsRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool DropColumnsRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void DropColumnsRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& DropColumnsRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& DropColumnsRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.DropColumnsRequest.source_id)
  return _internal_source_id();
}
inline void DropColumnsRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.DropColumnsRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* DropColumnsRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* DropColumnsRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.DropColumnsRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* DropColumnsRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* DropColumnsRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.DropColumnsRequest.source_id)
  return _internal_mutable_source_id();
}
inline void DropColumnsRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.DropColumnsRequest.source_id)
}

// repeated string column_names = 3;
inline int DropColumnsRequest::_internal_column_names_size() const {
  return column_names_.size();
}
inline int DropColumnsRequest::column_names_size() const {
  return _internal_column_names_size();
}
inline void DropColumnsRequest::clear_column_names() {
  column_names_.Clear();
}
inline std::string* DropColumnsRequest::add_column_names() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  return _internal_add_column_names();
}
inline const std::string& DropColumnsRequest::_internal_column_names(int index) const {
  return column_names_.Get(index);
}
inline const std::string& DropColumnsRequest::column_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  return _internal_column_names(index);
}
inline std::string* DropColumnsRequest::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  return column_names_.Mutable(index);
}
inline void DropColumnsRequest::set_column_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  column_names_.Mutable(index)->assign(value);
}
inline void DropColumnsRequest::set_column_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  column_names_.Mutable(index)->assign(std::move(value));
}
inline void DropColumnsRequest::set_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
}
inline void DropColumnsRequest::set_column_names(int index, const char* value, size_t size) {
  column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
}
inline std::string* DropColumnsRequest::_internal_add_column_names() {
  return column_names_.Add();
}
inline void DropColumnsRequest::add_column_names(const std::string& value) {
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
}
inline void DropColumnsRequest::add_column_names(std::string&& value) {
  column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
}
inline void DropColumnsRequest::add_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
}
inline void DropColumnsRequest::add_column_names(const char* value, size_t size) {
  column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DropColumnsRequest::column_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  return column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DropColumnsRequest::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names)
  return &column_names_;
}

// -------------------------------------------------------------------

// UnstructuredFilterTableRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool UnstructuredFilterTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool UnstructuredFilterTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& UnstructuredFilterTableRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& UnstructuredFilterTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.result_id)
  return _internal_result_id();
}
inline void UnstructuredFilterTableRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* UnstructuredFilterTableRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* UnstructuredFilterTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* UnstructuredFilterTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* UnstructuredFilterTableRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.result_id)
  return _internal_mutable_result_id();
}
inline void UnstructuredFilterTableRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool UnstructuredFilterTableRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool UnstructuredFilterTableRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void UnstructuredFilterTableRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& UnstructuredFilterTableRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& UnstructuredFilterTableRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.source_id)
  return _internal_source_id();
}
inline void UnstructuredFilterTableRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UnstructuredFilterTableRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UnstructuredFilterTableRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UnstructuredFilterTableRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UnstructuredFilterTableRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.source_id)
  return _internal_mutable_source_id();
}
inline void UnstructuredFilterTableRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.source_id)
}

// repeated string filters = 3;
inline int UnstructuredFilterTableRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int UnstructuredFilterTableRequest::filters_size() const {
  return _internal_filters_size();
}
inline void UnstructuredFilterTableRequest::clear_filters() {
  filters_.Clear();
}
inline std::string* UnstructuredFilterTableRequest::add_filters() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  return _internal_add_filters();
}
inline const std::string& UnstructuredFilterTableRequest::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const std::string& UnstructuredFilterTableRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  return _internal_filters(index);
}
inline std::string* UnstructuredFilterTableRequest::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  return filters_.Mutable(index);
}
inline void UnstructuredFilterTableRequest::set_filters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  filters_.Mutable(index)->assign(value);
}
inline void UnstructuredFilterTableRequest::set_filters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  filters_.Mutable(index)->assign(std::move(value));
}
inline void UnstructuredFilterTableRequest::set_filters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
}
inline void UnstructuredFilterTableRequest::set_filters(int index, const char* value, size_t size) {
  filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
}
inline std::string* UnstructuredFilterTableRequest::_internal_add_filters() {
  return filters_.Add();
}
inline void UnstructuredFilterTableRequest::add_filters(const std::string& value) {
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
}
inline void UnstructuredFilterTableRequest::add_filters(std::string&& value) {
  filters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
}
inline void UnstructuredFilterTableRequest::add_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
}
inline void UnstructuredFilterTableRequest::add_filters(const char* value, size_t size) {
  filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UnstructuredFilterTableRequest::filters() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UnstructuredFilterTableRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters)
  return &filters_;
}

// -------------------------------------------------------------------

// HeadOrTailRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool HeadOrTailRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool HeadOrTailRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& HeadOrTailRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& HeadOrTailRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.result_id)
  return _internal_result_id();
}
inline void HeadOrTailRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.result_id)
  return _internal_mutable_result_id();
}
inline void HeadOrTailRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool HeadOrTailRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool HeadOrTailRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void HeadOrTailRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& HeadOrTailRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& HeadOrTailRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.source_id)
  return _internal_source_id();
}
inline void HeadOrTailRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.source_id)
  return _internal_mutable_source_id();
}
inline void HeadOrTailRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.source_id)
}

// sint64 num_rows = 3 [jstype = JS_STRING];
inline void HeadOrTailRequest::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HeadOrTailRequest::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HeadOrTailRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.num_rows)
  return _internal_num_rows();
}
inline void HeadOrTailRequest::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_rows_ = value;
}
inline void HeadOrTailRequest::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HeadOrTailRequest.num_rows)
}

// -------------------------------------------------------------------

// HeadOrTailByRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool HeadOrTailByRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool HeadOrTailByRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& HeadOrTailByRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& HeadOrTailByRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.result_id)
  return _internal_result_id();
}
inline void HeadOrTailByRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailByRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailByRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailByRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* HeadOrTailByRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.result_id)
  return _internal_mutable_result_id();
}
inline void HeadOrTailByRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool HeadOrTailByRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool HeadOrTailByRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void HeadOrTailByRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& HeadOrTailByRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& HeadOrTailByRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.source_id)
  return _internal_source_id();
}
inline void HeadOrTailByRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailByRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailByRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailByRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* HeadOrTailByRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.source_id)
  return _internal_mutable_source_id();
}
inline void HeadOrTailByRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.source_id)
}

// sint64 num_rows = 3 [jstype = JS_STRING];
inline void HeadOrTailByRequest::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HeadOrTailByRequest::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HeadOrTailByRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.num_rows)
  return _internal_num_rows();
}
inline void HeadOrTailByRequest::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_rows_ = value;
}
inline void HeadOrTailByRequest::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.num_rows)
}

// repeated string group_by_column_specs = 4;
inline int HeadOrTailByRequest::_internal_group_by_column_specs_size() const {
  return group_by_column_specs_.size();
}
inline int HeadOrTailByRequest::group_by_column_specs_size() const {
  return _internal_group_by_column_specs_size();
}
inline void HeadOrTailByRequest::clear_group_by_column_specs() {
  group_by_column_specs_.Clear();
}
inline std::string* HeadOrTailByRequest::add_group_by_column_specs() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  return _internal_add_group_by_column_specs();
}
inline const std::string& HeadOrTailByRequest::_internal_group_by_column_specs(int index) const {
  return group_by_column_specs_.Get(index);
}
inline const std::string& HeadOrTailByRequest::group_by_column_specs(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  return _internal_group_by_column_specs(index);
}
inline std::string* HeadOrTailByRequest::mutable_group_by_column_specs(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  return group_by_column_specs_.Mutable(index);
}
inline void HeadOrTailByRequest::set_group_by_column_specs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  group_by_column_specs_.Mutable(index)->assign(value);
}
inline void HeadOrTailByRequest::set_group_by_column_specs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  group_by_column_specs_.Mutable(index)->assign(std::move(value));
}
inline void HeadOrTailByRequest::set_group_by_column_specs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_column_specs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
}
inline void HeadOrTailByRequest::set_group_by_column_specs(int index, const char* value, size_t size) {
  group_by_column_specs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
}
inline std::string* HeadOrTailByRequest::_internal_add_group_by_column_specs() {
  return group_by_column_specs_.Add();
}
inline void HeadOrTailByRequest::add_group_by_column_specs(const std::string& value) {
  group_by_column_specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
}
inline void HeadOrTailByRequest::add_group_by_column_specs(std::string&& value) {
  group_by_column_specs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
}
inline void HeadOrTailByRequest::add_group_by_column_specs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_column_specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
}
inline void HeadOrTailByRequest::add_group_by_column_specs(const char* value, size_t size) {
  group_by_column_specs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HeadOrTailByRequest::group_by_column_specs() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  return group_by_column_specs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HeadOrTailByRequest::mutable_group_by_column_specs() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs)
  return &group_by_column_specs_;
}

// -------------------------------------------------------------------

// UngroupRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool UngroupRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool UngroupRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& UngroupRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& UngroupRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UngroupRequest.result_id)
  return _internal_result_id();
}
inline void UngroupRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.UngroupRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* UngroupRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* UngroupRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.UngroupRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* UngroupRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* UngroupRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.UngroupRequest.result_id)
  return _internal_mutable_result_id();
}
inline void UngroupRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UngroupRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool UngroupRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool UngroupRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void UngroupRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& UngroupRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& UngroupRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UngroupRequest.source_id)
  return _internal_source_id();
}
inline void UngroupRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.UngroupRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UngroupRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UngroupRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.UngroupRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UngroupRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* UngroupRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.UngroupRequest.source_id)
  return _internal_mutable_source_id();
}
inline void UngroupRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UngroupRequest.source_id)
}

// bool null_fill = 3;
inline void UngroupRequest::clear_null_fill() {
  null_fill_ = false;
}
inline bool UngroupRequest::_internal_null_fill() const {
  return null_fill_;
}
inline bool UngroupRequest::null_fill() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UngroupRequest.null_fill)
  return _internal_null_fill();
}
inline void UngroupRequest::_internal_set_null_fill(bool value) {
  
  null_fill_ = value;
}
inline void UngroupRequest::set_null_fill(bool value) {
  _internal_set_null_fill(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.UngroupRequest.null_fill)
}

// repeated string columns_to_ungroup = 4;
inline int UngroupRequest::_internal_columns_to_ungroup_size() const {
  return columns_to_ungroup_.size();
}
inline int UngroupRequest::columns_to_ungroup_size() const {
  return _internal_columns_to_ungroup_size();
}
inline void UngroupRequest::clear_columns_to_ungroup() {
  columns_to_ungroup_.Clear();
}
inline std::string* UngroupRequest::add_columns_to_ungroup() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  return _internal_add_columns_to_ungroup();
}
inline const std::string& UngroupRequest::_internal_columns_to_ungroup(int index) const {
  return columns_to_ungroup_.Get(index);
}
inline const std::string& UngroupRequest::columns_to_ungroup(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  return _internal_columns_to_ungroup(index);
}
inline std::string* UngroupRequest::mutable_columns_to_ungroup(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  return columns_to_ungroup_.Mutable(index);
}
inline void UngroupRequest::set_columns_to_ungroup(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  columns_to_ungroup_.Mutable(index)->assign(value);
}
inline void UngroupRequest::set_columns_to_ungroup(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  columns_to_ungroup_.Mutable(index)->assign(std::move(value));
}
inline void UngroupRequest::set_columns_to_ungroup(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_to_ungroup_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
}
inline void UngroupRequest::set_columns_to_ungroup(int index, const char* value, size_t size) {
  columns_to_ungroup_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
}
inline std::string* UngroupRequest::_internal_add_columns_to_ungroup() {
  return columns_to_ungroup_.Add();
}
inline void UngroupRequest::add_columns_to_ungroup(const std::string& value) {
  columns_to_ungroup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
}
inline void UngroupRequest::add_columns_to_ungroup(std::string&& value) {
  columns_to_ungroup_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
}
inline void UngroupRequest::add_columns_to_ungroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_to_ungroup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
}
inline void UngroupRequest::add_columns_to_ungroup(const char* value, size_t size) {
  columns_to_ungroup_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UngroupRequest::columns_to_ungroup() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  return columns_to_ungroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UngroupRequest::mutable_columns_to_ungroup() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup)
  return &columns_to_ungroup_;
}

// -------------------------------------------------------------------

// MergeTablesRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool MergeTablesRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool MergeTablesRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& MergeTablesRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& MergeTablesRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.MergeTablesRequest.result_id)
  return _internal_result_id();
}
inline void MergeTablesRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.MergeTablesRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* MergeTablesRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* MergeTablesRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.MergeTablesRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* MergeTablesRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* MergeTablesRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.MergeTablesRequest.result_id)
  return _internal_mutable_result_id();
}
inline void MergeTablesRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.MergeTablesRequest.result_id)
}

// repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
inline int MergeTablesRequest::_internal_source_ids_size() const {
  return source_ids_.size();
}
inline int MergeTablesRequest::source_ids_size() const {
  return _internal_source_ids_size();
}
inline void MergeTablesRequest::clear_source_ids() {
  source_ids_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* MergeTablesRequest::mutable_source_ids(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.MergeTablesRequest.source_ids)
  return source_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TableReference >*
MergeTablesRequest::mutable_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.MergeTablesRequest.source_ids)
  return &source_ids_;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& MergeTablesRequest::_internal_source_ids(int index) const {
  return source_ids_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& MergeTablesRequest::source_ids(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.MergeTablesRequest.source_ids)
  return _internal_source_ids(index);
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* MergeTablesRequest::_internal_add_source_ids() {
  return source_ids_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* MergeTablesRequest::add_source_ids() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.MergeTablesRequest.source_ids)
  return _internal_add_source_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TableReference >&
MergeTablesRequest::source_ids() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.MergeTablesRequest.source_ids)
  return source_ids_;
}

// string key_column = 3;
inline void MergeTablesRequest::clear_key_column() {
  key_column_.ClearToEmpty();
}
inline const std::string& MergeTablesRequest::key_column() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
  return _internal_key_column();
}
inline void MergeTablesRequest::set_key_column(const std::string& value) {
  _internal_set_key_column(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
}
inline std::string* MergeTablesRequest::mutable_key_column() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
  return _internal_mutable_key_column();
}
inline const std::string& MergeTablesRequest::_internal_key_column() const {
  return key_column_.Get();
}
inline void MergeTablesRequest::_internal_set_key_column(const std::string& value) {
  
  key_column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MergeTablesRequest::set_key_column(std::string&& value) {
  
  key_column_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
}
inline void MergeTablesRequest::set_key_column(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
}
inline void MergeTablesRequest::set_key_column(const char* value,
    size_t size) {
  
  key_column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
}
inline std::string* MergeTablesRequest::_internal_mutable_key_column() {
  
  return key_column_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MergeTablesRequest::release_key_column() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
  return key_column_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MergeTablesRequest::set_allocated_key_column(std::string* key_column) {
  if (key_column != nullptr) {
    
  } else {
    
  }
  key_column_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_column,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column)
}

// -------------------------------------------------------------------

// SnapshotTableRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool SnapshotTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool SnapshotTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& SnapshotTableRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& SnapshotTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.result_id)
  return _internal_result_id();
}
inline void SnapshotTableRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* SnapshotTableRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SnapshotTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SnapshotTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* SnapshotTableRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.result_id)
  return _internal_mutable_result_id();
}
inline void SnapshotTableRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
inline bool SnapshotTableRequest::_internal_has_left_id() const {
  return this != internal_default_instance() && left_id_ != nullptr;
}
inline bool SnapshotTableRequest::has_left_id() const {
  return _internal_has_left_id();
}
inline void SnapshotTableRequest::clear_left_id() {
  if (GetArena() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SnapshotTableRequest::_internal_left_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = left_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SnapshotTableRequest::left_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.left_id)
  return _internal_left_id();
}
inline void SnapshotTableRequest::unsafe_arena_set_allocated_left_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* left_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_id_);
  }
  left_id_ = left_id;
  if (left_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.left_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::release_left_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = left_id_;
  left_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::unsafe_arena_release_left_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.left_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = left_id_;
  left_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::_internal_mutable_left_id() {
  
  if (left_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    left_id_ = p;
  }
  return left_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::mutable_left_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.left_id)
  return _internal_mutable_left_id();
}
inline void SnapshotTableRequest::set_allocated_left_id(::io::deephaven::proto::backplane::grpc::TableReference* left_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_id_;
  }
  if (left_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_id);
    if (message_arena != submessage_arena) {
      left_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_id, submessage_arena);
    }
    
  } else {
    
  }
  left_id_ = left_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.left_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
inline bool SnapshotTableRequest::_internal_has_right_id() const {
  return this != internal_default_instance() && right_id_ != nullptr;
}
inline bool SnapshotTableRequest::has_right_id() const {
  return _internal_has_right_id();
}
inline void SnapshotTableRequest::clear_right_id() {
  if (GetArena() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SnapshotTableRequest::_internal_right_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = right_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SnapshotTableRequest::right_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.right_id)
  return _internal_right_id();
}
inline void SnapshotTableRequest::unsafe_arena_set_allocated_right_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* right_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_id_);
  }
  right_id_ = right_id;
  if (right_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.right_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::release_right_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = right_id_;
  right_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::unsafe_arena_release_right_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.right_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = right_id_;
  right_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::_internal_mutable_right_id() {
  
  if (right_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    right_id_ = p;
  }
  return right_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SnapshotTableRequest::mutable_right_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.right_id)
  return _internal_mutable_right_id();
}
inline void SnapshotTableRequest::set_allocated_right_id(::io::deephaven::proto::backplane::grpc::TableReference* right_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_id_;
  }
  if (right_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right_id);
    if (message_arena != submessage_arena) {
      right_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_id, submessage_arena);
    }
    
  } else {
    
  }
  right_id_ = right_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.right_id)
}

// bool do_initial_snapshot = 4;
inline void SnapshotTableRequest::clear_do_initial_snapshot() {
  do_initial_snapshot_ = false;
}
inline bool SnapshotTableRequest::_internal_do_initial_snapshot() const {
  return do_initial_snapshot_;
}
inline bool SnapshotTableRequest::do_initial_snapshot() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.do_initial_snapshot)
  return _internal_do_initial_snapshot();
}
inline void SnapshotTableRequest::_internal_set_do_initial_snapshot(bool value) {
  
  do_initial_snapshot_ = value;
}
inline void SnapshotTableRequest::set_do_initial_snapshot(bool value) {
  _internal_set_do_initial_snapshot(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.do_initial_snapshot)
}

// repeated string stamp_columns = 5;
inline int SnapshotTableRequest::_internal_stamp_columns_size() const {
  return stamp_columns_.size();
}
inline int SnapshotTableRequest::stamp_columns_size() const {
  return _internal_stamp_columns_size();
}
inline void SnapshotTableRequest::clear_stamp_columns() {
  stamp_columns_.Clear();
}
inline std::string* SnapshotTableRequest::add_stamp_columns() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  return _internal_add_stamp_columns();
}
inline const std::string& SnapshotTableRequest::_internal_stamp_columns(int index) const {
  return stamp_columns_.Get(index);
}
inline const std::string& SnapshotTableRequest::stamp_columns(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  return _internal_stamp_columns(index);
}
inline std::string* SnapshotTableRequest::mutable_stamp_columns(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  return stamp_columns_.Mutable(index);
}
inline void SnapshotTableRequest::set_stamp_columns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  stamp_columns_.Mutable(index)->assign(value);
}
inline void SnapshotTableRequest::set_stamp_columns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  stamp_columns_.Mutable(index)->assign(std::move(value));
}
inline void SnapshotTableRequest::set_stamp_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stamp_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
}
inline void SnapshotTableRequest::set_stamp_columns(int index, const char* value, size_t size) {
  stamp_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
}
inline std::string* SnapshotTableRequest::_internal_add_stamp_columns() {
  return stamp_columns_.Add();
}
inline void SnapshotTableRequest::add_stamp_columns(const std::string& value) {
  stamp_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
}
inline void SnapshotTableRequest::add_stamp_columns(std::string&& value) {
  stamp_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
}
inline void SnapshotTableRequest::add_stamp_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stamp_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
}
inline void SnapshotTableRequest::add_stamp_columns(const char* value, size_t size) {
  stamp_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnapshotTableRequest::stamp_columns() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  return stamp_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnapshotTableRequest::mutable_stamp_columns() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns)
  return &stamp_columns_;
}

// -------------------------------------------------------------------

// JoinTablesRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool JoinTablesRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool JoinTablesRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& JoinTablesRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& JoinTablesRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.JoinTablesRequest.result_id)
  return _internal_result_id();
}
inline void JoinTablesRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.JoinTablesRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* JoinTablesRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* JoinTablesRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.JoinTablesRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* JoinTablesRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* JoinTablesRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.result_id)
  return _internal_mutable_result_id();
}
inline void JoinTablesRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.JoinTablesRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
inline bool JoinTablesRequest::_internal_has_left_id() const {
  return this != internal_default_instance() && left_id_ != nullptr;
}
inline bool JoinTablesRequest::has_left_id() const {
  return _internal_has_left_id();
}
inline void JoinTablesRequest::clear_left_id() {
  if (GetArena() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& JoinTablesRequest::_internal_left_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = left_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& JoinTablesRequest::left_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.JoinTablesRequest.left_id)
  return _internal_left_id();
}
inline void JoinTablesRequest::unsafe_arena_set_allocated_left_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* left_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_id_);
  }
  left_id_ = left_id;
  if (left_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.JoinTablesRequest.left_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::release_left_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = left_id_;
  left_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::unsafe_arena_release_left_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.JoinTablesRequest.left_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = left_id_;
  left_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::_internal_mutable_left_id() {
  
  if (left_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    left_id_ = p;
  }
  return left_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::mutable_left_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.left_id)
  return _internal_mutable_left_id();
}
inline void JoinTablesRequest::set_allocated_left_id(::io::deephaven::proto::backplane::grpc::TableReference* left_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_id_;
  }
  if (left_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_id);
    if (message_arena != submessage_arena) {
      left_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_id, submessage_arena);
    }
    
  } else {
    
  }
  left_id_ = left_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.JoinTablesRequest.left_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
inline bool JoinTablesRequest::_internal_has_right_id() const {
  return this != internal_default_instance() && right_id_ != nullptr;
}
inline bool JoinTablesRequest::has_right_id() const {
  return _internal_has_right_id();
}
inline void JoinTablesRequest::clear_right_id() {
  if (GetArena() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& JoinTablesRequest::_internal_right_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = right_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& JoinTablesRequest::right_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.JoinTablesRequest.right_id)
  return _internal_right_id();
}
inline void JoinTablesRequest::unsafe_arena_set_allocated_right_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* right_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_id_);
  }
  right_id_ = right_id;
  if (right_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.JoinTablesRequest.right_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::release_right_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = right_id_;
  right_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::unsafe_arena_release_right_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.JoinTablesRequest.right_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = right_id_;
  right_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::_internal_mutable_right_id() {
  
  if (right_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    right_id_ = p;
  }
  return right_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* JoinTablesRequest::mutable_right_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.right_id)
  return _internal_mutable_right_id();
}
inline void JoinTablesRequest::set_allocated_right_id(::io::deephaven::proto::backplane::grpc::TableReference* right_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_id_;
  }
  if (right_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right_id);
    if (message_arena != submessage_arena) {
      right_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_id, submessage_arena);
    }
    
  } else {
    
  }
  right_id_ = right_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.JoinTablesRequest.right_id)
}

// repeated string columns_to_match = 4;
inline int JoinTablesRequest::_internal_columns_to_match_size() const {
  return columns_to_match_.size();
}
inline int JoinTablesRequest::columns_to_match_size() const {
  return _internal_columns_to_match_size();
}
inline void JoinTablesRequest::clear_columns_to_match() {
  columns_to_match_.Clear();
}
inline std::string* JoinTablesRequest::add_columns_to_match() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  return _internal_add_columns_to_match();
}
inline const std::string& JoinTablesRequest::_internal_columns_to_match(int index) const {
  return columns_to_match_.Get(index);
}
inline const std::string& JoinTablesRequest::columns_to_match(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  return _internal_columns_to_match(index);
}
inline std::string* JoinTablesRequest::mutable_columns_to_match(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  return columns_to_match_.Mutable(index);
}
inline void JoinTablesRequest::set_columns_to_match(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  columns_to_match_.Mutable(index)->assign(value);
}
inline void JoinTablesRequest::set_columns_to_match(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  columns_to_match_.Mutable(index)->assign(std::move(value));
}
inline void JoinTablesRequest::set_columns_to_match(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_to_match_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
}
inline void JoinTablesRequest::set_columns_to_match(int index, const char* value, size_t size) {
  columns_to_match_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
}
inline std::string* JoinTablesRequest::_internal_add_columns_to_match() {
  return columns_to_match_.Add();
}
inline void JoinTablesRequest::add_columns_to_match(const std::string& value) {
  columns_to_match_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
}
inline void JoinTablesRequest::add_columns_to_match(std::string&& value) {
  columns_to_match_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
}
inline void JoinTablesRequest::add_columns_to_match(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_to_match_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
}
inline void JoinTablesRequest::add_columns_to_match(const char* value, size_t size) {
  columns_to_match_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JoinTablesRequest::columns_to_match() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  return columns_to_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JoinTablesRequest::mutable_columns_to_match() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_match)
  return &columns_to_match_;
}

// repeated string columns_to_add = 5;
inline int JoinTablesRequest::_internal_columns_to_add_size() const {
  return columns_to_add_.size();
}
inline int JoinTablesRequest::columns_to_add_size() const {
  return _internal_columns_to_add_size();
}
inline void JoinTablesRequest::clear_columns_to_add() {
  columns_to_add_.Clear();
}
inline std::string* JoinTablesRequest::add_columns_to_add() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  return _internal_add_columns_to_add();
}
inline const std::string& JoinTablesRequest::_internal_columns_to_add(int index) const {
  return columns_to_add_.Get(index);
}
inline const std::string& JoinTablesRequest::columns_to_add(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  return _internal_columns_to_add(index);
}
inline std::string* JoinTablesRequest::mutable_columns_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  return columns_to_add_.Mutable(index);
}
inline void JoinTablesRequest::set_columns_to_add(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  columns_to_add_.Mutable(index)->assign(value);
}
inline void JoinTablesRequest::set_columns_to_add(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  columns_to_add_.Mutable(index)->assign(std::move(value));
}
inline void JoinTablesRequest::set_columns_to_add(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_to_add_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
}
inline void JoinTablesRequest::set_columns_to_add(int index, const char* value, size_t size) {
  columns_to_add_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
}
inline std::string* JoinTablesRequest::_internal_add_columns_to_add() {
  return columns_to_add_.Add();
}
inline void JoinTablesRequest::add_columns_to_add(const std::string& value) {
  columns_to_add_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
}
inline void JoinTablesRequest::add_columns_to_add(std::string&& value) {
  columns_to_add_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
}
inline void JoinTablesRequest::add_columns_to_add(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_to_add_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
}
inline void JoinTablesRequest::add_columns_to_add(const char* value, size_t size) {
  columns_to_add_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JoinTablesRequest::columns_to_add() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  return columns_to_add_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JoinTablesRequest::mutable_columns_to_add() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.JoinTablesRequest.columns_to_add)
  return &columns_to_add_;
}

// .io.deephaven.proto.backplane.grpc.JoinTablesRequest.Type join_type = 6;
inline void JoinTablesRequest::clear_join_type() {
  join_type_ = 0;
}
inline ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type JoinTablesRequest::_internal_join_type() const {
  return static_cast< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type >(join_type_);
}
inline ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type JoinTablesRequest::join_type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.JoinTablesRequest.join_type)
  return _internal_join_type();
}
inline void JoinTablesRequest::_internal_set_join_type(::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type value) {
  
  join_type_ = value;
}
inline void JoinTablesRequest::set_join_type(::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type value) {
  _internal_set_join_type(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.JoinTablesRequest.join_type)
}

// -------------------------------------------------------------------

// ComboAggregateRequest_Aggregate

// .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
inline void ComboAggregateRequest_Aggregate::clear_type() {
  type_ = 0;
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType ComboAggregateRequest_Aggregate::_internal_type() const {
  return static_cast< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType >(type_);
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType ComboAggregateRequest_Aggregate::type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.type)
  return _internal_type();
}
inline void ComboAggregateRequest_Aggregate::_internal_set_type(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType value) {
  
  type_ = value;
}
inline void ComboAggregateRequest_Aggregate::set_type(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.type)
}

// repeated string match_pairs = 2;
inline int ComboAggregateRequest_Aggregate::_internal_match_pairs_size() const {
  return match_pairs_.size();
}
inline int ComboAggregateRequest_Aggregate::match_pairs_size() const {
  return _internal_match_pairs_size();
}
inline void ComboAggregateRequest_Aggregate::clear_match_pairs() {
  match_pairs_.Clear();
}
inline std::string* ComboAggregateRequest_Aggregate::add_match_pairs() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  return _internal_add_match_pairs();
}
inline const std::string& ComboAggregateRequest_Aggregate::_internal_match_pairs(int index) const {
  return match_pairs_.Get(index);
}
inline const std::string& ComboAggregateRequest_Aggregate::match_pairs(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  return _internal_match_pairs(index);
}
inline std::string* ComboAggregateRequest_Aggregate::mutable_match_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  return match_pairs_.Mutable(index);
}
inline void ComboAggregateRequest_Aggregate::set_match_pairs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  match_pairs_.Mutable(index)->assign(value);
}
inline void ComboAggregateRequest_Aggregate::set_match_pairs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  match_pairs_.Mutable(index)->assign(std::move(value));
}
inline void ComboAggregateRequest_Aggregate::set_match_pairs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_pairs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
}
inline void ComboAggregateRequest_Aggregate::set_match_pairs(int index, const char* value, size_t size) {
  match_pairs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
}
inline std::string* ComboAggregateRequest_Aggregate::_internal_add_match_pairs() {
  return match_pairs_.Add();
}
inline void ComboAggregateRequest_Aggregate::add_match_pairs(const std::string& value) {
  match_pairs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
}
inline void ComboAggregateRequest_Aggregate::add_match_pairs(std::string&& value) {
  match_pairs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
}
inline void ComboAggregateRequest_Aggregate::add_match_pairs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_pairs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
}
inline void ComboAggregateRequest_Aggregate::add_match_pairs(const char* value, size_t size) {
  match_pairs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComboAggregateRequest_Aggregate::match_pairs() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  return match_pairs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComboAggregateRequest_Aggregate::mutable_match_pairs() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs)
  return &match_pairs_;
}

// string column_name = 3;
inline void ComboAggregateRequest_Aggregate::clear_column_name() {
  column_name_.ClearToEmpty();
}
inline const std::string& ComboAggregateRequest_Aggregate::column_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
  return _internal_column_name();
}
inline void ComboAggregateRequest_Aggregate::set_column_name(const std::string& value) {
  _internal_set_column_name(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
}
inline std::string* ComboAggregateRequest_Aggregate::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
  return _internal_mutable_column_name();
}
inline const std::string& ComboAggregateRequest_Aggregate::_internal_column_name() const {
  return column_name_.Get();
}
inline void ComboAggregateRequest_Aggregate::_internal_set_column_name(const std::string& value) {
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComboAggregateRequest_Aggregate::set_column_name(std::string&& value) {
  
  column_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
}
inline void ComboAggregateRequest_Aggregate::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
}
inline void ComboAggregateRequest_Aggregate::set_column_name(const char* value,
    size_t size) {
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
}
inline std::string* ComboAggregateRequest_Aggregate::_internal_mutable_column_name() {
  
  return column_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComboAggregateRequest_Aggregate::release_column_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
  return column_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComboAggregateRequest_Aggregate::set_allocated_column_name(std::string* column_name) {
  if (column_name != nullptr) {
    
  } else {
    
  }
  column_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name)
}

// double percentile = 4;
inline void ComboAggregateRequest_Aggregate::clear_percentile() {
  percentile_ = 0;
}
inline double ComboAggregateRequest_Aggregate::_internal_percentile() const {
  return percentile_;
}
inline double ComboAggregateRequest_Aggregate::percentile() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.percentile)
  return _internal_percentile();
}
inline void ComboAggregateRequest_Aggregate::_internal_set_percentile(double value) {
  
  percentile_ = value;
}
inline void ComboAggregateRequest_Aggregate::set_percentile(double value) {
  _internal_set_percentile(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.percentile)
}

// bool avg_median = 5;
inline void ComboAggregateRequest_Aggregate::clear_avg_median() {
  avg_median_ = false;
}
inline bool ComboAggregateRequest_Aggregate::_internal_avg_median() const {
  return avg_median_;
}
inline bool ComboAggregateRequest_Aggregate::avg_median() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.avg_median)
  return _internal_avg_median();
}
inline void ComboAggregateRequest_Aggregate::_internal_set_avg_median(bool value) {
  
  avg_median_ = value;
}
inline void ComboAggregateRequest_Aggregate::set_avg_median(bool value) {
  _internal_set_avg_median(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.avg_median)
}

// -------------------------------------------------------------------

// ComboAggregateRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool ComboAggregateRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool ComboAggregateRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& ComboAggregateRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& ComboAggregateRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.result_id)
  return _internal_result_id();
}
inline void ComboAggregateRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* ComboAggregateRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ComboAggregateRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* ComboAggregateRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* ComboAggregateRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.result_id)
  return _internal_mutable_result_id();
}
inline void ComboAggregateRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool ComboAggregateRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool ComboAggregateRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void ComboAggregateRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& ComboAggregateRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& ComboAggregateRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.source_id)
  return _internal_source_id();
}
inline void ComboAggregateRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ComboAggregateRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ComboAggregateRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ComboAggregateRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* ComboAggregateRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.source_id)
  return _internal_mutable_source_id();
}
inline void ComboAggregateRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.source_id)
}

// repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
inline int ComboAggregateRequest::_internal_aggregates_size() const {
  return aggregates_.size();
}
inline int ComboAggregateRequest::aggregates_size() const {
  return _internal_aggregates_size();
}
inline void ComboAggregateRequest::clear_aggregates() {
  aggregates_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* ComboAggregateRequest::mutable_aggregates(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.aggregates)
  return aggregates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >*
ComboAggregateRequest::mutable_aggregates() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.aggregates)
  return &aggregates_;
}
inline const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate& ComboAggregateRequest::_internal_aggregates(int index) const {
  return aggregates_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate& ComboAggregateRequest::aggregates(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.aggregates)
  return _internal_aggregates(index);
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* ComboAggregateRequest::_internal_add_aggregates() {
  return aggregates_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* ComboAggregateRequest::add_aggregates() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.aggregates)
  return _internal_add_aggregates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >&
ComboAggregateRequest::aggregates() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.aggregates)
  return aggregates_;
}

// repeated string group_by_columns = 4;
inline int ComboAggregateRequest::_internal_group_by_columns_size() const {
  return group_by_columns_.size();
}
inline int ComboAggregateRequest::group_by_columns_size() const {
  return _internal_group_by_columns_size();
}
inline void ComboAggregateRequest::clear_group_by_columns() {
  group_by_columns_.Clear();
}
inline std::string* ComboAggregateRequest::add_group_by_columns() {
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  return _internal_add_group_by_columns();
}
inline const std::string& ComboAggregateRequest::_internal_group_by_columns(int index) const {
  return group_by_columns_.Get(index);
}
inline const std::string& ComboAggregateRequest::group_by_columns(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  return _internal_group_by_columns(index);
}
inline std::string* ComboAggregateRequest::mutable_group_by_columns(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  return group_by_columns_.Mutable(index);
}
inline void ComboAggregateRequest::set_group_by_columns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  group_by_columns_.Mutable(index)->assign(value);
}
inline void ComboAggregateRequest::set_group_by_columns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  group_by_columns_.Mutable(index)->assign(std::move(value));
}
inline void ComboAggregateRequest::set_group_by_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
}
inline void ComboAggregateRequest::set_group_by_columns(int index, const char* value, size_t size) {
  group_by_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
}
inline std::string* ComboAggregateRequest::_internal_add_group_by_columns() {
  return group_by_columns_.Add();
}
inline void ComboAggregateRequest::add_group_by_columns(const std::string& value) {
  group_by_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
}
inline void ComboAggregateRequest::add_group_by_columns(std::string&& value) {
  group_by_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
}
inline void ComboAggregateRequest::add_group_by_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
}
inline void ComboAggregateRequest::add_group_by_columns(const char* value, size_t size) {
  group_by_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComboAggregateRequest::group_by_columns() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  return group_by_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComboAggregateRequest::mutable_group_by_columns() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns)
  return &group_by_columns_;
}

// bool force_combo = 5;
inline void ComboAggregateRequest::clear_force_combo() {
  force_combo_ = false;
}
inline bool ComboAggregateRequest::_internal_force_combo() const {
  return force_combo_;
}
inline bool ComboAggregateRequest::force_combo() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.force_combo)
  return _internal_force_combo();
}
inline void ComboAggregateRequest::_internal_set_force_combo(bool value) {
  
  force_combo_ = value;
}
inline void ComboAggregateRequest::set_force_combo(bool value) {
  _internal_set_force_combo(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.force_combo)
}

// -------------------------------------------------------------------

// SortDescriptor

// string column_name = 1;
inline void SortDescriptor::clear_column_name() {
  column_name_.ClearToEmpty();
}
inline const std::string& SortDescriptor::column_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
  return _internal_column_name();
}
inline void SortDescriptor::set_column_name(const std::string& value) {
  _internal_set_column_name(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
}
inline std::string* SortDescriptor::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
  return _internal_mutable_column_name();
}
inline const std::string& SortDescriptor::_internal_column_name() const {
  return column_name_.Get();
}
inline void SortDescriptor::_internal_set_column_name(const std::string& value) {
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SortDescriptor::set_column_name(std::string&& value) {
  
  column_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
}
inline void SortDescriptor::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
}
inline void SortDescriptor::set_column_name(const char* value,
    size_t size) {
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
}
inline std::string* SortDescriptor::_internal_mutable_column_name() {
  
  return column_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SortDescriptor::release_column_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
  return column_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SortDescriptor::set_allocated_column_name(std::string* column_name) {
  if (column_name != nullptr) {
    
  } else {
    
  }
  column_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SortDescriptor.column_name)
}

// bool is_absolute = 2;
inline void SortDescriptor::clear_is_absolute() {
  is_absolute_ = false;
}
inline bool SortDescriptor::_internal_is_absolute() const {
  return is_absolute_;
}
inline bool SortDescriptor::is_absolute() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SortDescriptor.is_absolute)
  return _internal_is_absolute();
}
inline void SortDescriptor::_internal_set_is_absolute(bool value) {
  
  is_absolute_ = value;
}
inline void SortDescriptor::set_is_absolute(bool value) {
  _internal_set_is_absolute(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SortDescriptor.is_absolute)
}

// .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
inline void SortDescriptor::clear_direction() {
  direction_ = 0;
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection SortDescriptor::_internal_direction() const {
  return static_cast< ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection >(direction_);
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection SortDescriptor::direction() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SortDescriptor.direction)
  return _internal_direction();
}
inline void SortDescriptor::_internal_set_direction(::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection value) {
  
  direction_ = value;
}
inline void SortDescriptor::set_direction(::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.SortDescriptor.direction)
}

// -------------------------------------------------------------------

// SortTableRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool SortTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool SortTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& SortTableRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& SortTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SortTableRequest.result_id)
  return _internal_result_id();
}
inline void SortTableRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SortTableRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* SortTableRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SortTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SortTableRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* SortTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* SortTableRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SortTableRequest.result_id)
  return _internal_mutable_result_id();
}
inline void SortTableRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SortTableRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool SortTableRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SortTableRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void SortTableRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SortTableRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& SortTableRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SortTableRequest.source_id)
  return _internal_source_id();
}
inline void SortTableRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.SortTableRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SortTableRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SortTableRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.SortTableRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SortTableRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* SortTableRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SortTableRequest.source_id)
  return _internal_mutable_source_id();
}
inline void SortTableRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.SortTableRequest.source_id)
}

// repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
inline int SortTableRequest::_internal_sorts_size() const {
  return sorts_.size();
}
inline int SortTableRequest::sorts_size() const {
  return _internal_sorts_size();
}
inline void SortTableRequest::clear_sorts() {
  sorts_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* SortTableRequest::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.SortTableRequest.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >*
SortTableRequest::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.SortTableRequest.sorts)
  return &sorts_;
}
inline const ::io::deephaven::proto::backplane::grpc::SortDescriptor& SortTableRequest::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::SortDescriptor& SortTableRequest::sorts(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.SortTableRequest.sorts)
  return _internal_sorts(index);
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* SortTableRequest::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* SortTableRequest::add_sorts() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.SortTableRequest.sorts)
  return _internal_add_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >&
SortTableRequest::sorts() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.SortTableRequest.sorts)
  return sorts_;
}

// -------------------------------------------------------------------

// FilterTableRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool FilterTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool FilterTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& FilterTableRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FilterTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterTableRequest.result_id)
  return _internal_result_id();
}
inline void FilterTableRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FilterTableRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* FilterTableRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FilterTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FilterTableRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FilterTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* FilterTableRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FilterTableRequest.result_id)
  return _internal_mutable_result_id();
}
inline void FilterTableRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FilterTableRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool FilterTableRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool FilterTableRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void FilterTableRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& FilterTableRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& FilterTableRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterTableRequest.source_id)
  return _internal_source_id();
}
inline void FilterTableRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FilterTableRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FilterTableRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FilterTableRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FilterTableRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FilterTableRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FilterTableRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FilterTableRequest.source_id)
  return _internal_mutable_source_id();
}
inline void FilterTableRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FilterTableRequest.source_id)
}

// repeated .io.deephaven.proto.backplane.grpc.FilterDescription filters = 3;
inline int FilterTableRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int FilterTableRequest::filters_size() const {
  return _internal_filters_size();
}
inline void FilterTableRequest::clear_filters() {
  filters_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription* FilterTableRequest::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FilterTableRequest.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >*
FilterTableRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FilterTableRequest.filters)
  return &filters_;
}
inline const ::io::deephaven::proto::backplane::grpc::FilterDescription& FilterTableRequest::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FilterDescription& FilterTableRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterTableRequest.filters)
  return _internal_filters(index);
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription* FilterTableRequest::_internal_add_filters() {
  return filters_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription* FilterTableRequest::add_filters() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FilterTableRequest.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >&
FilterTableRequest::filters() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FilterTableRequest.filters)
  return filters_;
}

// -------------------------------------------------------------------

// FilterDescription

// .io.deephaven.proto.backplane.grpc.FilterDescription.Operation filter_op = 1;
inline void FilterDescription::clear_filter_op() {
  filter_op_ = 0;
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation FilterDescription::_internal_filter_op() const {
  return static_cast< ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation >(filter_op_);
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation FilterDescription::filter_op() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.filter_op)
  return _internal_filter_op();
}
inline void FilterDescription::_internal_set_filter_op(::io::deephaven::proto::backplane::grpc::FilterDescription_Operation value) {
  
  filter_op_ = value;
}
inline void FilterDescription::set_filter_op(::io::deephaven::proto::backplane::grpc::FilterDescription_Operation value) {
  _internal_set_filter_op(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.filter_op)
}

// repeated .io.deephaven.proto.backplane.grpc.FilterDescription children = 2;
inline int FilterDescription::_internal_children_size() const {
  return children_.size();
}
inline int FilterDescription::children_size() const {
  return _internal_children_size();
}
inline void FilterDescription::clear_children() {
  children_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription* FilterDescription::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FilterDescription.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >*
FilterDescription::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FilterDescription.children)
  return &children_;
}
inline const ::io::deephaven::proto::backplane::grpc::FilterDescription& FilterDescription::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FilterDescription& FilterDescription::children(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.children)
  return _internal_children(index);
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription* FilterDescription::_internal_add_children() {
  return children_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FilterDescription* FilterDescription::add_children() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FilterDescription.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FilterDescription >&
FilterDescription::children() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FilterDescription.children)
  return children_;
}

// string string_value = 3;
inline bool FilterDescription::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool FilterDescription::has_string_value() const {
  return _internal_has_string_value();
}
inline void FilterDescription::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void FilterDescription::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_value();
  }
}
inline const std::string& FilterDescription::string_value() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
  return _internal_string_value();
}
inline void FilterDescription::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
}
inline std::string* FilterDescription::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& FilterDescription::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FilterDescription::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterDescription::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
}
inline void FilterDescription::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
}
inline void FilterDescription::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
}
inline std::string* FilterDescription::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterDescription::release_string_value() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void FilterDescription::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FilterDescription.string_value)
}

// double double_value = 4;
inline bool FilterDescription::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool FilterDescription::has_double_value() const {
  return _internal_has_double_value();
}
inline void FilterDescription::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void FilterDescription::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double FilterDescription::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void FilterDescription::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double FilterDescription::double_value() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.double_value)
  return _internal_double_value();
}
inline void FilterDescription::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.double_value)
}

// bool bool_value = 5;
inline bool FilterDescription::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool FilterDescription::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void FilterDescription::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void FilterDescription::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool FilterDescription::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void FilterDescription::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool FilterDescription::bool_value() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.bool_value)
  return _internal_bool_value();
}
inline void FilterDescription::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.bool_value)
}

// sint64 long_value = 6;
inline bool FilterDescription::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline bool FilterDescription::has_long_value() const {
  return _internal_has_long_value();
}
inline void FilterDescription::set_has_long_value() {
  _oneof_case_[0] = kLongValue;
}
inline void FilterDescription::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterDescription::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FilterDescription::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterDescription::long_value() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.long_value)
  return _internal_long_value();
}
inline void FilterDescription::set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.long_value)
}

// sint64 nano_time_value = 7;
inline bool FilterDescription::_internal_has_nano_time_value() const {
  return value_case() == kNanoTimeValue;
}
inline bool FilterDescription::has_nano_time_value() const {
  return _internal_has_nano_time_value();
}
inline void FilterDescription::set_has_nano_time_value() {
  _oneof_case_[0] = kNanoTimeValue;
}
inline void FilterDescription::clear_nano_time_value() {
  if (_internal_has_nano_time_value()) {
    value_.nano_time_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterDescription::_internal_nano_time_value() const {
  if (_internal_has_nano_time_value()) {
    return value_.nano_time_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FilterDescription::_internal_set_nano_time_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_nano_time_value()) {
    clear_value();
    set_has_nano_time_value();
  }
  value_.nano_time_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilterDescription::nano_time_value() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FilterDescription.nano_time_value)
  return _internal_nano_time_value();
}
inline void FilterDescription::set_nano_time_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nano_time_value(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FilterDescription.nano_time_value)
}

inline bool FilterDescription::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void FilterDescription::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FilterDescription::ValueCase FilterDescription::value_case() const {
  return FilterDescription::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FlattenRequest

// .arrow.flight.protocol.Wicket result_id = 1;
inline bool FlattenRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool FlattenRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::arrow::flight::protocol::Wicket& FlattenRequest::_internal_result_id() const {
  const ::arrow::flight::protocol::Wicket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::protocol::Wicket&>(
      ::arrow::flight::protocol::_Wicket_default_instance_);
}
inline const ::arrow::flight::protocol::Wicket& FlattenRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FlattenRequest.result_id)
  return _internal_result_id();
}
inline void FlattenRequest::unsafe_arena_set_allocated_result_id(
    ::arrow::flight::protocol::Wicket* result_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FlattenRequest.result_id)
}
inline ::arrow::flight::protocol::Wicket* FlattenRequest::release_result_id() {
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FlattenRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FlattenRequest.result_id)
  
  ::arrow::flight::protocol::Wicket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::arrow::flight::protocol::Wicket* FlattenRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::protocol::Wicket>(GetArena());
    result_id_ = p;
  }
  return result_id_;
}
inline ::arrow::flight::protocol::Wicket* FlattenRequest::mutable_result_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FlattenRequest.result_id)
  return _internal_mutable_result_id();
}
inline void FlattenRequest::set_allocated_result_id(::arrow::flight::protocol::Wicket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id)->GetArena();
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FlattenRequest.result_id)
}

// .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
inline bool FlattenRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool FlattenRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void FlattenRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& FlattenRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::TableReference* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TableReference&>(
      ::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableReference& FlattenRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FlattenRequest.source_id)
  return _internal_source_id();
}
inline void FlattenRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FlattenRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FlattenRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FlattenRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FlattenRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::TableReference* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FlattenRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableReference>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TableReference* FlattenRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FlattenRequest.source_id)
  return _internal_mutable_source_id();
}
inline void FlattenRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TableReference* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FlattenRequest.source_id)
}

// -------------------------------------------------------------------

// BatchTableRequest_Operation

// .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
inline bool BatchTableRequest_Operation::_internal_has_empty_table() const {
  return op_case() == kEmptyTable;
}
inline bool BatchTableRequest_Operation::has_empty_table() const {
  return _internal_has_empty_table();
}
inline void BatchTableRequest_Operation::set_has_empty_table() {
  _oneof_case_[0] = kEmptyTable;
}
inline void BatchTableRequest_Operation::clear_empty_table() {
  if (_internal_has_empty_table()) {
    if (GetArena() == nullptr) {
      delete op_.empty_table_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* BatchTableRequest_Operation::release_empty_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
  if (_internal_has_empty_table()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* temp = op_.empty_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.empty_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& BatchTableRequest_Operation::_internal_empty_table() const {
  return _internal_has_empty_table()
      ? *op_.empty_table_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest&>(::io::deephaven::proto::backplane::grpc::_EmptyTableRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& BatchTableRequest_Operation::empty_table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
  return _internal_empty_table();
}
inline ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* BatchTableRequest_Operation::unsafe_arena_release_empty_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
  if (_internal_has_empty_table()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* temp = op_.empty_table_;
    op_.empty_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_empty_table(::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table) {
  clear_op();
  if (empty_table) {
    set_has_empty_table();
    op_.empty_table_ = empty_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
}
inline ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* BatchTableRequest_Operation::_internal_mutable_empty_table() {
  if (!_internal_has_empty_table()) {
    clear_op();
    set_has_empty_table();
    op_.empty_table_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(GetArena());
  }
  return op_.empty_table_;
}
inline ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* BatchTableRequest_Operation::mutable_empty_table() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
  return _internal_mutable_empty_table();
}

// .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
inline bool BatchTableRequest_Operation::_internal_has_time_table() const {
  return op_case() == kTimeTable;
}
inline bool BatchTableRequest_Operation::has_time_table() const {
  return _internal_has_time_table();
}
inline void BatchTableRequest_Operation::set_has_time_table() {
  _oneof_case_[0] = kTimeTable;
}
inline void BatchTableRequest_Operation::clear_time_table() {
  if (_internal_has_time_table()) {
    if (GetArena() == nullptr) {
      delete op_.time_table_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::TimeTableRequest* BatchTableRequest_Operation::release_time_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
  if (_internal_has_time_table()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::TimeTableRequest* temp = op_.time_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.time_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& BatchTableRequest_Operation::_internal_time_table() const {
  return _internal_has_time_table()
      ? *op_.time_table_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::TimeTableRequest&>(::io::deephaven::proto::backplane::grpc::_TimeTableRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& BatchTableRequest_Operation::time_table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
  return _internal_time_table();
}
inline ::io::deephaven::proto::backplane::grpc::TimeTableRequest* BatchTableRequest_Operation::unsafe_arena_release_time_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
  if (_internal_has_time_table()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::TimeTableRequest* temp = op_.time_table_;
    op_.time_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_time_table(::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table) {
  clear_op();
  if (time_table) {
    set_has_time_table();
    op_.time_table_ = time_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
}
inline ::io::deephaven::proto::backplane::grpc::TimeTableRequest* BatchTableRequest_Operation::_internal_mutable_time_table() {
  if (!_internal_has_time_table()) {
    clear_op();
    set_has_time_table();
    op_.time_table_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(GetArena());
  }
  return op_.time_table_;
}
inline ::io::deephaven::proto::backplane::grpc::TimeTableRequest* BatchTableRequest_Operation::mutable_time_table() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
  return _internal_mutable_time_table();
}

// .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
inline bool BatchTableRequest_Operation::_internal_has_drop_columns() const {
  return op_case() == kDropColumns;
}
inline bool BatchTableRequest_Operation::has_drop_columns() const {
  return _internal_has_drop_columns();
}
inline void BatchTableRequest_Operation::set_has_drop_columns() {
  _oneof_case_[0] = kDropColumns;
}
inline void BatchTableRequest_Operation::clear_drop_columns() {
  if (_internal_has_drop_columns()) {
    if (GetArena() == nullptr) {
      delete op_.drop_columns_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* BatchTableRequest_Operation::release_drop_columns() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
  if (_internal_has_drop_columns()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* temp = op_.drop_columns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.drop_columns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& BatchTableRequest_Operation::_internal_drop_columns() const {
  return _internal_has_drop_columns()
      ? *op_.drop_columns_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest&>(::io::deephaven::proto::backplane::grpc::_DropColumnsRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& BatchTableRequest_Operation::drop_columns() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
  return _internal_drop_columns();
}
inline ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* BatchTableRequest_Operation::unsafe_arena_release_drop_columns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
  if (_internal_has_drop_columns()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* temp = op_.drop_columns_;
    op_.drop_columns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_drop_columns(::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns) {
  clear_op();
  if (drop_columns) {
    set_has_drop_columns();
    op_.drop_columns_ = drop_columns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
}
inline ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* BatchTableRequest_Operation::_internal_mutable_drop_columns() {
  if (!_internal_has_drop_columns()) {
    clear_op();
    set_has_drop_columns();
    op_.drop_columns_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(GetArena());
  }
  return op_.drop_columns_;
}
inline ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* BatchTableRequest_Operation::mutable_drop_columns() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
  return _internal_mutable_drop_columns();
}

// .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
inline bool BatchTableRequest_Operation::_internal_has_update() const {
  return op_case() == kUpdate;
}
inline bool BatchTableRequest_Operation::has_update() const {
  return _internal_has_update();
}
inline void BatchTableRequest_Operation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void BatchTableRequest_Operation::clear_update() {
  if (_internal_has_update()) {
    if (GetArena() == nullptr) {
      delete op_.update_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::release_update() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
  if (_internal_has_update()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::_internal_update() const {
  return _internal_has_update()
      ? *op_.update_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&>(::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::update() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
  return _internal_update();
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
  if (_internal_has_update()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.update_;
    op_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update) {
  clear_op();
  if (update) {
    set_has_update();
    op_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_op();
    set_has_update();
    op_.update_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(GetArena());
  }
  return op_.update_;
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::mutable_update() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
  return _internal_mutable_update();
}

// .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
inline bool BatchTableRequest_Operation::_internal_has_lazy_update() const {
  return op_case() == kLazyUpdate;
}
inline bool BatchTableRequest_Operation::has_lazy_update() const {
  return _internal_has_lazy_update();
}
inline void BatchTableRequest_Operation::set_has_lazy_update() {
  _oneof_case_[0] = kLazyUpdate;
}
inline void BatchTableRequest_Operation::clear_lazy_update() {
  if (_internal_has_lazy_update()) {
    if (GetArena() == nullptr) {
      delete op_.lazy_update_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::release_lazy_update() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
  if (_internal_has_lazy_update()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.lazy_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.lazy_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::_internal_lazy_update() const {
  return _internal_has_lazy_update()
      ? *op_.lazy_update_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&>(::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::lazy_update() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
  return _internal_lazy_update();
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::unsafe_arena_release_lazy_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
  if (_internal_has_lazy_update()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.lazy_update_;
    op_.lazy_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_lazy_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update) {
  clear_op();
  if (lazy_update) {
    set_has_lazy_update();
    op_.lazy_update_ = lazy_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::_internal_mutable_lazy_update() {
  if (!_internal_has_lazy_update()) {
    clear_op();
    set_has_lazy_update();
    op_.lazy_update_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(GetArena());
  }
  return op_.lazy_update_;
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::mutable_lazy_update() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
  return _internal_mutable_lazy_update();
}

// .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
inline bool BatchTableRequest_Operation::_internal_has_view() const {
  return op_case() == kView;
}
inline bool BatchTableRequest_Operation::has_view() const {
  return _internal_has_view();
}
inline void BatchTableRequest_Operation::set_has_view() {
  _oneof_case_[0] = kView;
}
inline void BatchTableRequest_Operation::clear_view() {
  if (_internal_has_view()) {
    if (GetArena() == nullptr) {
      delete op_.view_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::release_view() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
  if (_internal_has_view()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.view_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::_internal_view() const {
  return _internal_has_view()
      ? *op_.view_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&>(::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::view() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
  return _internal_view();
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::unsafe_arena_release_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
  if (_internal_has_view()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.view_;
    op_.view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view) {
  clear_op();
  if (view) {
    set_has_view();
    op_.view_ = view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::_internal_mutable_view() {
  if (!_internal_has_view()) {
    clear_op();
    set_has_view();
    op_.view_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(GetArena());
  }
  return op_.view_;
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::mutable_view() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
  return _internal_mutable_view();
}

// .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
inline bool BatchTableRequest_Operation::_internal_has_update_view() const {
  return op_case() == kUpdateView;
}
inline bool BatchTableRequest_Operation::has_update_view() const {
  return _internal_has_update_view();
}
inline void BatchTableRequest_Operation::set_has_update_view() {
  _oneof_case_[0] = kUpdateView;
}
inline void BatchTableRequest_Operation::clear_update_view() {
  if (_internal_has_update_view()) {
    if (GetArena() == nullptr) {
      delete op_.update_view_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::release_update_view() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
  if (_internal_has_update_view()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.update_view_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.update_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::_internal_update_view() const {
  return _internal_has_update_view()
      ? *op_.update_view_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&>(::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::update_view() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
  return _internal_update_view();
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::unsafe_arena_release_update_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
  if (_internal_has_update_view()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.update_view_;
    op_.update_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_update_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view) {
  clear_op();
  if (update_view) {
    set_has_update_view();
    op_.update_view_ = update_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::_internal_mutable_update_view() {
  if (!_internal_has_update_view()) {
    clear_op();
    set_has_update_view();
    op_.update_view_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(GetArena());
  }
  return op_.update_view_;
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::mutable_update_view() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
  return _internal_mutable_update_view();
}

// .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
inline bool BatchTableRequest_Operation::_internal_has_select() const {
  return op_case() == kSelect;
}
inline bool BatchTableRequest_Operation::has_select() const {
  return _internal_has_select();
}
inline void BatchTableRequest_Operation::set_has_select() {
  _oneof_case_[0] = kSelect;
}
inline void BatchTableRequest_Operation::clear_select() {
  if (_internal_has_select()) {
    if (GetArena() == nullptr) {
      delete op_.select_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::release_select() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
  if (_internal_has_select()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.select_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::_internal_select() const {
  return _internal_has_select()
      ? *op_.select_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&>(::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& BatchTableRequest_Operation::select() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
  return _internal_select();
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::unsafe_arena_release_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
  if (_internal_has_select()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* temp = op_.select_;
    op_.select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_select(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select) {
  clear_op();
  if (select) {
    set_has_select();
    op_.select_ = select;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::_internal_mutable_select() {
  if (!_internal_has_select()) {
    clear_op();
    set_has_select();
    op_.select_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(GetArena());
  }
  return op_.select_;
}
inline ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* BatchTableRequest_Operation::mutable_select() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
  return _internal_mutable_select();
}

// .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
inline bool BatchTableRequest_Operation::_internal_has_select_distinct() const {
  return op_case() == kSelectDistinct;
}
inline bool BatchTableRequest_Operation::has_select_distinct() const {
  return _internal_has_select_distinct();
}
inline void BatchTableRequest_Operation::set_has_select_distinct() {
  _oneof_case_[0] = kSelectDistinct;
}
inline void BatchTableRequest_Operation::clear_select_distinct() {
  if (_internal_has_select_distinct()) {
    if (GetArena() == nullptr) {
      delete op_.select_distinct_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* BatchTableRequest_Operation::release_select_distinct() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
  if (_internal_has_select_distinct()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* temp = op_.select_distinct_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.select_distinct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& BatchTableRequest_Operation::_internal_select_distinct() const {
  return _internal_has_select_distinct()
      ? *op_.select_distinct_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest&>(::io::deephaven::proto::backplane::grpc::_SelectDistinctRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& BatchTableRequest_Operation::select_distinct() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
  return _internal_select_distinct();
}
inline ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* BatchTableRequest_Operation::unsafe_arena_release_select_distinct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
  if (_internal_has_select_distinct()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* temp = op_.select_distinct_;
    op_.select_distinct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_select_distinct(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct) {
  clear_op();
  if (select_distinct) {
    set_has_select_distinct();
    op_.select_distinct_ = select_distinct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
}
inline ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* BatchTableRequest_Operation::_internal_mutable_select_distinct() {
  if (!_internal_has_select_distinct()) {
    clear_op();
    set_has_select_distinct();
    op_.select_distinct_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(GetArena());
  }
  return op_.select_distinct_;
}
inline ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* BatchTableRequest_Operation::mutable_select_distinct() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
  return _internal_mutable_select_distinct();
}

// .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
inline bool BatchTableRequest_Operation::_internal_has_filter() const {
  return op_case() == kFilter;
}
inline bool BatchTableRequest_Operation::has_filter() const {
  return _internal_has_filter();
}
inline void BatchTableRequest_Operation::set_has_filter() {
  _oneof_case_[0] = kFilter;
}
inline void BatchTableRequest_Operation::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArena() == nullptr) {
      delete op_.filter_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::FilterTableRequest* BatchTableRequest_Operation::release_filter() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
  if (_internal_has_filter()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::FilterTableRequest* temp = op_.filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& BatchTableRequest_Operation::_internal_filter() const {
  return _internal_has_filter()
      ? *op_.filter_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::FilterTableRequest&>(::io::deephaven::proto::backplane::grpc::_FilterTableRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& BatchTableRequest_Operation::filter() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
  return _internal_filter();
}
inline ::io::deephaven::proto::backplane::grpc::FilterTableRequest* BatchTableRequest_Operation::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
  if (_internal_has_filter()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::FilterTableRequest* temp = op_.filter_;
    op_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_filter(::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter) {
  clear_op();
  if (filter) {
    set_has_filter();
    op_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
}
inline ::io::deephaven::proto::backplane::grpc::FilterTableRequest* BatchTableRequest_Operation::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_op();
    set_has_filter();
    op_.filter_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(GetArena());
  }
  return op_.filter_;
}
inline ::io::deephaven::proto::backplane::grpc::FilterTableRequest* BatchTableRequest_Operation::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
  return _internal_mutable_filter();
}

// .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
inline bool BatchTableRequest_Operation::_internal_has_unstructured_filter() const {
  return op_case() == kUnstructuredFilter;
}
inline bool BatchTableRequest_Operation::has_unstructured_filter() const {
  return _internal_has_unstructured_filter();
}
inline void BatchTableRequest_Operation::set_has_unstructured_filter() {
  _oneof_case_[0] = kUnstructuredFilter;
}
inline void BatchTableRequest_Operation::clear_unstructured_filter() {
  if (_internal_has_unstructured_filter()) {
    if (GetArena() == nullptr) {
      delete op_.unstructured_filter_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* BatchTableRequest_Operation::release_unstructured_filter() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
  if (_internal_has_unstructured_filter()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* temp = op_.unstructured_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.unstructured_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& BatchTableRequest_Operation::_internal_unstructured_filter() const {
  return _internal_has_unstructured_filter()
      ? *op_.unstructured_filter_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest&>(::io::deephaven::proto::backplane::grpc::_UnstructuredFilterTableRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& BatchTableRequest_Operation::unstructured_filter() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
  return _internal_unstructured_filter();
}
inline ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* BatchTableRequest_Operation::unsafe_arena_release_unstructured_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
  if (_internal_has_unstructured_filter()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* temp = op_.unstructured_filter_;
    op_.unstructured_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_unstructured_filter(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter) {
  clear_op();
  if (unstructured_filter) {
    set_has_unstructured_filter();
    op_.unstructured_filter_ = unstructured_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
}
inline ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* BatchTableRequest_Operation::_internal_mutable_unstructured_filter() {
  if (!_internal_has_unstructured_filter()) {
    clear_op();
    set_has_unstructured_filter();
    op_.unstructured_filter_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(GetArena());
  }
  return op_.unstructured_filter_;
}
inline ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* BatchTableRequest_Operation::mutable_unstructured_filter() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
  return _internal_mutable_unstructured_filter();
}

// .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
inline bool BatchTableRequest_Operation::_internal_has_sort() const {
  return op_case() == kSort;
}
inline bool BatchTableRequest_Operation::has_sort() const {
  return _internal_has_sort();
}
inline void BatchTableRequest_Operation::set_has_sort() {
  _oneof_case_[0] = kSort;
}
inline void BatchTableRequest_Operation::clear_sort() {
  if (_internal_has_sort()) {
    if (GetArena() == nullptr) {
      delete op_.sort_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SortTableRequest* BatchTableRequest_Operation::release_sort() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
  if (_internal_has_sort()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SortTableRequest* temp = op_.sort_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SortTableRequest& BatchTableRequest_Operation::_internal_sort() const {
  return _internal_has_sort()
      ? *op_.sort_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SortTableRequest&>(::io::deephaven::proto::backplane::grpc::_SortTableRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SortTableRequest& BatchTableRequest_Operation::sort() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
  return _internal_sort();
}
inline ::io::deephaven::proto::backplane::grpc::SortTableRequest* BatchTableRequest_Operation::unsafe_arena_release_sort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
  if (_internal_has_sort()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SortTableRequest* temp = op_.sort_;
    op_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_sort(::io::deephaven::proto::backplane::grpc::SortTableRequest* sort) {
  clear_op();
  if (sort) {
    set_has_sort();
    op_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
}
inline ::io::deephaven::proto::backplane::grpc::SortTableRequest* BatchTableRequest_Operation::_internal_mutable_sort() {
  if (!_internal_has_sort()) {
    clear_op();
    set_has_sort();
    op_.sort_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(GetArena());
  }
  return op_.sort_;
}
inline ::io::deephaven::proto::backplane::grpc::SortTableRequest* BatchTableRequest_Operation::mutable_sort() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
  return _internal_mutable_sort();
}

// .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
inline bool BatchTableRequest_Operation::_internal_has_head() const {
  return op_case() == kHead;
}
inline bool BatchTableRequest_Operation::has_head() const {
  return _internal_has_head();
}
inline void BatchTableRequest_Operation::set_has_head() {
  _oneof_case_[0] = kHead;
}
inline void BatchTableRequest_Operation::clear_head() {
  if (_internal_has_head()) {
    if (GetArena() == nullptr) {
      delete op_.head_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::release_head() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
  if (_internal_has_head()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* temp = op_.head_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.head_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& BatchTableRequest_Operation::_internal_head() const {
  return _internal_has_head()
      ? *op_.head_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&>(::io::deephaven::proto::backplane::grpc::_HeadOrTailRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& BatchTableRequest_Operation::head() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
  return _internal_head();
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
  if (_internal_has_head()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* temp = op_.head_;
    op_.head_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_head(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head) {
  clear_op();
  if (head) {
    set_has_head();
    op_.head_ = head;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::_internal_mutable_head() {
  if (!_internal_has_head()) {
    clear_op();
    set_has_head();
    op_.head_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(GetArena());
  }
  return op_.head_;
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::mutable_head() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
  return _internal_mutable_head();
}

// .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
inline bool BatchTableRequest_Operation::_internal_has_tail() const {
  return op_case() == kTail;
}
inline bool BatchTableRequest_Operation::has_tail() const {
  return _internal_has_tail();
}
inline void BatchTableRequest_Operation::set_has_tail() {
  _oneof_case_[0] = kTail;
}
inline void BatchTableRequest_Operation::clear_tail() {
  if (_internal_has_tail()) {
    if (GetArena() == nullptr) {
      delete op_.tail_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::release_tail() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
  if (_internal_has_tail()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* temp = op_.tail_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.tail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& BatchTableRequest_Operation::_internal_tail() const {
  return _internal_has_tail()
      ? *op_.tail_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&>(::io::deephaven::proto::backplane::grpc::_HeadOrTailRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& BatchTableRequest_Operation::tail() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
  return _internal_tail();
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::unsafe_arena_release_tail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
  if (_internal_has_tail()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* temp = op_.tail_;
    op_.tail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_tail(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail) {
  clear_op();
  if (tail) {
    set_has_tail();
    op_.tail_ = tail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::_internal_mutable_tail() {
  if (!_internal_has_tail()) {
    clear_op();
    set_has_tail();
    op_.tail_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(GetArena());
  }
  return op_.tail_;
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* BatchTableRequest_Operation::mutable_tail() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
  return _internal_mutable_tail();
}

// .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
inline bool BatchTableRequest_Operation::_internal_has_head_by() const {
  return op_case() == kHeadBy;
}
inline bool BatchTableRequest_Operation::has_head_by() const {
  return _internal_has_head_by();
}
inline void BatchTableRequest_Operation::set_has_head_by() {
  _oneof_case_[0] = kHeadBy;
}
inline void BatchTableRequest_Operation::clear_head_by() {
  if (_internal_has_head_by()) {
    if (GetArena() == nullptr) {
      delete op_.head_by_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::release_head_by() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
  if (_internal_has_head_by()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* temp = op_.head_by_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.head_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& BatchTableRequest_Operation::_internal_head_by() const {
  return _internal_has_head_by()
      ? *op_.head_by_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&>(::io::deephaven::proto::backplane::grpc::_HeadOrTailByRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& BatchTableRequest_Operation::head_by() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
  return _internal_head_by();
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::unsafe_arena_release_head_by() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
  if (_internal_has_head_by()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* temp = op_.head_by_;
    op_.head_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_head_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by) {
  clear_op();
  if (head_by) {
    set_has_head_by();
    op_.head_by_ = head_by;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::_internal_mutable_head_by() {
  if (!_internal_has_head_by()) {
    clear_op();
    set_has_head_by();
    op_.head_by_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(GetArena());
  }
  return op_.head_by_;
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::mutable_head_by() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
  return _internal_mutable_head_by();
}

// .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
inline bool BatchTableRequest_Operation::_internal_has_tail_by() const {
  return op_case() == kTailBy;
}
inline bool BatchTableRequest_Operation::has_tail_by() const {
  return _internal_has_tail_by();
}
inline void BatchTableRequest_Operation::set_has_tail_by() {
  _oneof_case_[0] = kTailBy;
}
inline void BatchTableRequest_Operation::clear_tail_by() {
  if (_internal_has_tail_by()) {
    if (GetArena() == nullptr) {
      delete op_.tail_by_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::release_tail_by() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
  if (_internal_has_tail_by()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* temp = op_.tail_by_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.tail_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& BatchTableRequest_Operation::_internal_tail_by() const {
  return _internal_has_tail_by()
      ? *op_.tail_by_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&>(::io::deephaven::proto::backplane::grpc::_HeadOrTailByRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& BatchTableRequest_Operation::tail_by() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
  return _internal_tail_by();
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::unsafe_arena_release_tail_by() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
  if (_internal_has_tail_by()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* temp = op_.tail_by_;
    op_.tail_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_tail_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by) {
  clear_op();
  if (tail_by) {
    set_has_tail_by();
    op_.tail_by_ = tail_by;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::_internal_mutable_tail_by() {
  if (!_internal_has_tail_by()) {
    clear_op();
    set_has_tail_by();
    op_.tail_by_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(GetArena());
  }
  return op_.tail_by_;
}
inline ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* BatchTableRequest_Operation::mutable_tail_by() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
  return _internal_mutable_tail_by();
}

// .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
inline bool BatchTableRequest_Operation::_internal_has_ungroup() const {
  return op_case() == kUngroup;
}
inline bool BatchTableRequest_Operation::has_ungroup() const {
  return _internal_has_ungroup();
}
inline void BatchTableRequest_Operation::set_has_ungroup() {
  _oneof_case_[0] = kUngroup;
}
inline void BatchTableRequest_Operation::clear_ungroup() {
  if (_internal_has_ungroup()) {
    if (GetArena() == nullptr) {
      delete op_.ungroup_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::UngroupRequest* BatchTableRequest_Operation::release_ungroup() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
  if (_internal_has_ungroup()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::UngroupRequest* temp = op_.ungroup_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.ungroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::UngroupRequest& BatchTableRequest_Operation::_internal_ungroup() const {
  return _internal_has_ungroup()
      ? *op_.ungroup_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::UngroupRequest&>(::io::deephaven::proto::backplane::grpc::_UngroupRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::UngroupRequest& BatchTableRequest_Operation::ungroup() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
  return _internal_ungroup();
}
inline ::io::deephaven::proto::backplane::grpc::UngroupRequest* BatchTableRequest_Operation::unsafe_arena_release_ungroup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
  if (_internal_has_ungroup()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::UngroupRequest* temp = op_.ungroup_;
    op_.ungroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_ungroup(::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup) {
  clear_op();
  if (ungroup) {
    set_has_ungroup();
    op_.ungroup_ = ungroup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
}
inline ::io::deephaven::proto::backplane::grpc::UngroupRequest* BatchTableRequest_Operation::_internal_mutable_ungroup() {
  if (!_internal_has_ungroup()) {
    clear_op();
    set_has_ungroup();
    op_.ungroup_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(GetArena());
  }
  return op_.ungroup_;
}
inline ::io::deephaven::proto::backplane::grpc::UngroupRequest* BatchTableRequest_Operation::mutable_ungroup() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
  return _internal_mutable_ungroup();
}

// .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
inline bool BatchTableRequest_Operation::_internal_has_merge() const {
  return op_case() == kMerge;
}
inline bool BatchTableRequest_Operation::has_merge() const {
  return _internal_has_merge();
}
inline void BatchTableRequest_Operation::set_has_merge() {
  _oneof_case_[0] = kMerge;
}
inline void BatchTableRequest_Operation::clear_merge() {
  if (_internal_has_merge()) {
    if (GetArena() == nullptr) {
      delete op_.merge_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* BatchTableRequest_Operation::release_merge() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
  if (_internal_has_merge()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* temp = op_.merge_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.merge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& BatchTableRequest_Operation::_internal_merge() const {
  return _internal_has_merge()
      ? *op_.merge_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest&>(::io::deephaven::proto::backplane::grpc::_MergeTablesRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& BatchTableRequest_Operation::merge() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
  return _internal_merge();
}
inline ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* BatchTableRequest_Operation::unsafe_arena_release_merge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
  if (_internal_has_merge()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* temp = op_.merge_;
    op_.merge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_merge(::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge) {
  clear_op();
  if (merge) {
    set_has_merge();
    op_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
}
inline ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* BatchTableRequest_Operation::_internal_mutable_merge() {
  if (!_internal_has_merge()) {
    clear_op();
    set_has_merge();
    op_.merge_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(GetArena());
  }
  return op_.merge_;
}
inline ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* BatchTableRequest_Operation::mutable_merge() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
  return _internal_mutable_merge();
}

// .io.deephaven.proto.backplane.grpc.JoinTablesRequest join = 19;
inline bool BatchTableRequest_Operation::_internal_has_join() const {
  return op_case() == kJoin;
}
inline bool BatchTableRequest_Operation::has_join() const {
  return _internal_has_join();
}
inline void BatchTableRequest_Operation::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void BatchTableRequest_Operation::clear_join() {
  if (_internal_has_join()) {
    if (GetArena() == nullptr) {
      delete op_.join_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* BatchTableRequest_Operation::release_join() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.join)
  if (_internal_has_join()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* temp = op_.join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::JoinTablesRequest& BatchTableRequest_Operation::_internal_join() const {
  return _internal_has_join()
      ? *op_.join_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest&>(::io::deephaven::proto::backplane::grpc::_JoinTablesRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::JoinTablesRequest& BatchTableRequest_Operation::join() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.join)
  return _internal_join();
}
inline ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* BatchTableRequest_Operation::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.join)
  if (_internal_has_join()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* temp = op_.join_;
    op_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_join(::io::deephaven::proto::backplane::grpc::JoinTablesRequest* join) {
  clear_op();
  if (join) {
    set_has_join();
    op_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.join)
}
inline ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* BatchTableRequest_Operation::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_op();
    set_has_join();
    op_.join_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest >(GetArena());
  }
  return op_.join_;
}
inline ::io::deephaven::proto::backplane::grpc::JoinTablesRequest* BatchTableRequest_Operation::mutable_join() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.join)
  return _internal_mutable_join();
}

// .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 20;
inline bool BatchTableRequest_Operation::_internal_has_combo_aggregate() const {
  return op_case() == kComboAggregate;
}
inline bool BatchTableRequest_Operation::has_combo_aggregate() const {
  return _internal_has_combo_aggregate();
}
inline void BatchTableRequest_Operation::set_has_combo_aggregate() {
  _oneof_case_[0] = kComboAggregate;
}
inline void BatchTableRequest_Operation::clear_combo_aggregate() {
  if (_internal_has_combo_aggregate()) {
    if (GetArena() == nullptr) {
      delete op_.combo_aggregate_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* BatchTableRequest_Operation::release_combo_aggregate() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
  if (_internal_has_combo_aggregate()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* temp = op_.combo_aggregate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.combo_aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& BatchTableRequest_Operation::_internal_combo_aggregate() const {
  return _internal_has_combo_aggregate()
      ? *op_.combo_aggregate_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest&>(::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& BatchTableRequest_Operation::combo_aggregate() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
  return _internal_combo_aggregate();
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* BatchTableRequest_Operation::unsafe_arena_release_combo_aggregate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
  if (_internal_has_combo_aggregate()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* temp = op_.combo_aggregate_;
    op_.combo_aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_combo_aggregate(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate) {
  clear_op();
  if (combo_aggregate) {
    set_has_combo_aggregate();
    op_.combo_aggregate_ = combo_aggregate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* BatchTableRequest_Operation::_internal_mutable_combo_aggregate() {
  if (!_internal_has_combo_aggregate()) {
    clear_op();
    set_has_combo_aggregate();
    op_.combo_aggregate_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(GetArena());
  }
  return op_.combo_aggregate_;
}
inline ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* BatchTableRequest_Operation::mutable_combo_aggregate() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
  return _internal_mutable_combo_aggregate();
}

// .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 21;
inline bool BatchTableRequest_Operation::_internal_has_snapshot() const {
  return op_case() == kSnapshot;
}
inline bool BatchTableRequest_Operation::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void BatchTableRequest_Operation::set_has_snapshot() {
  _oneof_case_[0] = kSnapshot;
}
inline void BatchTableRequest_Operation::clear_snapshot() {
  if (_internal_has_snapshot()) {
    if (GetArena() == nullptr) {
      delete op_.snapshot_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* BatchTableRequest_Operation::release_snapshot() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* temp = op_.snapshot_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& BatchTableRequest_Operation::_internal_snapshot() const {
  return _internal_has_snapshot()
      ? *op_.snapshot_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest&>(::io::deephaven::proto::backplane::grpc::_SnapshotTableRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& BatchTableRequest_Operation::snapshot() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
  return _internal_snapshot();
}
inline ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* BatchTableRequest_Operation::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* temp = op_.snapshot_;
    op_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_snapshot(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot) {
  clear_op();
  if (snapshot) {
    set_has_snapshot();
    op_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
}
inline ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* BatchTableRequest_Operation::_internal_mutable_snapshot() {
  if (!_internal_has_snapshot()) {
    clear_op();
    set_has_snapshot();
    op_.snapshot_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(GetArena());
  }
  return op_.snapshot_;
}
inline ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* BatchTableRequest_Operation::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
  return _internal_mutable_snapshot();
}

// .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 22;
inline bool BatchTableRequest_Operation::_internal_has_flatten() const {
  return op_case() == kFlatten;
}
inline bool BatchTableRequest_Operation::has_flatten() const {
  return _internal_has_flatten();
}
inline void BatchTableRequest_Operation::set_has_flatten() {
  _oneof_case_[0] = kFlatten;
}
inline void BatchTableRequest_Operation::clear_flatten() {
  if (_internal_has_flatten()) {
    if (GetArena() == nullptr) {
      delete op_.flatten_;
    }
    clear_has_op();
  }
}
inline ::io::deephaven::proto::backplane::grpc::FlattenRequest* BatchTableRequest_Operation::release_flatten() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
  if (_internal_has_flatten()) {
    clear_has_op();
      ::io::deephaven::proto::backplane::grpc::FlattenRequest* temp = op_.flatten_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.flatten_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::FlattenRequest& BatchTableRequest_Operation::_internal_flatten() const {
  return _internal_has_flatten()
      ? *op_.flatten_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::FlattenRequest&>(::io::deephaven::proto::backplane::grpc::_FlattenRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::FlattenRequest& BatchTableRequest_Operation::flatten() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
  return _internal_flatten();
}
inline ::io::deephaven::proto::backplane::grpc::FlattenRequest* BatchTableRequest_Operation::unsafe_arena_release_flatten() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
  if (_internal_has_flatten()) {
    clear_has_op();
    ::io::deephaven::proto::backplane::grpc::FlattenRequest* temp = op_.flatten_;
    op_.flatten_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchTableRequest_Operation::unsafe_arena_set_allocated_flatten(::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten) {
  clear_op();
  if (flatten) {
    set_has_flatten();
    op_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
}
inline ::io::deephaven::proto::backplane::grpc::FlattenRequest* BatchTableRequest_Operation::_internal_mutable_flatten() {
  if (!_internal_has_flatten()) {
    clear_op();
    set_has_flatten();
    op_.flatten_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(GetArena());
  }
  return op_.flatten_;
}
inline ::io::deephaven::proto::backplane::grpc::FlattenRequest* BatchTableRequest_Operation::mutable_flatten() {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
  return _internal_mutable_flatten();
}

inline bool BatchTableRequest_Operation::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void BatchTableRequest_Operation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline BatchTableRequest_Operation::OpCase BatchTableRequest_Operation::op_case() const {
  return BatchTableRequest_Operation::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchTableRequest

// repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
inline int BatchTableRequest::_internal_ops_size() const {
  return ops_.size();
}
inline int BatchTableRequest::ops_size() const {
  return _internal_ops_size();
}
inline void BatchTableRequest::clear_ops() {
  ops_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* BatchTableRequest::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.BatchTableRequest.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >*
BatchTableRequest::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.BatchTableRequest.ops)
  return &ops_;
}
inline const ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation& BatchTableRequest::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation& BatchTableRequest::ops(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.BatchTableRequest.ops)
  return _internal_ops(index);
}
inline ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* BatchTableRequest::_internal_add_ops() {
  return ops_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* BatchTableRequest::add_ops() {
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.BatchTableRequest.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >&
BatchTableRequest::ops() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.BatchTableRequest.ops)
  return ops_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type>() {
  return ::io::deephaven::proto::backplane::grpc::JoinTablesRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType>() {
  return ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType_descriptor();
}
template <> struct is_proto_enum< ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection>() {
  return ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection_descriptor();
}
template <> struct is_proto_enum< ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation>() {
  return ::io::deephaven::proto::backplane::grpc::FilterDescription_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_table_2eproto
